{
	"info": {
		"_postman_id": "6b92b61f-e330-4133-97be-cce73eb1c09e",
		"name": "Public API - Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "Create User V1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbf82120-6fb3-40bc-9c0d-a616057f3c7b",
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"    pm.expect(pm.response.text()).to.include(\"User Profile with this Email Address already exists\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b1452072-f970-48b6-b3e2-2db1074c318a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{publicapi.authorization}}",
								"type": "text"
							},
							{
								"key": "AccessKey",
								"value": "{{publicapi.accesskey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Name\": \"JamesTest12\",\r\n    \"EmailAddress\": \"james.speller12@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{public.api.v1baseurl}}/v1/users"
					},
					"response": []
				}
			],
			"id": "5bff5869-a65f-4289-a800-c59ce38e0483"
		},
		{
			"name": "v2",
			"item": [],
			"id": "f9473439-ce63-4d64-87fc-d7416a4ffff2"
		},
		{
			"name": "v3",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Create User V3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "44a1efc4-a8bf-49fd-a910-246e483f4016",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedEmail = uuid.v4() + \"@gmail.com\"; \r",
													"var generatedName = uuid.v4(); \r",
													"\r",
													"pm.environment.set(\"public.api.contact_test_user_generatedemail\", generatedEmail);\r",
													"pm.environment.set(\"public.api.contact_test_user_generatedname\", generatedName);\r",
													"\r",
													"console.log(generatedEmail);\r",
													"console.log(generatedName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6466f10a-bb64-43d4-8943-e4525118e0f2",
												"exec": [
													"pm.test(\"Status code is Created (201)\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user was created\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.environment.set(\"public.api.user_name\", jsonData.Name);\r",
													"    pm.environment.set(\"public.api.user_name_part\", jsonData.Name.substr(0, 4));\r",
													"\r",
													"    pm.environment.set(\"public.api.user_email\", jsonData.EmailAddress);\r",
													"    pm.environment.set(\"public.api.user_email_part\", jsonData.EmailAddress.substr(0, 6));\r",
													"\r",
													"    pm.expect(jsonData).not.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5fa0b3e2-bbf0-4454-bc2e-ef3d26f9bcaf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Name\": \"{{public.api.contact_test_user_generatedname}}\",\r\n    \"EmailAddress\": \"{{public.api.contact_test_user_generatedemail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Users"
									},
									"response": []
								},
								{
									"name": "Create Alternate User for Notes V3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "44a1efc4-a8bf-49fd-a910-246e483f4016",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedEmail = uuid.v4() + \"@gmail.com\"; \r",
													"var generatedName = uuid.v4(); \r",
													"\r",
													"pm.environment.set(\"public.api.notes_test_user_generatedemail\", generatedEmail);\r",
													"pm.environment.set(\"public.api.notes_test_user_generatedname\", generatedName);\r",
													"\r",
													"console.log(generatedEmail);\r",
													"console.log(generatedName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6466f10a-bb64-43d4-8943-e4525118e0f2",
												"exec": [
													"pm.test(\"Status code is Created (201)\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c0b00241-dc15-4863-a4bf-79583be01864",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Name\": \"{{public.api.notes_test_user_generatedname}}\",\r\n    \"EmailAddress\": \"{{public.api.notes_test_user_generatedemail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Users"
									},
									"response": []
								}
							],
							"id": "335fd32d-c4a8-44c1-aaf3-5e8a6dbc52fe"
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search all Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7492c0b-7ac7-4185-ab56-3bca5ef1604d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3733935d-4d21-4269-b18e-7ac779d2e999",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/Users"
									},
									"response": []
								},
								{
									"name": "Search by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be338de3-7a40-4d53-a833-12940d2aeee7",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedName = pm.environment.get(\"public.api.user_name\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const users = jsonData.value;\r",
													"    \r",
													"    pm.expect(users.length).to.be.greaterThan(0);\r",
													"\r",
													"    users.forEach(c => {\r",
													"        pm.expect(c.Name).to.equal(expectedName);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ab92a0dc-bb37-4dde-b1de-fb58375a511e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Users?$filter=Name eq '{{public.api.user_name}}'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Users"
											],
											"query": [
												{
													"key": "$filter",
													"value": "Name eq '{{public.api.user_name}}'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial search by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7492c0b-7ac7-4185-ab56-3bca5ef1604d",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedName = pm.variables.get(\"public.api.user_name_part\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const users = jsonData.value;\r",
													"    \r",
													"    pm.expect(users.length).to.be.greaterThan(0);\r",
													"\r",
													"    users.forEach(c => {\r",
													"        pm.expect(c.Name.toUpperCase().includes(expectedName.toUpperCase().trim())).to.be.true;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3d4eba8f-0ae0-4f71-b9e7-08c8dc9704c0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Users?$filter=(contains(Name, '{{public.api.user_name_part}}'))",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Users"
											],
											"query": [
												{
													"key": "$filter",
													"value": "(contains(Name, '{{public.api.user_name_part}}'))"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search by EmailAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7492c0b-7ac7-4185-ab56-3bca5ef1604d",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedEmail = pm.environment.get(\"public.api.user_email\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const users = jsonData.value;\r",
													"    \r",
													"    pm.expect(users.length).to.be.greaterThan(0);\r",
													"\r",
													"    users.forEach(c => {\r",
													"        pm.expect(c.EmailAddress).to.equal(expectedEmail);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "16b0a9f4-b455-48da-98e7-9fb2f8c40384",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Users?$filter=EmailAddress eq '{{public.api.user_email}}'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Users"
											],
											"query": [
												{
													"key": "$filter",
													"value": "EmailAddress eq '{{public.api.user_email}}'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial search by EmailAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7492c0b-7ac7-4185-ab56-3bca5ef1604d",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedEmail = pm.variables.get(\"public.api.user_email_part\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const users = jsonData.value;\r",
													"    \r",
													"    pm.expect(users.length).to.be.greaterThan(0);\r",
													"\r",
													"    users.forEach(c => {\r",
													"        pm.expect(c.EmailAddress.toUpperCase().includes(expectedEmail.toUpperCase().trim())).to.be.true;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7957b531-d3b9-4356-b615-8ec4858c6369",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Users?$filter=(contains(EmailAddress, '{{public.api.user_email_part}}'))",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Users"
											],
											"query": [
												{
													"key": "$filter",
													"value": "(contains(EmailAddress, '{{public.api.user_email_part}}'))"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search some Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0188d15c-1727-4310-90d8-1d011930b30d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check correct number of items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.gte(1);\r",
													"    pm.expect(jsonData.value.length).to.equal(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a05b736a-5bbc-474b-9659-8d674402765f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Users?$top=5",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Users"
											],
											"query": [
												{
													"key": "$top",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "deb562af-48a8-4015-8091-370726a16279",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches contains Select not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "70d3d83e-bc8c-4f25-80ee-2ac15c1ce133",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Users?$select=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Users"
											],
											"query": [
												{
													"key": "$select",
													"value": "FullName"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "b6106690-d142-493f-ae0d-d36018b4b510"
						}
					],
					"id": "15c92b1c-e17a-4405-91bd-65023748dc31"
				},
				{
					"name": "ClientGroups",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Create Client Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d2b321b-a9cb-40ac-8926-d00dab92ad46",
												"exec": [
													"pm.test(\"Status code is Created (201)\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "909c6678-b2bf-4b95-8f6b-d5d9c9702df9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ClientManager\": \"client manager\",\r\n    \"ClientOwner\": \"client owner\",\r\n    \"ContactType\": \"contact type\",\r\n    \"FullName\": \"client group full name\",\r\n    \"UserDefinedIdentifier\": \"{{$guid}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/ClientGroups"
									},
									"response": []
								},
								{
									"name": "#4350 Create Client Group with CRM Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "882e17f2-58a8-47bb-bd6e-239c97b474ba",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.clientgroup_uniqueidentifier\", generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f30b2f14-8330-46f8-9f81-516bfab1e942",
												"exec": [
													"pm.test(\"Status code is Created (201)\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Set clientgroup properties for future tests\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"public.api.clientgroup_permakey\", jsonData.ClientGroupKey);\r",
													"    pm.environment.set(\"public.api.clientgroup_userdefinedidentifier\", jsonData.UserDefinedIdentifier);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f8250dbe-cd23-41f9-a89d-b95eaaacca65",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ContactType\": \"Vendor / Supplier\",\r\n    \"FullName\": \"client group full name\",\r\n    \"UserDefinedIdentifier\": \"{{public.api.clientgroup_uniqueidentifier}}\",\r\n    \"BusinessCard\": {\r\n        \"IsPrimaryCard\": true,\r\n        \"Addresses\": [\r\n            {\r\n                \"AddressLines\": \"address line test\",\r\n                \"City\": \"city test\",\r\n                \"StateProvinceCounty\": \"NSW\",\r\n                \"ZipCode\": \"2120\",\r\n                \"CountryCode\": \"AU\",\r\n                \"Label\": \"Test label\"\r\n            }\r\n        ],\r\n        \"PhoneNumbers\": [\r\n            {\r\n                \"Number\": \"12345678\",\r\n                \"CountryCode\": \"+61\",\r\n                \"Label\": \"Work\"\r\n            }\r\n        ],\r\n        \"WebSites\": [\r\n            \"web.cool\",\r\n            \"website.two\"\r\n            ],\r\n        \"FacebookLink\": \"facebook.com/test\",\r\n        \"LinkedInLink\": \"LinkedIn.com/test\",\r\n        \"TwitterLink\": \"Twitter.com/test\",\r\n        \"SkypeLink\": \"Skype.com/test\"\r\n    },\r\n    \"EntityDescription\": {\r\n        \"Text\": \"test description\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/ClientGroups"
									},
									"response": []
								}
							],
							"id": "d496d73d-c48a-4554-a7f9-6b7f096074bc"
						},
						{
							"name": "Get by PermaKey",
							"item": [
								{
									"name": "Get by PermaKey with Select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains select not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "1d204758-7db6-4a6e-89cf-8344c2b95cea"
											}
										}
									],
									"id": "42870a04-6db1-459e-82a3-3d4cc52dc92f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientGroups/3S2qmFq6pL2y?$select=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientGroups",
												"3S2qmFq6pL2y"
											],
											"query": [
												{
													"key": "$select",
													"value": "FullName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get by PermaKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3aa173d-3855-4002-83a6-9d331cec644a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should not include business card\", function () {\r",
													"    pm.expect(pm.response.json().BusinessCard).to.eql(undefined);\r",
													"});\r",
													"\r",
													"pm.test(\"ClientGroupKey should match request\", function () {\r",
													"    pm.expect(pm.response.json().ClientGroupKey).to.eql(pm.environment.get(\"public.api.clientgroup_permakey\"));\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3ca2f766-6204-4624-b2dc-bcf45a9baa89",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/ClientGroups/{{public.api.clientgroup_permakey}}"
									},
									"response": []
								},
								{
									"name": "Get by PermaKey that doesn't exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4a722be-d78c-477f-a1f8-85b07e0b45de",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "df020d87-46f4-496f-9757-1c12bd38c8b3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/ClientGroups/HDJHSDJHDSEWE"
									},
									"response": []
								},
								{
									"name": "#4350 Get by PermaKey with expand crm field tests for create request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0ba3ba5-36f9-4090-820d-831ee5d7e53f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Restriction Level Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.RestrictionLevel).length.greaterThan(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Entity Description Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.EntityDescription).to.not.eql(undefined);\r",
													"    pm.expect(jsonData.EntityDescription.Text).length.greaterThan(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Contact Social Media Links Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.BusinessCard.FacebookLink).length.greaterThan(0);\r",
													"    pm.expect(jsonData.BusinessCard.LinkedInLink).length.greaterThan(0);\r",
													"    pm.expect(jsonData.BusinessCard.TwitterLink).length.greaterThan(0);\r",
													"    pm.expect(jsonData.BusinessCard.SkypeLink).length.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "33a1a83a-9268-4b74-901c-516f68c8709e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientGroups/{{public.api.clientgroup_permakey}}?$expand=BusinessCard",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientGroups",
												"{{public.api.clientgroup_permakey}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "BusinessCard"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "aa978630-92af-4353-a467-0fe60d7b3d9e"
						},
						{
							"name": "Get by UserDefinedIdentifier",
							"item": [
								{
									"name": "Get a ClientGroup from the supplied User Defined Identifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b56bc74-520d-4e4b-805d-8388d729bdea",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Business Cards aren't loaded without expand\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.BusinessCards).to.eql(undefined);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8ef2d17f-fe60-4e62-ba6f-b33d7de83e9b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/ClientGroups/KarbonService.GetClientGroupByUserDefinedIdentifier(UserDefinedIdentifier='{{public.api.clientgroup_userdefinedidentifier}}')"
									},
									"response": []
								},
								{
									"name": "Get a ClientGroup from the supplied User Defined Identifier with expand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e99f6d42-c3d8-4e0b-8a06-be33299a4874",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Assert correct client group\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var existingClientGroupKey = pm.environment.get(\"public.api.clientgroup_permakey\");\r",
													"\r",
													"    if (existingClientGroupKey){\r",
													"        pm.expect(jsonData.ClientGroupKey).to.eql(existingClientGroupKey);\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Business are loaded with expand\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.BusinessCard).to.not.eql(undefined);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "67d55e53-3ddb-4270-b68e-6eb09e7b878e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientGroups/KarbonService.GetClientGroupByUserDefinedIdentifier(UserDefinedIdentifier='{{public.api.clientgroup_userdefinedidentifier}}')?$expand=BusinessCard",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientGroups",
												"KarbonService.GetClientGroupByUserDefinedIdentifier(UserDefinedIdentifier='{{public.api.clientgroup_userdefinedidentifier}}')"
											],
											"query": [
												{
													"key": "$expand",
													"value": "BusinessCard"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "4a62cabc-deed-41b6-a931-1d3e55a20007"
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains Select not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "1de4299c-a696-467a-a127-145ffd12fa9d"
											}
										}
									],
									"id": "6beac7b1-f662-4235-a4d2-fb1db2099194",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientGroups?$select=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientGroups"
											],
											"query": [
												{
													"key": "$select",
													"value": "FullName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search parameterless",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "099bfbfd-199b-41c1-b605-8c155266d926",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.gte(0);\r",
													"    pm.expect(jsonData.value.length).to.gte(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ee3dabc1-eb97-4033-93bc-2cf043f4784f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/ClientGroups"
									},
									"response": []
								},
								{
									"name": "Search with parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cc89354-b2bd-4f24-ba96-0fc7b2f7b759",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.gte(0);\r",
													"    pm.expect(jsonData.value.length).to.gte(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a124612a-01b9-447d-b1ee-2fba809fdc47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientGroups?$filter=FullName eq 'client group full name'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientGroups"
											],
											"query": [
												{
													"key": "$filter",
													"value": "FullName eq 'client group full name'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search orderby FullName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "927023fa-2290-4d83-bb55-98ee87fe4b87",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.gte(5);\r",
													"    pm.expect(jsonData.value.length).to.eq(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0d166a20-df76-46bd-a70a-5b3c81d144bd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientGroups?$top=5&$orderby=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientGroups"
											],
											"query": [
												{
													"key": "$top",
													"value": "5"
												},
												{
													"key": "$orderby",
													"value": "FullName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with parameters no results found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4360651d-3240-4111-87d8-529c7ac3154b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.eq(0);\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.eq(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3539a911-2450-4773-a248-5184bf7fbf05",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientGroups?$filter=FullName eq 'XYZ A NAME THAT doesnt existZZZ'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientGroups"
											],
											"query": [
												{
													"key": "$filter",
													"value": "FullName eq 'XYZ A NAME THAT doesnt existZZZ'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with startswith odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains startswith not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Function 'startswith' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "54f8071b-a4fd-4343-aff6-e99b5a985842"
											}
										}
									],
									"id": "8cce8b50-3949-4175-bad0-415b466311c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientGroups?$filter=startswith(FullName, 'A') eq true",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientGroups"
											],
											"query": [
												{
													"key": "$filter",
													"value": "startswith(FullName, 'A') eq true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with datefunction odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains day function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Function 'day' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "bf6a9354-5270-4aa3-9096-ea1f935dc011"
											}
										}
									],
									"id": "03b509e4-c65c-4c20-8cb6-c714c3682b2b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientGroups?$filter=day(LastModifiedDateTime) eq 8",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientGroups"
											],
											"query": [
												{
													"key": "$filter",
													"value": "day(LastModifiedDateTime) eq 8"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "7cf8f3c7-79a3-47fb-b363-e01c6837fc8e"
						},
						{
							"name": "Update (Put)",
							"item": [
								{
									"name": "#4350 Update Client Group with CRM Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fc62cf4-507a-4b3a-b7b1-beed741e4766",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fb2f30c1-b93f-4232-a3ba-9a749ba07b68",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ContactType\": \"Vendor / Supplier\",\r\n    \"FullName\": \"client group full name update\",\r\n    \"UserDefinedIdentifier\": \"{{public.api.clientgroup_uniqueidentifier}}\",\r\n    \"BusinessCard\": {\r\n        \"IsPrimaryCard\": true,\r\n        \"Addresses\": [\r\n            {\r\n                \"AddressLines\": \"address line test update\",\r\n                \"City\": \"city test update\",\r\n                \"StateProvinceCounty\": \"NSW update\",\r\n                \"ZipCode\": \"2120 update\",\r\n                \"CountryCode\": \"AU\",\r\n                \"Label\": \"Test label update\"\r\n            }\r\n        ],\r\n        \"PhoneNumbers\": [\r\n            {\r\n                \"Number\": \"123456789\",\r\n                \"CountryCode\": \"+61\",\r\n                \"Label\": \"Work update\"\r\n            }\r\n        ],\r\n        \"WebSites\": [\r\n            \"web.coolupdate\",\r\n            \"website.twoupdate\"\r\n            ],\r\n        \"FacebookLink\": \"facebook.com/testupdate\",\r\n        \"LinkedInLink\": \"LinkedIn.com/testupdate\",\r\n        \"TwitterLink\": \"Twitter.com/testupdate\",\r\n        \"SkypeLink\": \"Skype.com/testupdate\"\r\n    },\r\n    \"EntityDescription\": {\r\n        \"Text\": \"test description update\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientGroups/{{public.api.clientgroup_permakey}}?$expand=BusinessCard",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientGroups",
												"{{public.api.clientgroup_permakey}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "BusinessCard"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "aff5d817-2af9-45f8-8b7a-562ef1e4a9e8"
						},
						{
							"name": "Update (Patch)",
							"item": [
								{
									"name": "Partial Update Client Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "424c8309-72c9-4ce3-a079-51f610746604",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Patch has been applied\", function () {\r",
													"    pm.expect(pm.response.json().FullName).to.eq(\"Partial updated client group full name\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4efaef7f-9dbd-458b-952d-b3ad45d8a2ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Prefer",
												"value": "return=representation",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FullName\": \"Partial updated client group full name\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/ClientGroups/{{public.api.clientgroup_permakey}}"
									},
									"response": []
								},
								{
									"name": "Partial Update Client Group - Unsupported property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "778ceb3f-0758-4047-aa30-84ba8678c440",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Patch has not been applied and error message is correct\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid property to update. Only FullName can be patched.\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3300474c-5eec-4cdb-8487-37eeb6e808f0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Prefer",
												"value": "return=representation",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ContactType\": \"Organisation\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/ClientGroups/{{public.api.clientgroup_permakey}}"
									},
									"response": []
								}
							],
							"id": "b4bcdb4e-be09-4204-8a44-29bffcb5e5a8"
						}
					],
					"id": "c85812cd-f6e6-4bc2-afdb-f2cc7b6204cd"
				},
				{
					"name": "Contacts",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "#4350 Create Contact with extra CRM Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b86cb0a4-9236-4c22-ab13-d297fae2441e",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.contact_uniqueidentifier\", generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c3c24380-f17c-4a7d-b836-902c6e743a48",
												"exec": [
													"pm.test(\"Status code is Created (201)\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Set contact permakey\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    const fullName = `${jsonData.FirstName} ${jsonData.MiddleName} ${jsonData.LastName}`;\r",
													"    pm.environment.set(\"public.api.contact_permakey\", jsonData.ContactKey);\r",
													"    pm.environment.set(\"public.api.contact_userdefinedidentifier\", jsonData.UserDefinedIdentifier);\r",
													"    pm.environment.set(\"public.api.search_test_contact1_fullname\", fullName);\r",
													"    pm.environment.set(\"public.api.contact_phone\", \"12345678\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "eb1fe95c-45dd-40f1-881b-a5419e5fb2c0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FirstName\": \"First\",\r\n    \"MiddleName\": \"Second\",\r\n    \"LastName\": \"Last\",\r\n    \"PreferredName\": \"Preferrred\",\r\n    \"Salutation\": \"Dr\",\r\n    \"Suffix\": \"Of the Test\",\r\n    \"RestrictionLevel\": \"Public\",\r\n    \"UserDefinedIdentifier\": \"{{public.api.contact_uniqueidentifier}}\",\r\n    \"BusinessCards\": [\r\n        {\r\n            \"IsPrimaryCard\": true,\r\n            \"Addresses\": [\r\n                {\r\n                    \"AddressLines\": \"address line test\",\r\n                    \"City\": \"city test\",\r\n                    \"StateProvinceCounty\": \"NSW\",\r\n                    \"ZipCode\": \"2120\",\r\n                    \"CountryCode\": \"AU\",\r\n                    \"Label\": \"Test label\"\r\n                }\r\n            ],\r\n            \"PhoneNumbers\": [\r\n                {\r\n                    \"Number\": \"12345678\",\r\n                    \"CountryCode\": \"+61\",\r\n                    \"Label\": \"Work\"\r\n                }\r\n            ],\r\n            \"WebSites\": [\r\n                \"web.cool\",\r\n                \"website.two\"\r\n            ],\r\n            \"EmailAddresses\": [\r\n                \"{{public.api.contact_uniqueidentifier}}@karbonhq.com\"\r\n            ],\r\n            \"RoleOrTitle\": \"CIO\",\r\n            \"FacebookLink\": \"facebook.com/test\",\r\n            \"LinkedInLink\": \"LinkedIn.com/test\",\r\n            \"TwitterLink\": \"Twitter.com/test\",\r\n            \"SkypeLink\": \"Skype.com/test\"\r\n        }\r\n    ],\r\n    \"EntityDescription\": {\r\n        \"Text\": \"test description\"\r\n    },\r\n    \"AccountingDetail\": {\r\n        \"BirthDate\": \"2001-05-16\",\r\n        \"DeathDate\": \"2021-05-16\",\r\n        \"Salutation\": \"The Dishonorable\",\r\n        \"Sex\": \"M\",\r\n        \"FinancialYearEndDay\": \"11\",\r\n        \"FinancialYearEndMonth\": \"0\",\r\n        \"LegalName\": \"League of Heels\",\r\n        \"TaxCountryCode\": \"AU\",\r\n        \"IncomeTaxInstallmentPeriod\": \"Monthly\",\r\n        \"RegistrationNumbers\": [\r\n            {\r\n                \"RegistrationNumber\": \"123 321 3445\",\r\n                \"Type\": \"Tax File Number (TFN)\"\r\n            },\r\n            {\r\n                \"RegistrationNumber\": \"444 333 222\",\r\n                \"Type\": \"Australian Business Number (ABN)\"\r\n            }\r\n        ],\r\n        \"Notes\": [\r\n            {\r\n                \"Body\": \"Notes basic body\",\r\n                \"Type\": \"Basic\"\r\n            },\r\n            {\r\n                \"Body\": \"Notes tax body\",\r\n                \"Type\": \"Tax\"\r\n            },\r\n            {\r\n                \"Body\": \"Notes system body\",\r\n                \"Type\": \"System\"\r\n            },\r\n            {\r\n                \"Body\": \"Notes related people body\",\r\n                \"Type\": \"Related People\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Contacts"
									},
									"response": []
								},
								{
									"name": "#9155 Create Contact with Registration Numbers but no Notes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "48265c74-9f2e-464d-981a-c1839d83caeb",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.contact_uniqueidentifier3\", generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e9d5b9f-7710-4b18-b791-9c5673e3897c",
												"exec": [
													"pm.test(\"Status code is Created (201)\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "55da7c11-098c-4f87-bd86-5cc668f34f74",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FirstName\": \"First\",\r\n    \"MiddleName\": \"Second\",\r\n    \"LastName\": \"Last\",\r\n    \"PreferredName\": \"Preferrred\",\r\n    \"Salutation\": \"Dr\",\r\n    \"Suffix\": \"Of the Test\",\r\n    \"RestrictionLevel\": \"Public\",\r\n    \"UserDefinedIdentifier\": \"{{public.api.contact_uniqueidentifier3}}\",\r\n    \"BusinessCards\": [\r\n        {\r\n            \"IsPrimaryCard\": true,\r\n            \"Addresses\": [\r\n                {\r\n                    \"AddressLines\": \"address line test\",\r\n                    \"City\": \"city test\",\r\n                    \"StateProvinceCounty\": \"NSW\",\r\n                    \"ZipCode\": \"2120\",\r\n                    \"CountryCode\": \"AU\",\r\n                    \"Label\": \"Test label\"\r\n                }\r\n            ],\r\n            \"PhoneNumbers\": [\r\n                {\r\n                    \"Number\": \"12345678\",\r\n                    \"CountryCode\": \"+61\",\r\n                    \"Label\": \"Work\"\r\n                }\r\n            ],\r\n            \"WebSites\": [\r\n                \"web.cool\",\r\n                \"website.two\"\r\n            ],\r\n            \"EmailAddresses\": [\r\n                \"{{public.api.contact_uniqueidentifier3}}@karbonhq.com\"\r\n            ],\r\n            \"RoleOrTitle\": \"CIO\",\r\n            \"FacebookLink\": \"facebook.com/test\",\r\n            \"LinkedInLink\": \"LinkedIn.com/test\",\r\n            \"TwitterLink\": \"Twitter.com/test\",\r\n            \"SkypeLink\": \"Skype.com/test\"\r\n        }\r\n    ],\r\n    \"EntityDescription\": {\r\n        \"Text\": \"test description\"\r\n    },\r\n    \"AccountingDetail\": {\r\n        \"BirthDate\": \"2001-05-16\",\r\n        \"DeathDate\": \"2021-05-16\",\r\n        \"Salutation\": \"The Dishonorable\",\r\n        \"Sex\": \"M\",\r\n        \"FinancialYearEndDay\": \"11\",\r\n        \"FinancialYearEndMonth\": \"0\",\r\n        \"LegalName\": \"League of Heels\",\r\n        \"TaxCountryCode\": \"AU\",\r\n        \"IncomeTaxInstallmentPeriod\": \"Monthly\",\r\n        \"RegistrationNumbers\": [\r\n            {\r\n                \"RegistrationNumber\": \"123 321 3445\",\r\n                \"Type\": \"Tax File Number (TFN)\"\r\n            },\r\n            {\r\n                \"RegistrationNumber\": \"444 333 222\",\r\n                \"Type\": \"Australian Business Number (ABN)\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Contacts"
									},
									"response": []
								},
								{
									"name": "Create Contact without notes or registration numbers",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1ca86478-a7de-4674-ba48-057df724bf4e",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.contact_uniqueidentifier2\", generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "76b3f9b0-f79b-4eac-a24d-46a1b2aaaf09",
												"exec": [
													"pm.test(\"Status code is Created (201)\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bfc04902-c47c-46d5-b49e-0874e4481bf7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FirstName\": \"First\",\r\n    \"MiddleName\": \"Second\",\r\n    \"LastName\": \"Last\",\r\n    \"PreferredName\": \"Preferrred\",\r\n    \"Salutation\": \"Dr\",\r\n    \"Suffix\": \"Of the Test\",\r\n    \"RestrictionLevel\": \"Public\",\r\n    \"UserDefinedIdentifier\": \"{{public.api.contact_uniqueidentifier2}}}}\",\r\n    \"BusinessCards\": [\r\n        {\r\n            \"IsPrimaryCard\": true,\r\n            \"Addresses\": [\r\n                {\r\n                    \"AddressLines\": \"address line test\",\r\n                    \"City\": \"city test\",\r\n                    \"StateProvinceCounty\": \"NSW\",\r\n                    \"ZipCode\": \"2120\",\r\n                    \"CountryCode\": \"AU\",\r\n                    \"Label\": \"Test label\"\r\n                }\r\n            ],\r\n            \"PhoneNumbers\": [\r\n                {\r\n                    \"Number\": \"12345678\",\r\n                    \"CountryCode\": \"+61\",\r\n                    \"Label\": \"Work\"\r\n                }\r\n            ],\r\n            \"WebSites\": [\r\n                \"web.cool\",\r\n                \"website.two\"\r\n            ],\r\n            \"EmailAddresses\": [\r\n                \"{{public.api.contact_uniqueidentifier2}}@karbonhq.com\"\r\n            ],\r\n            \"RoleOrTitle\": \"CIO\",\r\n            \"FacebookLink\": \"facebook.com/test\",\r\n            \"LinkedInLink\": \"LinkedIn.com/test\",\r\n            \"TwitterLink\": \"Twitter.com/test\",\r\n            \"SkypeLink\": \"Skype.com/test\"\r\n        }\r\n    ],\r\n    \"EntityDescription\": {\r\n        \"Text\": \"test description\"\r\n    },\r\n    \"AccountingDetail\": {\r\n        \"BirthDate\": \"2001-05-16\",\r\n        \"DeathDate\": \"2021-05-16\",\r\n        \"Salutation\": \"The Dishonorable\",\r\n        \"Sex\": \"M\",\r\n        \"FinancialYearEndDay\": \"11\",\r\n        \"FinancialYearEndMonth\": \"0\",\r\n        \"LegalName\": \"League of Heels\",\r\n        \"TaxCountryCode\": \"AU\",\r\n        \"IncomeTaxInstallmentPeriod\": \"Monthly\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Contacts"
									},
									"response": []
								}
							],
							"id": "ddfbfca0-9c98-489d-89cc-0dc74cefca18"
						},
						{
							"name": "Get By PermaKey",
							"item": [
								{
									"name": "Get by PermaKey with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains select function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "b4c112f2-4c83-4b84-a276-858a64a2740d"
											}
										}
									],
									"id": "a5c65c36-e9f2-471d-aa57-30495f3995b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts/{{public.api.contact_permakey}}?$select=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts",
												"{{public.api.contact_permakey}}"
											],
											"query": [
												{
													"key": "$select",
													"value": "FullName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get by PermaKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "067d410b-4001-463d-be50-470336f95e02",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Business Cards are expanded\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    var businessCards = responseJson.BusinessCards;\r",
													"    pm.expect(businessCards.length).to.be.greaterThan(0);\r",
													"\r",
													"    // Get First business card and ensure a key exists.\r",
													"    pm.expect(businessCards[0].BusinessCardKey).to.be.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"User Defined Identifier is returned\", function() {\r",
													"    pm.expect(pm.response.json().UserDefinedIdentifier).to.eq(pm.environment.get(\"public.api.contact_userdefinedidentifier\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4dbf6d49-8ea8-4477-8ab3-af0c53a1034a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts/{{public.api.contact_permakey}}?$expand=BusinessCards",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts",
												"{{public.api.contact_permakey}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "BusinessCards"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "#4350 Get by PermaKey with Expand CRM fields Create test",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4d527d1-1b55-463e-b792-f14d94c7d446",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Restriction Level Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.RestrictionLevel).length.greaterThan(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Suffix Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.Suffix).length.greaterThan(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Entity Description Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.EntityDescription).to.not.eql(undefined);\r",
													"    pm.expect(jsonData.EntityDescription.Text).length.greaterThan(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Contact Social Media Links Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.BusinessCards[0].FacebookLink).length.greaterThan(0);\r",
													"    pm.expect(jsonData.BusinessCards[0].LinkedInLink).length.greaterThan(0);\r",
													"    pm.expect(jsonData.BusinessCards[0].TwitterLink).length.greaterThan(0);\r",
													"    pm.expect(jsonData.BusinessCards[0].SkypeLink).length.greaterThan(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Accounting Details Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.AccountingDetail).to.not.equal(undefined);\r",
													"    pm.expect(jsonData.AccountingDetail.ContactPermaKey).length.greaterThan(0);\r",
													"    pm.expect(jsonData.AccountingDetail.BirthDate).length.greaterThan(0);\r",
													"    pm.expect(jsonData.AccountingDetail.DeathDate).length.greaterThan(0);\r",
													"    pm.expect(jsonData.AccountingDetail.Salutation).length.greaterThan(0);\r",
													"    pm.expect(jsonData.AccountingDetail.Sex).length.greaterThan(0);\r",
													"    pm.expect(jsonData.AccountingDetail.FinancialYearEndDay).to.equal(11);\r",
													"    pm.expect(jsonData.AccountingDetail.FinancialYearEndMonth).to.equal(0);\r",
													"    pm.expect(jsonData.AccountingDetail.LegalName).length.greaterThan(0);\r",
													"    pm.expect(jsonData.AccountingDetail.TaxCountryCode).length.greaterThan(0);\r",
													"    pm.expect(jsonData.AccountingDetail.IncomeTaxInstallmentPeriod).length.greaterThan(0);\r",
													"    pm.expect(jsonData.AccountingDetail.RegistrationNumbers.length).to.equal(2);\r",
													"    pm.expect(jsonData.AccountingDetail.Notes.length).to.equal(4);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "76a41b24-9c4e-457e-b888-546f7da1e009",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts/{{public.api.contact_permakey}}?$expand=BusinessCards",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts",
												"{{public.api.contact_permakey}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "BusinessCards"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "d8e791ee-5e15-4c85-8a8b-8de5f4002ce9"
						},
						{
							"name": "Get by UserDefinedIdentifier",
							"item": [
								{
									"name": "Get a contact from the supplied User Defined Identifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b48d1b05-2fb3-447d-b6ea-f588b0eb64b5",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Business Cards aren't loaded without expand\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.BusinessCards).to.eql(undefined);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "42434556-16d9-466b-9fb9-c401128f8c2f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "143b3126-3723-462e-b178-b112db142459",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/Contacts/KarbonService.GetContactByUserDefinedIdentifier(UserDefinedIdentifier='{{public.api.contact_userdefinedidentifier}}')"
									},
									"response": [
										{
											"id": "339e2254-5d8f-49e6-bd04-0345ba7658c9",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v3/Contacts/GetByUserDefinedIdentifier(userDefinedIdentifier='{{userDefinedIdentifier}}')"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"FirstName\": \"Douglas\",\n \"MiddleName\": \"Noel\",\n \"LastName\": \"Adams\",\n \"PreferredName\": \"Doug\",\n \"Salutation\": \"Mr\",\n \"BusinessCards\": [\n  {\n   \"BusinessCardKey\": \"2xfLMq5PFqb7\",\n   \"IsPrimaryCard\": false,\n   \"Addresses\": [\n    {\n     \"AddressKey\": \"a5867584-687c-4f77-b397-854ae7523403\",\n     \"AddressLines\": \"2400 Bridgeway, Ste 280\",\n     \"City\": \"Sausalito\",\n     \"StateProvinceCounty\": \"CA\",\n     \"ZipCode\": \"94965\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    },\n    {\n     \"AddressKey\": \"a5867584-687c-4f77-b397-854ae7523403\",\n     \"AddressLines\": \"2400 Bridgeway, Ste 280\",\n     \"City\": \"Sausalito\",\n     \"StateProvinceCounty\": \"CA\",\n     \"ZipCode\": \"94965\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    }\n   ],\n   \"PhoneNumbers\": [\n    {\n     \"PhoneNumberKey\": \"41dfe6a4-efd3-4394-9b41-e5e43624e072\",\n     \"Number\": \"+61212345678\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    },\n    {\n     \"PhoneNumberKey\": \"41dfe6a4-efd3-4394-9b41-e5e43624e072\",\n     \"Number\": \"+61212345678\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    }\n   ],\n   \"WebSites\": [\n    \"https://www.karbonhq.com\"\n   ],\n   \"EmailAddresses\": [\n    \"enquiries@karbonhq.com\"\n   ],\n   \"OrganizationKey\": \"ZGNmtYyLm4z\",\n   \"RoleOrTitle\": \"CEO\"\n  },\n  {\n   \"BusinessCardKey\": \"2xfLMq5PFqb7\",\n   \"IsPrimaryCard\": false,\n   \"Addresses\": [\n    {\n     \"AddressKey\": \"aab4b44b-2e17-4b22-a1ff-795a6998b5b5\",\n     \"AddressLines\": \"2400 Bridgeway, Ste 280\",\n     \"City\": \"Sausalito\",\n     \"StateProvinceCounty\": \"CA\",\n     \"ZipCode\": \"94965\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    },\n    {\n     \"AddressKey\": \"aab4b44b-2e17-4b22-a1ff-795a6998b5b5\",\n     \"AddressLines\": \"2400 Bridgeway, Ste 280\",\n     \"City\": \"Sausalito\",\n     \"StateProvinceCounty\": \"CA\",\n     \"ZipCode\": \"94965\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    }\n   ],\n   \"PhoneNumbers\": [\n    {\n     \"PhoneNumberKey\": \"dbba71c1-759b-49d5-9ca3-4ad6821f5178\",\n     \"Number\": \"+61212345678\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    },\n    {\n     \"PhoneNumberKey\": \"dbba71c1-759b-49d5-9ca3-4ad6821f5178\",\n     \"Number\": \"+61212345678\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    }\n   ],\n   \"WebSites\": [\n    \"https://www.karbonhq.com\"\n   ],\n   \"EmailAddresses\": [\n    \"enquiries@karbonhq.com\"\n   ],\n   \"OrganizationKey\": \"ZGNmtYyLm4z\",\n   \"RoleOrTitle\": \"CEO\"\n  }\n ],\n \"ClientOwner\": \"myowner@karbonhq.com\",\n \"ClientManager\": \"mymanager@karbonhq.com\",\n \"ContactType\": \"Supplier\",\n \"UserDefinedIdentifier\": \"42\",\n \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8664492Z\",\n \"ContactKey\": \"ZGNmtYyLm4z\"\n}"
										},
										{
											"id": "8ef600e7-5595-4e5a-9be3-ec9618354da5",
											"name": "UserDefinedIdentifier is missing or empty",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v3/Contacts/GetByUserDefinedIdentifier(userDefinedIdentifier='{{userDefinedIdentifier}}')"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										},
										{
											"id": "789c60b8-f6eb-48d8-9bf7-a10886d12f29",
											"name": "No Contact found for provided UserDefinedIdentifer",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v3/Contacts/GetByUserDefinedIdentifier(userDefinedIdentifier='{{userDefinedIdentifier}}')"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								},
								{
									"name": "Get a contact from the supplied User Defined Identifier with expand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "861273bb-6184-4f9a-b95b-a3f4d415f5ca",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Business are loaded with expand\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.BusinessCards).to.not.eql(undefined);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c7639dc0-5eac-47f0-bd5f-7d32e96c35d4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts/KarbonService.GetContactByUserDefinedIdentifier(UserDefinedIdentifier='{{public.api.contact_userdefinedidentifier}}')?$expand=BusinessCards",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts",
												"KarbonService.GetContactByUserDefinedIdentifier(UserDefinedIdentifier='{{public.api.contact_userdefinedidentifier}}')"
											],
											"query": [
												{
													"key": "$expand",
													"value": "BusinessCards"
												}
											]
										}
									},
									"response": [
										{
											"id": "87cbdf79-5e87-489c-88a3-7628a9754f02",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v3/Contacts/GetByUserDefinedIdentifier(userDefinedIdentifier='{{userDefinedIdentifier}}')"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"FirstName\": \"Douglas\",\n \"MiddleName\": \"Noel\",\n \"LastName\": \"Adams\",\n \"PreferredName\": \"Doug\",\n \"Salutation\": \"Mr\",\n \"BusinessCards\": [\n  {\n   \"BusinessCardKey\": \"2xfLMq5PFqb7\",\n   \"IsPrimaryCard\": false,\n   \"Addresses\": [\n    {\n     \"AddressKey\": \"a5867584-687c-4f77-b397-854ae7523403\",\n     \"AddressLines\": \"2400 Bridgeway, Ste 280\",\n     \"City\": \"Sausalito\",\n     \"StateProvinceCounty\": \"CA\",\n     \"ZipCode\": \"94965\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    },\n    {\n     \"AddressKey\": \"a5867584-687c-4f77-b397-854ae7523403\",\n     \"AddressLines\": \"2400 Bridgeway, Ste 280\",\n     \"City\": \"Sausalito\",\n     \"StateProvinceCounty\": \"CA\",\n     \"ZipCode\": \"94965\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    }\n   ],\n   \"PhoneNumbers\": [\n    {\n     \"PhoneNumberKey\": \"41dfe6a4-efd3-4394-9b41-e5e43624e072\",\n     \"Number\": \"+61212345678\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    },\n    {\n     \"PhoneNumberKey\": \"41dfe6a4-efd3-4394-9b41-e5e43624e072\",\n     \"Number\": \"+61212345678\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    }\n   ],\n   \"WebSites\": [\n    \"https://www.karbonhq.com\"\n   ],\n   \"EmailAddresses\": [\n    \"enquiries@karbonhq.com\"\n   ],\n   \"OrganizationKey\": \"ZGNmtYyLm4z\",\n   \"RoleOrTitle\": \"CEO\"\n  },\n  {\n   \"BusinessCardKey\": \"2xfLMq5PFqb7\",\n   \"IsPrimaryCard\": false,\n   \"Addresses\": [\n    {\n     \"AddressKey\": \"aab4b44b-2e17-4b22-a1ff-795a6998b5b5\",\n     \"AddressLines\": \"2400 Bridgeway, Ste 280\",\n     \"City\": \"Sausalito\",\n     \"StateProvinceCounty\": \"CA\",\n     \"ZipCode\": \"94965\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    },\n    {\n     \"AddressKey\": \"aab4b44b-2e17-4b22-a1ff-795a6998b5b5\",\n     \"AddressLines\": \"2400 Bridgeway, Ste 280\",\n     \"City\": \"Sausalito\",\n     \"StateProvinceCounty\": \"CA\",\n     \"ZipCode\": \"94965\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    }\n   ],\n   \"PhoneNumbers\": [\n    {\n     \"PhoneNumberKey\": \"dbba71c1-759b-49d5-9ca3-4ad6821f5178\",\n     \"Number\": \"+61212345678\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    },\n    {\n     \"PhoneNumberKey\": \"dbba71c1-759b-49d5-9ca3-4ad6821f5178\",\n     \"Number\": \"+61212345678\",\n     \"CountryCode\": \"US\",\n     \"Label\": \"Work\"\n    }\n   ],\n   \"WebSites\": [\n    \"https://www.karbonhq.com\"\n   ],\n   \"EmailAddresses\": [\n    \"enquiries@karbonhq.com\"\n   ],\n   \"OrganizationKey\": \"ZGNmtYyLm4z\",\n   \"RoleOrTitle\": \"CEO\"\n  }\n ],\n \"ClientOwner\": \"myowner@karbonhq.com\",\n \"ClientManager\": \"mymanager@karbonhq.com\",\n \"ContactType\": \"Supplier\",\n \"UserDefinedIdentifier\": \"42\",\n \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8664492Z\",\n \"ContactKey\": \"ZGNmtYyLm4z\"\n}"
										},
										{
											"id": "453cdab9-4027-4043-ae4f-59f5eb0886c4",
											"name": "UserDefinedIdentifier is missing or empty",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v3/Contacts/GetByUserDefinedIdentifier(userDefinedIdentifier='{{userDefinedIdentifier}}')"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										},
										{
											"id": "8c4753be-2112-43e3-8086-1d8cbaa11c14",
											"name": "No Contact found for provided UserDefinedIdentifer",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": "{{baseUrl}}/v3/Contacts/GetByUserDefinedIdentifier(userDefinedIdentifier='{{userDefinedIdentifier}}')"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": ""
										}
									]
								},
								{
									"name": "Search parameterless",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c85b03e-2695-4e94-a629-f4e41de69ffe",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Parameterless Query Returns at most 100 Contacts\", function () {\r",
													"    const responseJson = pm.response.json();    \r",
													"    pm.expect(responseJson.value.length).to.be.lessThan(101);\r",
													"});\r",
													"\r",
													"pm.test(\"Grabbing two Full Names to use in future tests\", function () {\r",
													"    const responseJson = pm.response.json();    \r",
													"    pm.expect(responseJson.value.length).to.be.greaterThan(1);\r",
													"    pm.environment.set(\"public.api.search_test_contact1_fullname\", responseJson.value[0].FullName);\r",
													"    pm.environment.set(\"public.api.search_test_contact2_fullname\", responseJson.value[1].FullName);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a975f37d-5b61-4458-8bbd-1319df5df2d9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/Contacts"
									},
									"response": []
								}
							],
							"id": "92c1ac4e-19ca-4689-91b1-ab0d653bab1a"
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search orderby FullName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a61688f-76c9-473a-9041-f06975e7078a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.gte(5);\r",
													"    pm.expect(jsonData.value.length).to.eq(5);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5847f103-912f-4d9d-b0e1-17b6aeeb91d9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts?$top=5&$orderby=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts"
											],
											"query": [
												{
													"key": "$top",
													"value": "5"
												},
												{
													"key": "$orderby",
													"value": "FullName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search orderby LastModifiedDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8ba1d71-f679-43db-bef4-3b3ac115b9fe",
												"exec": [
													"/*pm.test(\"#7779 Ordering contacts by LastModifiedDate is broken\", function () {\r",
													"    // Change this when #7779 is fixed. This test should start failing.\r",
													"    pm.response.to.have.status(500);\r",
													"});*/\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check contacts were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7a0342d2-72ee-42c5-8108-335f362d78d1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts?$top=5&$orderby=LastModifiedDateTime",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts"
											],
											"query": [
												{
													"key": "$top",
													"value": "5"
												},
												{
													"key": "$orderby",
													"value": "LastModifiedDateTime"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains Select not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "b8b4dbfb-6235-4e17-b521-247c5f6c5602"
											}
										}
									],
									"id": "3440aa3c-e962-4653-9da0-39ddf7f1b919",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts?$select=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts"
											],
											"query": [
												{
													"key": "$select",
													"value": "FullName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with startswith odata attribute not supported",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63ef35a6-45ee-4da3-bc11-d94b470e1e41",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check error message contents\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Function 'startswith' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bf1b038c-9858-42d9-9f20-4a92bdfa3d65",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts?$filter=startswith(EmailAddress, 'james')",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts"
											],
											"query": [
												{
													"key": "$filter",
													"value": "startswith(EmailAddress, 'james')"
												}
											]
										}
									},
									"response": [
										{
											"id": "791164cb-5b00-4fc5-8356-0e30737c6a02",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search with datefunction odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains day function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Function 'day' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "d807ab42-22ec-475c-adfb-b08a4d70a71b"
											}
										}
									],
									"id": "7f30a192-6172-4424-96b7-0e7e57593b6a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts?$filter=day(LastModifiedDateTime) eq 8",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts"
											],
											"query": [
												{
													"key": "$filter",
													"value": "day(LastModifiedDateTime) eq 8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with Greater than odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains Logical operator not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Logical operator 'NotEqual' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "81cf3fc0-620d-4405-a6af-a6106d2dfd45"
											}
										}
									],
									"id": "36c7fe68-c3ff-4d30-ad7a-b5abaf16fca5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts?$filter=PhoneNumber ne '10'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts"
											],
											"query": [
												{
													"key": "$filter",
													"value": "PhoneNumber ne '10'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search contacts by FullName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0315d2fc-9d9e-4dc2-abb3-dd6d2916fe72",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching item was found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.be.greaterThan(0);\r",
													"    var contactData = jsonData.value[0];\r",
													"\r",
													"    pm.expect(contactData.FullName).to.eq(pm.environment.get(\"public.api.search_test_contact1_fullname\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d9237b11-0468-47d0-b48a-5f93ddc04224",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts?$filter=FullName eq '{{public.api.search_test_contact1_fullname}}'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts"
											],
											"query": [
												{
													"key": "$filter",
													"value": "FullName eq '{{public.api.search_test_contact1_fullname}}'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial search by EmailAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af8b51c3-c739-4a5b-93f3-52011572104b",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedEmail = pm.variables.get(\"public.api.contact_uniqueidentifier\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const contacts = jsonData.value;\r",
													"    \r",
													"    pm.expect(contacts.length).to.be.greaterThan(0);\r",
													"\r",
													"    contacts.forEach(c => {\r",
													"        pm.expect(c.EmailAddress.includes(expectedEmail)).to.be.true;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "87277b6b-2b81-422e-a0fe-274a99fedf35",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts?$filter=(contains(EmailAddress, '{{public.api.contact_uniqueidentifier}}'))",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts"
											],
											"query": [
												{
													"key": "$filter",
													"value": "(contains(EmailAddress, '{{public.api.contact_uniqueidentifier}}'))"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial search by FullName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af8b51c3-c739-4a5b-93f3-52011572104b",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedName = pm.variables.get(\"public.api.search_test_contact1_fullname\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const contacts = jsonData.value;\r",
													"    \r",
													"    pm.expect(contacts.length).to.be.greaterThan(0);\r",
													"\r",
													"    contacts.forEach(c => {\r",
													"        pm.expect(c.FullName.includes(expectedName)).to.be.true;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2c6a4c26-ec85-45c1-98c6-dc0fa14ab6dc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts?$filter=(contains(FullName, '{{public.api.search_test_contact1_fullname}}'))",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts"
											],
											"query": [
												{
													"key": "$filter",
													"value": "(contains(FullName, '{{public.api.search_test_contact1_fullname}}'))"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial search by PhoneNumber",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a0a739c-2cd5-4dbc-b0e2-46f3a9445838",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedPhone = pm.variables.get(\"public.api.contact_phone\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const contacts = jsonData.value;\r",
													"    \r",
													"    pm.expect(contacts.length).to.be.greaterThan(0);\r",
													"\r",
													"    contacts.forEach(c => {\r",
													"        pm.expect(c.PhoneNumber.includes(expectedPhone)).to.be.true;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bbd54a6d-157b-4153-acac-76852d2f3564",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts?$filter=(contains(PhoneNumber, '{{public.api.contact_phone}}'))",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts"
											],
											"query": [
												{
													"key": "$filter",
													"value": "(contains(PhoneNumber, '{{public.api.contact_phone}}'))"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "57cbf28c-9afc-46d2-b755-9a600247486d"
						},
						{
							"name": "Update (Put)",
							"item": [
								{
									"name": "#4350 Update Contact with extra CRM Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b86cb0a4-9236-4c22-ab13-d297fae2441e",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.contact_uniqueidentifier\", generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c3c24380-f17c-4a7d-b836-902c6e743a48",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f33be3c2-73a3-4a34-88a8-5d425311944b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FirstName\": \"First update\",\r\n    \"MiddleName\": \"Second update\",\r\n    \"LastName\": \"Last update\",\r\n    \"PreferredName\": \"Preferrred update\",\r\n    \"Salutation\": \"Dr\",\r\n    \"Suffix\": \"Of the Test update\",\r\n    \"RestrictionLevel\": \"Public\",\r\n    \"UserDefinedIdentifier\": \"{{public.api.contact_uniqueidentifier}}\",\r\n    \"BusinessCards\": [\r\n        {\r\n            \"IsPrimaryCard\": true,\r\n            \"Addresses\": [\r\n                {\r\n                    \"AddressLines\": \"address line test update\",\r\n                    \"City\": \"city test update\",\r\n                    \"StateProvinceCounty\": \"NSW update\",\r\n                    \"ZipCode\": \"2120 update\",\r\n                    \"CountryCode\": \"AU\",\r\n                    \"Label\": \"Test label update\"\r\n                }\r\n            ],\r\n            \"PhoneNumbers\": [\r\n                {\r\n                    \"Number\": \"12345678\",\r\n                    \"CountryCode\": \"+61\",\r\n                    \"Label\": \"Work update\"\r\n                }\r\n            ],\r\n            \"WebSites\": [\r\n                \"web.coolupdate\",\r\n                \"website.twoupdate\"\r\n            ],\r\n            \"EmailAddresses\": [\r\n                \"{{public.api.contact_uniqueidentifier}}@karbonhq.com\"\r\n            ],\r\n            \"RoleOrTitle\": \"CIO\",\r\n            \"FacebookLink\": \"facebook.com/testupdate\",\r\n            \"LinkedInLink\": \"LinkedIn.com/testupdate\",\r\n            \"TwitterLink\": \"Twitter.com/testupdate\",\r\n            \"SkypeLink\": \"Skype.com/testupdate\"\r\n        }\r\n    ],\r\n    \"EntityDescription\": {\r\n        \"Text\": \"test description update\"\r\n    },\r\n    \"AccountingDetail\": {\r\n        \"ContactPermaKey\": \"{{public.api.contact_permakey}}\",\r\n        \"BirthDate\": \"2001-05-16\",\r\n        \"DeathDate\": \"2021-05-16\",\r\n        \"Salutation\": \"The Dishonorable update\",\r\n        \"Sex\": \"M\",\r\n        \"FinancialYearEndDay\": \"11\",\r\n        \"FinancialYearEndMonth\": \"0\",\r\n        \"LegalName\": \"League of Heels update\",\r\n        \"TaxCountryCode\": \"AU\",\r\n        \"IncomeTaxInstallmentPeriod\": \"Monthly\",\r\n        \"RegistrationNumbers\": [\r\n            {\r\n                \"RegistrationNumber\": \"123 321 3445\",\r\n                \"Type\": \"Tax File Number (TFN)\"\r\n            },\r\n            {\r\n                \"RegistrationNumber\": \"444 333 222\",\r\n                \"Type\": \"Australian Business Number (ABN)\"\r\n            }\r\n        ],\r\n        \"Notes\": [\r\n            {\r\n                \"Body\": \"Notes basic body update\",\r\n                \"Type\": \"Basic\"\r\n            },\r\n            {\r\n                \"Body\": \"Notes tax body update\",\r\n                \"Type\": \"Tax\"\r\n            },\r\n            {\r\n                \"Body\": \"Notes system body update\",\r\n                \"Type\": \"System\"\r\n            },\r\n            {\r\n                \"Body\": \"Notes related people body update\",\r\n                \"Type\": \"Related People\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Contacts/{{public.api.contact_permakey}}?$expand=BusinessCard",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Contacts",
												"{{public.api.contact_permakey}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "BusinessCard"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "36b3bc3d-d8f5-4db3-88f3-535d7afa8243"
						},
						{
							"name": "Update (Patch)",
							"item": [
								{
									"name": "Partial Update Contact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3a416766-90d7-4baa-a90b-dd6cdf753261",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.contact_uniqueidentifier\", generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a27a792c-9ea7-442c-bc50-05885edbb3d4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Fields have been patched correctly\", function () {\r",
													"    json = pm.response.json();\r",
													"    pm.expect(json.FirstName).to.eq(\"Partial First Name\");\r",
													"    pm.expect(json.MiddleName).to.eq(\"Partial Middle Name\");\r",
													"    pm.expect(json.LastName).to.eq(\"Partial Last Name\");\r",
													"    pm.expect(json.PreferredName).to.eq(\"Partial Preferred Name\");\r",
													"    pm.expect(json.Salutation).to.eq(\"Ms\");\r",
													"    pm.expect(json.Suffix).to.eq(\"Partial Suffix\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e62a1782-4b50-47ad-a2bd-62cf1cae63f1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Prefer",
												"value": "return=representation",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FirstName\": \"Partial First Name\",\r\n    \"MiddleName\": \"Partial Middle Name\",\r\n    \"LastName\": \"Partial Last Name\",\r\n    \"PreferredName\": \"Partial Preferred Name\",\r\n    \"Salutation\": \"Ms\",\r\n    \"Suffix\": \"Partial Suffix\"    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Contacts/{{public.api.contact_permakey}}"
									},
									"response": []
								},
								{
									"name": "Partial Update Contact - Unsupported property",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "56b1097b-7142-495c-b5b2-09a9e1943905",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.contact_uniqueidentifier\", generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2c8ec812-d6da-4719-b829-6dfbd6b03a83",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Patch has not been applied and error message is correct\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid property to update. Only FirstName,MiddleName,LastName,PreferredName,Salutation,Suffix can be patched.\");\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1ec32232-46c1-4a19-90ff-f6be2a199975",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Prefer",
												"value": "return=representation",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"UserDefinedIdentifier\": \"Whatever\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Contacts/{{public.api.contact_permakey}}"
									},
									"response": []
								}
							],
							"id": "97627977-40f3-4a4f-a1ef-8aa37a61fb54"
						}
					],
					"id": "6296cbb5-719a-4c0b-911a-bba441b61b48"
				},
				{
					"name": "Files",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Create File",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36cfedae-5966-4702-a8c8-173bed731c17",
												"exec": [
													"// Note: cannot do file uploads using Monitor.\r",
													"// https://github.com/postmanlabs/postman-app-support/issues/5147\r",
													"// We could possibly do it using Newman\r",
													"\r",
													"// pm.test(\"Status code is Created (201)\", function () {\r",
													"//     pm.response.to.have.status(201);\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ddfbe332-3403-42e4-93b7-e99c25907030",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"value": null
												},
												{
													"key": "FileName",
													"value": "test.txt",
													"type": "text"
												},
												{
													"key": "MimeType",
													"value": "text/plain",
													"type": "text"
												},
												{
													"key": "contact_keys",
													"value": "{{public.api.contact_permakey}}",
													"type": "text"
												}
											]
										},
										"url": "{{public.api.baseurl}}/v3/Files"
									},
									"response": []
								},
								{
									"name": "Create File Clientapp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ae1d9e0-09f5-4d3f-b33a-753f72468908",
												"exec": [
													"// Note: cannot do file uploads using Monitor.\r",
													"// https://github.com/postmanlabs/postman-app-support/issues/5147\r",
													"// We could possibly do it using Newman\r",
													"\r",
													"// pm.test(\"Status code is Created (201)\", function () {\r",
													"//     pm.response.to.have.status(201);\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d83c2ec7-5656-43d3-90c3-fca8d0fcc3c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"value": null
												},
												{
													"key": "FileName",
													"value": "",
													"type": "text"
												},
												{
													"key": "MimeType",
													"value": "text/plain",
													"type": "text"
												},
												{
													"key": "contact_keys",
													"value": "3DSWH2LDmNLD",
													"type": "text",
													"disabled": true
												},
												{
													"key": "topicitem_key",
													"value": "4FkmFWfPJz6t",
													"type": "text"
												}
											]
										},
										"url": "{{public.api.baseurl}}/v3/Files"
									},
									"response": []
								}
							],
							"id": "9775015b-d1cc-4a50-9e67-f660cdc25159"
						}
					],
					"id": "ebee3ace-68e0-4465-b35a-3b547da4bdc1"
				},
				{
					"name": "Notes",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Create Note",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0b157e4-e10e-4953-9315-22bd5ef22780",
												"exec": [
													"pm.test(\"Status code is Created (201)\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "40221808-de29-4aba-b998-6b4b298ec00c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{publicapi.authorization}}"
											},
											{
												"key": "AccessKey",
												"type": "text",
												"value": "{{publicapi.accesskey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssigneeEmailAddress\":\"system@karbonhq.com\",\r\n    \"AuthorEmailAddress\": \"system@karbonhq.com\",\r\n    \"Body\": \"{Your note body here}\",\r\n    \"DueDate\": \"2021-03-11T15:12:55+11:00\",\r\n    \"Subject\": \"{Your subject header here}\",\r\n    \"TodoDate\": \"2021-03-11T15:12:55+11:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Notes"
									},
									"response": [
										{
											"id": "048468b9-3768-45cf-a7a6-3affe95ec016",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Create Note with System Display Name on other's behalf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0b157e4-e10e-4953-9315-22bd5ef22780",
												"exec": [
													"pm.test(\"Status code is Created (201)\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e85c3dd0-dd89-4a85-b7a5-eea05b987212",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{publicapi.authorization}}"
											},
											{
												"key": "AccessKey",
												"type": "text",
												"value": "{{publicapi.accesskey}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssigneeEmailAddress\":\"{{public.api.notes_test_user_generatedemail}}\",\r\n    \"AuthorEmailAddress\": \"{{public.api.notes_test_user_generatedemail}}\",\r\n    \"Body\": \"Sample note body here\",\r\n    \"DueDate\": \"2025-03-11T15:12:55+11:00\",\r\n    \"Subject\": \"Sample subject header here\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Notes"
									},
									"response": [
										{
											"id": "63a2223f-f096-4ebc-ac3a-0030b552a0c1",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								}
							],
							"id": "49fa4c02-4d6f-4df7-8ac3-5ef90ed4ed24"
						}
					],
					"id": "53524b60-e32d-47e5-944c-f1ae44c606bf"
				},
				{
					"name": "Organizations",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "#4350 Create Organization with CRM Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4345faa4-39ca-46e9-bcd0-2b26cc04be86",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.organization_uniqueidentifier\", generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ebb4c896-ea10-4a3d-9562-81dff4bd0786",
												"exec": [
													"pm.test(\"Status code is Created (201)\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Set organization permakey\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"public.api.organization_permakey\", jsonData.OrganizationKey);\r",
													"    pm.environment.set(\"public.api.test_organization_userdefinedidentifier\", jsonData.UserDefinedIdentifier);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8b26a3f4-5213-4dc7-84a8-ce83d679bebd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FullName\": \"Full Name Test\",\r\n    \"RestrictionLevel\": \"Public\",\r\n    \"ContactType\": \"Prospect\",\r\n    \"UserDefinedIdentifier\": \"{{public.api.organization_uniqueidentifier}}\",\r\n    \"BusinessCards\": [\r\n        {\r\n            \"IsPrimaryCard\": true,\r\n            \"Addresses\": [\r\n                {\r\n                    \"AddressLines\": \"address line test\",\r\n                    \"City\": \"city test\",\r\n                    \"StateProvinceCounty\": \"NSW\",\r\n                    \"ZipCode\": \"2120\",\r\n                    \"CountryCode\": \"AU\",\r\n                    \"Label\": \"Test label\"\r\n                }\r\n            ],\r\n            \"PhoneNumbers\": [\r\n                {\r\n                    \"Number\": \"12345678\",\r\n                    \"CountryCode\": \"+61\",\r\n                    \"Label\": \"Work\"\r\n                }\r\n            ],\r\n            \"WebSites\": [\r\n                \"web.cool\",\r\n                \"website.two\"\r\n            ],\r\n            \"EmailAddresses\": [\r\n                \"{{public.api.organization_uniqueidentifier}}@karbonhq.com\"\r\n            ],\r\n            \"RoleOrTitle\": \"CIO\",\r\n            \"FacebookLink\": \"facebook.com/test\",\r\n            \"LinkedInLink\": \"LinkedIn.com/test\",\r\n            \"TwitterLink\": \"Twitter.com/test\",\r\n            \"SkypeLink\": \"Skype.com/test\"\r\n        }\r\n    ],\r\n    \"EntityDescription\": {\r\n        \"Text\": \"test description\"\r\n    },\r\n\"AccountingDetail\": {\r\n        \"LegalName\": \"Oranization Details\",\r\n        \"TaxCountryCode\": \"AU\",\r\n        \"EntityType\": \"Partnership\",\r\n        \"IncorporationDate\": \"2021-05-16\",\r\n        \"LineOfBusiness\": \"Fast moving socks\",\r\n        \"AnnualRevenue\": 60000.50,\r\n        \"OrganizationValuation\": 120000.50,\r\n        \"Sells\": \"Products\",\r\n        \"RevenueModel\": \"Markup\",\r\n        \"FinancialYearEndMonth\": 2,\r\n        \"FinancialYearEndDay\": 11,\r\n        \"GstPeriod\": \"Monthly\",\r\n        \"IncomeTaxInstallmentPeriod\": \"Quarterly\",\r\n        \"GstBasis\": \"Invoice\",\r\n        \"RegistrationNumbers\": [\r\n            {\r\n                \"RegistrationNumber\": \"123 321 3445\",\r\n                \"Type\": \"Tax File Number (TFN)\"\r\n            },\r\n            {\r\n                \"RegistrationNumber\": \"444 333 222\",\r\n                \"Type\": \"Australian Company Number (ACN)\"\r\n            },\r\n            {\r\n                \"RegistrationNumber\": \"444 333 222\",\r\n                \"Type\": \"Australian Business Number (ABN)\"\r\n            }\r\n        ],\r\n        \"Notes\": [\r\n            {\r\n                \"Body\": \"Notes basic body\",\r\n                \"Type\": \"Basic\"\r\n            },\r\n            {\r\n                \"Body\": \"Notes tax body\",\r\n                \"Type\": \"Tax\"\r\n            },\r\n            {\r\n                \"Body\": \"Notes system body\",\r\n                \"Type\": \"System\"\r\n            },\r\n            {\r\n                \"Body\": \"Notes Owner body\",\r\n                \"Type\": \"Owner\"\r\n            },\r\n            {\r\n                \"Body\": \"Notes Officer body\",\r\n                \"Type\": \"Officer\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Organizations"
									},
									"response": []
								}
							],
							"id": "90efd432-6739-4d8c-80b4-dfa404831723"
						},
						{
							"name": "Get by PermaKey",
							"item": [
								{
									"name": "Get by PermaKey with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains select function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "f9e68cfa-ab58-4959-b526-e1f16d9a764b"
											}
										}
									],
									"id": "aef1ec15-ef18-45cb-8d0e-344e2322d2d6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations/{{public.api.organization_permakey}}?$select=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations",
												"{{public.api.organization_permakey}}"
											],
											"query": [
												{
													"key": "$select",
													"value": "FullName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get by PermaKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70420c20-f6dc-4ad1-b819-39372cf1f7f9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Assert correct organization is returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.OrganizationKey).to.be.eql(pm.environment.get(\"public.api.organization_permakey\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "14d8ea4b-db69-4e01-9cce-bf67672170ed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/Organizations/{{public.api.organization_permakey}}"
									},
									"response": []
								},
								{
									"name": "#4350 Get by PermaKey with Expand CRM Fields Create test",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62e6d16f-4374-45ce-8fdc-f2313c527369",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Restriction Level Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.RestrictionLevel).length.greaterThan(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Entity Description Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.EntityDescription).to.not.eql(undefined);\r",
													"    pm.expect(jsonData.EntityDescription.Text).length.greaterThan(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Contact Social Media Links Test\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.BusinessCards[0].FacebookLink).length.greaterThan(0);\r",
													"    pm.expect(jsonData.BusinessCards[0].LinkedInLink).length.greaterThan(0);\r",
													"    pm.expect(jsonData.BusinessCards[0].TwitterLink).length.greaterThan(0);\r",
													"    pm.expect(jsonData.BusinessCards[0].SkypeLink).length.greaterThan(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "940c009c-88fb-4113-8fed-40be4639645c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations/{{public.api.organization_permakey}}?$expand=BusinessCards\n",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations",
												"{{public.api.organization_permakey}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "BusinessCards\n"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get by PermaKey with Expand Contacts",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70420c20-f6dc-4ad1-b819-39372cf1f7f9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Assert correct organization is returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.OrganizationKey).to.be.eql(pm.environment.get(\"public.api.organization_permakey\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "83c500be-a2a8-43f1-aa40-e7c48449d220",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations/{{public.api.organization_permakey}}?$expand=Contacts",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations",
												"{{public.api.organization_permakey}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Contacts"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "e3d225e7-c238-4c4c-940c-ec7a0afb4318"
						},
						{
							"name": "Get by UserDefinedIdentifier",
							"item": [
								{
									"name": "Get by User Defined Identifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4c5aa0c-e18f-48fd-a274-d6160538ab60",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Business are not loaded without expand\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.BusinessCards).to.eql(undefined);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9cbdcaf3-b733-4788-ab9d-ac26a372acec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/Organizations/KarbonService.GetOrganizationByUserDefinedIdentifier(UserDefinedIdentifier='{{public.api.test_organization_userdefinedidentifier}}')"
									},
									"response": []
								},
								{
									"name": "Get by User Defined Identifier with Expand",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0222e44a-b96d-4bce-bb20-6c5c2a4f44b6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Business are loaded with expand\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.BusinessCards).to.not.eql(undefined);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "055267f5-fb15-49dd-9cfa-ddf1aa89dde1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations/KarbonService.GetOrganizationByUserDefinedIdentifier(UserDefinedIdentifier='{{public.api.test_organization_userdefinedidentifier}}')?$expand=BusinessCards",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations",
												"KarbonService.GetOrganizationByUserDefinedIdentifier(UserDefinedIdentifier='{{public.api.test_organization_userdefinedidentifier}}')"
											],
											"query": [
												{
													"key": "$expand",
													"value": "BusinessCards"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "fe14baa7-448a-4a41-8fc9-76cc5ad9e714"
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search Organizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03260ab7-b10b-4e46-a4c3-b82e9efbceab",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "81e89edf-ec04-4b8b-a7c7-d8cd55edcc33",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/Organizations"
									},
									"response": [
										{
											"id": "e05db5fa-3863-4c9b-8406-0293c2c30b91",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search Organizations with Parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "755a6457-3769-4d6c-91e8-9fb0a8339130",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.gte(0);\r",
													"    pm.expect(jsonData.value.length).to.gte(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "84686c36-e367-463e-ad6a-1a5e7c884336",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations?$filter=FullName eq 'Full Name Test'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations"
											],
											"query": [
												{
													"key": "$filter",
													"value": "FullName eq 'Full Name Test'"
												}
											]
										}
									},
									"response": [
										{
											"id": "de827fc1-a9a4-4887-8968-f8abda62e744",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search Organizations orderby FullName",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40992e2a-4882-478e-8823-019a53a4b7e1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.gte(1);\r",
													"    pm.expect(jsonData.value.length).to.eq(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fa1d0254-182c-4c15-87f3-ccf814a767b4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations?$top=5&$orderby=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations"
											],
											"query": [
												{
													"key": "$top",
													"value": "5"
												},
												{
													"key": "$orderby",
													"value": "FullName"
												}
											]
										}
									},
									"response": [
										{
											"id": "67d0033d-bced-4616-ab16-2ba75328eeca",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search Organizations orderby LastModifiedDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed8fb21e-2d5f-4867-8f1f-806f03e9a608",
												"exec": [
													"/*pm.test(\"#7779 Ordering Contacts and Organizations by LastModifiedDateTime is broken\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});*/\r",
													"\r",
													"// pm.test(\"Check items were found\", function () {\r",
													"//     var jsonData = pm.response.json();\r",
													"//     pm.expect(jsonData[\"@odata.count\"]).to.gte(1);\r",
													"//     pm.expect(jsonData.value.length).to.eq(5);\r",
													"// });\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work templates were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f3596a8e-7872-4a29-beaa-e97f80f56b9b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations?$top=5&$orderby=LastModifiedDateTime",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations"
											],
											"query": [
												{
													"key": "$top",
													"value": "5"
												},
												{
													"key": "$orderby",
													"value": "LastModifiedDateTime"
												}
											]
										}
									},
									"response": [
										{
											"id": "db60c783-5929-4f02-b39b-0c777d73c9b9",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains Select not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "505c3e77-4e81-4d41-89a4-bc8b855ba5b7"
											}
										}
									],
									"id": "cedc290b-30db-4c9c-ac76-bdf40d20d3ff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations?$select=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations"
											],
											"query": [
												{
													"key": "$select",
													"value": "FullName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with startswith odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains startswith not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Function 'startswith' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "f8b358b7-edaf-4371-8e20-5b2201738101"
											}
										}
									],
									"id": "7e54c545-b6ba-4004-89a6-3c3f4a929991",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations?$filter=startswith(FullName, 'test')",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations"
											],
											"query": [
												{
													"key": "$filter",
													"value": "startswith(FullName, 'test')"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with day operator odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains day function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Function 'day' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "424333ac-448c-4e5d-a4b4-d884a9a573a6"
											}
										}
									],
									"id": "4a1185c1-4ee5-4dae-a372-83e931869232",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations?$filter=day(LastModifiedDateTime) eq 8",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations"
											],
											"query": [
												{
													"key": "$filter",
													"value": "day(LastModifiedDateTime) eq 8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with logical operator odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains not equal not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Logical operator 'NotEqual' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "2ea90424-c04e-4bd1-a07c-8f79d35730e3"
											}
										}
									],
									"id": "929448ef-3e2e-4773-ac6f-8a288d7a31b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Organizations?$filter=FullName ne 'test'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Organizations"
											],
											"query": [
												{
													"key": "$filter",
													"value": "FullName ne 'test'"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "e313f6d9-823f-4f51-96f4-bb06fcd7d558"
						},
						{
							"name": "Update (Put)",
							"item": [
								{
									"name": "#4350 Update Organization with CRM Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a094c8b7-e57a-4850-85a8-82b00fe16ffd",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.organization_uniqueidentifier\", generatedUUID);\r",
													"console.log(generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3fefea4a-dec5-4851-a2ff-970032b50292",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "90281b26-7695-4efd-ad6e-0a6631a8b281",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FullName\": \"Full Name Test update\",\r\n    \"RestrictionLevel\": \"Public\",\r\n    \"ContactType\": \"Prospect\",\r\n    \"UserDefinedIdentifier\": \"{{public.api.organization_permakey}}\",\r\n    \"EntityDescription\": {\r\n        \"Text\": \"test description update\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Organizations/{{public.api.organization_permakey}}"
									},
									"response": []
								}
							],
							"id": "7e8a427c-83f8-4084-bee1-1d18fa92e917"
						},
						{
							"name": "Update (Patch)",
							"item": [
								{
									"name": "Partial Update Organization  - Unsupported property",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d929d963-6925-482a-aef9-6e9fe9f8316e",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.organization_uniqueidentifier\", generatedUUID);\r",
													"console.log(generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6c14febc-7da2-4479-8b9e-1b8fe26ac107",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Patch has not been applied and error message is correct\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid property to update. Only FullName can be patched.\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "db5f4a09-5d41-4bba-9741-2362772248b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Prefer",
												"value": "return=representation",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"UserDefinedIdentifier\": \"Whatever\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Organizations/{{public.api.organization_permakey}}"
									},
									"response": []
								},
								{
									"name": "Partial Update Organization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4345faa4-39ca-46e9-bcd0-2b26cc04be86",
												"exec": [
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4(); \r",
													"pm.environment.set(\"public.api.organization_uniqueidentifier\", generatedUUID);\r",
													"console.log(generatedUUID);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ebb4c896-ea10-4a3d-9562-81dff4bd0786",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Patch has been applied\", function () {\r",
													"    pm.expect(pm.response.json().FullName).to.eq(\"Partial Updated Organisation Name\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fa6788b0-cf5d-40bb-a1e3-da360ebad44a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Prefer",
												"value": "return=representation",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"FullName\": \"Partial Updated Organisation Name\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/Organizations/{{public.api.organization_permakey}}"
									},
									"response": []
								}
							],
							"id": "6a7cc275-dd44-4649-9fba-a59f6e06647a"
						}
					],
					"id": "273d5dea-5f0d-49e2-bc6d-f4361ec83ac1"
				},
				{
					"name": "Status",
					"item": [
						{
							"name": "Ping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"pong\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "efc182a1-432e-4078-9b8b-65c752a2cfa2"
									}
								}
							],
							"id": "9ea7a662-a227-42af-973a-e694be75c234",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{public.api.v3baseurl}}/api/ping"
							},
							"response": []
						},
						{
							"name": "Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"MachineName\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "cea47651-f78b-4e9c-a14b-76a49c2b74fd"
									}
								}
							],
							"id": "1b590996-33f2-4028-9fe1-2b515372eae2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{public.api.v3baseurl}}/api/apistatus"
							},
							"response": []
						}
					],
					"id": "2c27a047-d936-4773-aa85-73da8be5da30"
				},
				{
					"name": "Timesheets",
					"item": [
						{
							"name": "Get by PermaKey",
							"item": [
								{
									"name": "Search with datefunction odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains select function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "e442c8e8-3a54-44f5-b4f2-13afc24aad15"
											}
										}
									],
									"id": "fe2243a7-379e-4245-8a5f-260fe7ee5ace",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets?$select=FullName",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets"
											],
											"query": [
												{
													"key": "$select",
													"value": "FullName"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "c456d8f4-32f9-4be8-bdb6-929d914f65e7"
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Get All Timesheet Entries",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f74af2b0-3fcf-44ce-82b4-a44a4af48cc3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body contains more than 1 timesheet \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.gte(1)\r",
													"    pm.expect(jsonData.value.length).to.gte(1);    \r",
													"    pm.environment.set(\"public.api.Timesheet_Key\", jsonData.value[0].TimesheetKey);\r",
													"});\r",
													"\r",
													"pm.test(\"Set WorkItemKey environment variable\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    hasWorkItemKey = function(timesheet) {\r",
													"        return timesheet.WorkItemKeys.length>0;\r",
													"    }\r",
													"    const result = jsonData.value.find(hasWorkItemKey);\r",
													"    pm.environment.set(\"public.api.Timesheet_WorkItemKey\", result.WorkItemKeys[0]);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cab868bb-f28b-4e39-b841-7a0d770e0e31",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets"
											],
											"query": [
												{
													"key": "$expand",
													"value": "TimeEntries",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search By Timesheet Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b605f269-0f4a-48a9-8338-df521aa77f49",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches Timesheet\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.TimesheetKey).to.eql(pm.environment.get(\"public.api.Timesheet_Key\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "445e4e36-1ba6-40db-af52-424f7a8fba00",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/Timesheets/{{public.api.Timesheet_Key}}"
									},
									"response": []
								},
								{
									"name": "Search orderby StartDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96ed9174-2d8d-4570-96e1-ce1e0ff214d7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Check items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.gte(5);\r",
													"    pm.expect(jsonData.value.length).to.eq(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "de2c9788-e0b1-4867-b624-542c79995bea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets/?$top=5&$orderby=StartDate",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets",
												""
											],
											"query": [
												{
													"key": "$top",
													"value": "5",
													"type": "text"
												},
												{
													"key": "$orderby",
													"value": "StartDate",
													"type": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search orderby EndDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8078c2ec-18a8-4a60-80cb-3eadecf19caa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Check items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[\"@odata.count\"]).to.gte(5);\r",
													"    pm.expect(jsonData.value.length).to.eq(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e879e6af-17e6-40e3-981c-18bb818f4571",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets/?$top=5&$orderby=EndDate",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets",
												""
											],
											"query": [
												{
													"key": "$top",
													"value": "5"
												},
												{
													"key": "$orderby",
													"value": "EndDate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search expand by TimeEntries",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c588e2b-9113-4c2f-8059-65d1412c9955",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work templates were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c620f73a-705a-4436-bdcc-d0a3491a7200",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets?$expand=TimeEntries",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets"
											],
											"query": [
												{
													"key": "$expand",
													"value": "TimeEntries"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search filter by UserKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86ed9503-59f5-486a-9b50-0092c5169669",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body contains more than 1 timesheet \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.lte(101);    \r",
													"    //pm.environment.set(\"public.api.Timesheet_Key\", jsonData.value[0].TimesheetKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c7cadc83-a719-48a8-86fd-3b047abd590a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets?$filter=UserKey eq '{{public.api.user_permakey}}'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets"
											],
											"query": [
												{
													"key": "$filter",
													"value": "UserKey eq '{{public.api.user_permakey}}'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search filter by WorkItemKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85097d52-a6ab-468b-bb4d-dfd2bf315958",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body contains more than 1 timesheet \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(1);\r",
													"    pm.expect(jsonData.value.length).to.lte(101);\r",
													"});\r",
													"pm.test(\"Results have correct work item key\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    for(const timesheet of jsonData.value) {\r",
													"        pm.expect(timesheet.WorkItemKeys).to.include(pm.environment.get('public.api.Timesheet_WorkItemKey'));\r",
													"    }        \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f869aaba-fc41-4c0e-958c-f19cb6eb83c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets?$filter=WorkItemKeys/any(s:s eq '{{public.api.Timesheet_WorkItemKey}}')",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets"
											],
											"query": [
												{
													"key": "$filter",
													"value": "WorkItemKeys/any(s:s eq '{{public.api.Timesheet_WorkItemKey}}')"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search filter by Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccc202a2-da57-459b-bffc-7dc4f25485ff",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body contains more than 1 timesheet \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.lte(101);    \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "71f633ae-335a-4cb9-be67-2ac6975fea0b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets?$filter=Status eq 'Draft'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets"
											],
											"query": [
												{
													"key": "$filter",
													"value": "Status eq 'Draft'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains Select not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "11a514df-c1ed-4b54-96d5-bfd884149383"
											}
										}
									],
									"id": "f077c175-697f-43df-8038-b6b5764e82cc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets?$select=Status",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets"
											],
											"query": [
												{
													"key": "$select",
													"value": "Status"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with day operator odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0803ae65-1ac2-4bab-ab8a-06cb1f72bab7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body contains more than 1 timesheet \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a768a060-5d34-41ce-8699-0f63f740c0b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets?$filter=day(StartDate) eq 8",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets"
											],
											"query": [
												{
													"key": "$filter",
													"value": "day(StartDate) eq 8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with StartDate greater than",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "526d4820-010b-41de-8416-8f18e073996f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body contains at least 1 timesheet \", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b1b9821c-a84a-4964-b921-24891986476d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/Timesheets?$filter=StartDate gt 2021-04-27T00:00:00Z",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"Timesheets"
											],
											"query": [
												{
													"key": "$filter",
													"value": "StartDate gt 2021-04-27T00:00:00Z"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "291d2166-d9c4-47b2-ba69-5c361edea92d"
						}
					],
					"id": "ebcbd483-451f-4b3b-86bc-757f60fa244d"
				},
				{
					"name": "SocketManager",
					"item": [
						{
							"name": "Get",
							"item": [
								{
									"name": "Get Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7492c0b-7ac7-4185-ab56-3bca5ef1604d",
												"exec": [
													"//only turned on in stage for ClientPortalV2 application\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check token was found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.hasOwnProperty(\"UserToken\")).to.true;\r",
													"    pm.expect(jsonData.hasOwnProperty(\"SocketManagerUri\")).to.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e58d6d8f-dc08-4cff-906c-b08b652b6977",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/SocketManager?linkId={{public.api.magiclink_linkid}}",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"SocketManager"
											],
											"query": [
												{
													"key": "linkId",
													"value": "{{public.api.magiclink_linkid}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "c200ce8f-ea95-41ee-9ee9-06311a64414a"
						}
					],
					"id": "6096bdc1-8629-456c-a290-68945f5f459c"
				},
				{
					"name": "WorkItems",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "#5170 Create WorkItem with Basic work fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfaca174-da31-4366-8eac-f73503ab0630",
												"exec": [
													"console.log(\"Logging request body\");\r",
													"console.log(pm.request.body);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Set workitem PermaKey\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set(\"public.api.workitem_permakey\", jsonData.WorkItemKey);\r",
													"    pm.environment.set(\"public.api.workitem_title\", jsonData.Title);\r",
													"    pm.environment.set(\"public.api.workitem_title_part\", jsonData.Title.substr(0, 4));\r",
													"    pm.environment.set(\"public.api.user_email_part\", jsonData.AssigneeEmailAddress.substr(0, 6));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fdfc4d03-bcfc-4d27-b736-dccb44765295",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "851ac187-56a4-4f98-be60-59067c31fb7f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssigneeEmailAddress\": \"{{public.api.workitem_useremail}}\",\r\n    \"Title\": \"Test Template Work Item\",\r\n    \"ClientKey\": \"{{public.api.workitem_clientkey}}\",\r\n    \"ClientType\": \"Contact\",\r\n    \"RelatedClientGroupKey\": \"{{public.api.workitem_relatedclientgroupkey}}\",\r\n    \"StartDate\": \"2021-07-11\",\r\n    \"DueDate\": \"2021-07-18\",\r\n    \"WorkType\": \"Payroll\",\r\n    \"Description\": \"Test description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkItems"
									},
									"response": []
								},
								{
									"name": "Create WorkItem from Template",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "019ec674-63e1-49f4-871b-78a7497ab461",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"WorkType should not be inherited from Template if provided in request\", function() {\r",
													"    pm.expect(pm.response.json().WorkType).to.eq(\"Payroll\");\r",
													"})\r",
													"\r",
													"pm.test(\"Set workitem PermaKey\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.environment.set(\"public.api.workitem_permakey\", jsonData.WorkItemKey);\r",
													"    pm.environment.set(\"public.api.workitem_primarystatus\", jsonData.PrimaryStatus);\r",
													"    pm.environment.set(\"public.api.workitem_client_user_defined_identifier\", jsonData.ClientUserDefinedIdentifier);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a14e9e7c-bc73-4534-9672-1a4a25346e7f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f56b7778-994f-4fe9-8941-3e3798a29061",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssigneeEmailAddress\": \"{{public.api.workitem_useremail}}\",\r\n    \"Title\": \"Template full test\",\r\n    \"ClientKey\": \"{{public.api.workitem_clientkey}}\",\r\n    \"ClientType\": \"Contact\",\r\n    \"RelatedClientGroupKey\": \"{{public.api.workitem_relatedclientgroupkey}}\",\r\n    \"StartDate\": \"2021-07-11\",\r\n    \"DueDate\": \"2021-07-19\",\r\n    \"WorkType\": \"Payroll\",\r\n    \"Description\": \"Test description\",\r\n    \"WorkTemplateKey\": \"{{public.api.worktemplatekey}}\",\r\n    \"UserRoleAssignments\": [\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor1}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user1}}\"\r\n        },\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor2}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user2}}\"\r\n        },\r\n                {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor3}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user3}}\"\r\n        },\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor4}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user4}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkItems"
									},
									"response": []
								},
								{
									"name": "Create WorkItem from Template with ClientTaskRecipients set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "544ed67f-8423-4110-a2ab-5068c6ff5936",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"WorkType should not be inherited from Template if provided in request\", function() {\r",
													"    pm.expect(pm.response.json().WorkType).to.eq(\"Payroll\");\r",
													"})\r",
													"\r",
													"pm.test(\"Set workitem PermaKey\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"public.api.workitem_permakey\", jsonData.WorkItemKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fe4a0b3b-7073-40aa-bbaf-1e82dc942aa4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssigneeEmailAddress\": \"{{public.api.workitem_useremail}}\",\r\n    \"Title\": \"Template full test\",\r\n    \"ClientKey\": \"{{public.api.workitem_clientkey}}\",\r\n    \"ClientType\": \"Contact\",\r\n    \"RelatedClientGroupKey\": \"{{public.api.workitem_relatedclientgroupkey}}\",\r\n    \"StartDate\": \"2021-07-11\",\r\n    \"DueDate\": \"2021-07-19\",\r\n    \"WorkType\": \"Payroll\",\r\n    \"Description\": \"Test description\",\r\n    \"WorkTemplateKey\": \"{{public.api.worktemplatekey}}\",\r\n    \"UserRoleAssignments\": [\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor1}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user1}}\"\r\n        },\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor2}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user2}}\"\r\n        },\r\n                {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor3}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user3}}\"\r\n        },\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor4}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user4}}\"\r\n        }\r\n    ],\r\n    \"ClientTaskRecipient\": {\r\n        \"RecipientKey\": \"{{public.api.workitem_clientkey}}\",\r\n        \"LinkType\": \"Contact\",\r\n        \"EmailAddress\": \"email@test.com\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkItems"
									},
									"response": []
								},
								{
									"name": "#9546 Create WorkItem from Template with ClientTaskRecipients no email address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "544ed67f-8423-4110-a2ab-5068c6ff5936",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"WorkType should not be inherited from Template if provided in request\", function() {\r",
													"    pm.expect(pm.response.json().WorkType).to.eq(\"Payroll\");\r",
													"})\r",
													"\r",
													"pm.test(\"Set workitem PermaKey\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"public.api.workitem_permakey\", jsonData.WorkItemKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1ecfe325-0d26-4aa0-af26-a193497661e8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssigneeEmailAddress\": \"{{public.api.workitem_useremail}}\",\r\n    \"Title\": \"Template full test\",\r\n    \"ClientKey\": \"{{public.api.workitem_clientkey}}\",\r\n    \"ClientType\": \"Contact\",\r\n    \"RelatedClientGroupKey\": \"{{public.api.workitem_relatedclientgroupkey}}\",\r\n    \"StartDate\": \"2021-07-11\",\r\n    \"DueDate\": \"2021-07-19\",\r\n    \"WorkType\": \"Payroll\",\r\n    \"Description\": \"Test description\",\r\n    \"WorkTemplateKey\": \"{{public.api.worktemplatekey}}\",\r\n    \"UserRoleAssignments\": [\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor1}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user1}}\"\r\n        },\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor2}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user2}}\"\r\n        },\r\n                {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor3}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user3}}\"\r\n        },\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor4}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user4}}\"\r\n        }\r\n    ],\r\n    \"ClientTaskRecipient\": {\r\n        \"RecipientKey\": \"{{public.api.workitem_clientkey}}\",\r\n        \"LinkType\": \"Contact\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkItems"
									},
									"response": []
								},
								{
									"name": "#9546 Create WorkItem from Template with ClientTaskRecipients no email address at all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "544ed67f-8423-4110-a2ab-5068c6ff5936",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"WorkType should not be inherited from Template if provided in request\", function() {\r",
													"    pm.expect(pm.response.json().WorkType).to.eq(\"Payroll\");\r",
													"})\r",
													"\r",
													"pm.test(\"Set workitem PermaKey\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"public.api.workitem_permakey\", jsonData.WorkItemKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "40272d18-6fb3-4595-a462-c7e39836379b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssigneeEmailAddress\": \"{{public.api.workitem_useremail}}\",\r\n    \"Title\": \"Template full test\",\r\n    \"ClientKey\": \"{{public.api.workitem_clientkey}}\",\r\n    \"ClientType\": \"Contact\",\r\n    \"RelatedClientGroupKey\": \"{{public.api.workitem_relatedclientgroupkey}}\",\r\n    \"StartDate\": \"2021-07-11\",\r\n    \"DueDate\": \"2021-07-19\",\r\n    \"WorkType\": \"Payroll\",\r\n    \"Description\": \"Test description\",\r\n    \"WorkTemplateKey\": \"{{public.api.worktemplatekey}}\",\r\n    \"UserRoleAssignments\": [\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor1}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user1}}\"\r\n        },\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor2}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user2}}\"\r\n        },\r\n                {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor3}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user3}}\"\r\n        },\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor4}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user4}}\"\r\n        }\r\n    ],\r\n    \"ClientTaskRecipient\": {\r\n        \"RecipientKey\": \"{{public.api.workitem_clientkey}}\",\r\n        \"LinkType\": \"Contact\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkItems"
									},
									"response": []
								},
								{
									"name": "#8165 Inherit Work Type from Template",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f669b2b2-1750-4800-b7a0-2bf99f24b1b6",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"WorkType should be inherited from Template if not provided in request (#8165)\", function() {\r",
													"    pm.expect(pm.response.json().WorkType).to.eq(\"Bookkeeping\");    \r",
													"})\r",
													"\r",
													"pm.test(\"Set workitem PermaKey\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"public.api.workitem_permakey\", jsonData.WorkItemKey);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c80cec12-9a0d-4531-8cca-57c399bd4fbd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"AssigneeEmailAddress\": \"{{public.api.workitem_useremail}}\",\r\n    \"Title\": \"Template full test\",\r\n    \"ClientKey\": \"{{public.api.workitem_clientkey}}\",\r\n    \"ClientType\": \"Contact\",\r\n    \"RelatedClientGroupKey\": \"{{public.api.workitem_relatedclientgroupkey}}\",\r\n    \"StartDate\": \"2021-07-11\",\r\n    \"DueDate\": \"2021-07-19\",\r\n    \"Description\": \"Test description\",\r\n    \"WorkTemplateKey\": \"{{public.api.worktemplatekey}}\",\r\n    \"UserRoleAssignments\": [\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor1}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user1}}\"\r\n        },\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor2}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user2}}\"\r\n        },\r\n                {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor3}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user3}}\"\r\n        },\r\n        {\r\n            \"RoleKey\": \"{{public.api.worktemplate_actor4}}\",\r\n            \"UserProfileKey\": \"{{public.api.worktemplate_user4}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkItems"
									},
									"response": []
								}
							],
							"id": "5694298d-0d43-44b8-ae29-ad4b13a47fa4"
						},
						{
							"name": "Get by PermaKey",
							"item": [
								{
									"name": "Get Estimates by WorkItemKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79eda62c-9da2-42f2-88ab-2d4b9bccf167",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"#9117 User Definied Client Identifier should be returned\", function() {\r",
													"    pm.expect(pm.response.json().ClientUserDefinedIdentifier).to.eq(pm.environment.get(\"public.api.workitem_client_user_defined_identifier\"));\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cfdee4fa-5f07-4148-b03e-ee27cb7fb0c2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WorkItems/{{public.api.workitem_permakey}}"
									},
									"response": []
								},
								{
									"name": "Get by PermaKey with select odata attribute should fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains select function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "c10e1359-d4d0-4757-a0b9-df12791feddb"
											}
										}
									],
									"id": "524b31d3-5f2d-494a-b55b-994409b05319",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$select=AssigneeEmailAddress",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$select",
													"value": "AssigneeEmailAddress"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get WorkItem by wrong PermaKey Should 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fd9b4fa-78fe-4b75-96ec-8823dfa0fa95",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2e59d031-92c2-477c-97e1-4852b4d8a032",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{publicapi.authorization}}"
											},
											{
												"key": "AccessKey",
												"type": "text",
												"value": "{{publicapi.accesskey}}"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WorkItems/2LYmL87JdSVV"
									},
									"response": [
										{
											"id": "de0de68f-9ee1-43fb-a88d-6a3a5e23bab5",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								}
							],
							"id": "6fa79f32-8a93-4d4e-95f3-fcca62ea1035"
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search WorkItems",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157c6232-7220-45b6-b6af-98a45dbf01ac",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(0);    \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9749fa45-70db-4dcb-9591-dc7bd88f67c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=AssigneeEmailAddress eq '{{public.api.workitem_useremail}}' and ClientKey eq '{{public.api.workitem_clientkey}}'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "AssigneeEmailAddress eq '{{public.api.workitem_useremail}}' and ClientKey eq '{{public.api.workitem_clientkey}}'"
												}
											]
										}
									},
									"response": [
										{
											"id": "d3f253aa-0d7b-4e6b-90df-7cc5ebbfa529",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search by ClientKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157c6232-7220-45b6-b6af-98a45dbf01ac",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedClientKey = pm.variables.get(\"public.api.workitem_clientkey\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const workItems = jsonData.value;\r",
													"    \r",
													"    pm.expect(workItems.length).to.be.greaterThan(0);\r",
													"\r",
													"    workItems.forEach(c => {\r",
													"        pm.expect(c.ClientKey).to.equal(expectedClientKey);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "512cc60a-1751-4113-b3f3-751d45fa7184",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=ClientKey eq '{{public.api.workitem_clientkey}}'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "ClientKey eq '{{public.api.workitem_clientkey}}'"
												}
											]
										}
									},
									"response": [
										{
											"id": "2a27ec6f-e944-4f97-a68b-01f1a1bd8ce5",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search by PrimaryStatus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157c6232-7220-45b6-b6af-98a45dbf01ac",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedPrimaryStatus = pm.variables.get(\"public.api.workitem_primarystatus\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const workItems = jsonData.value;\r",
													"    \r",
													"    pm.expect(workItems.length).to.be.greaterThan(0);\r",
													"\r",
													"    workItems.forEach(c => {\r",
													"        pm.expect(c.PrimaryStatus).to.equal(expectedPrimaryStatus);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "27d5d750-d4f1-4577-b130-d98cf96ae029",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=PrimaryStatus eq '{{public.api.workitem_primarystatus}}'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "PrimaryStatus eq '{{public.api.workitem_primarystatus}}'"
												}
											]
										}
									},
									"response": [
										{
											"id": "70f38676-568b-4851-8756-5a5e40244799",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search by WorkStatus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157c6232-7220-45b6-b6af-98a45dbf01ac",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedWorkStatus = pm.variables.get(\"public.api.workitem_primarystatus\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const workItems = jsonData.value;\r",
													"    \r",
													"    pm.expect(workItems.length).to.be.greaterThan(0);\r",
													"\r",
													"    workItems.forEach(c => {\r",
													"        // validating PrimaryStatus as it is replacement for WorkStatus\r",
													"        pm.expect(c.PrimaryStatus).to.equal(expectedWorkStatus);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2dd7941c-7a91-4308-b644-896a89e2a73c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=WorkStatus eq '{{public.api.workitem_primarystatus}}'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "WorkStatus eq '{{public.api.workitem_primarystatus}}'"
												}
											]
										}
									},
									"response": [
										{
											"id": "dab45a49-4033-42c2-9992-0539eaa73ad7",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Partial search by AssigneeEmailAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157c6232-7220-45b6-b6af-98a45dbf01ac",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedAssigneeEmail = pm.variables.get(\"public.api.user_email_part\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const workItems = jsonData.value;\r",
													"    \r",
													"    pm.expect(workItems.length).to.be.greaterThan(0);\r",
													"\r",
													"    workItems.forEach(c => {\r",
													"        pm.expect(c.AssigneeEmailAddress.includes(expectedAssigneeEmail)).to.be.true;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cb1edf29-b862-4af5-8448-f0b795eb691b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=(contains(AssigneeEmailAddress , '{{public.api.user_email_part}}'))",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "(contains(AssigneeEmailAddress , '{{public.api.user_email_part}}'))"
												}
											]
										}
									},
									"response": [
										{
											"id": "1df1d2b3-045c-40b3-864c-7fe15f0583e6",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search by Title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157c6232-7220-45b6-b6af-98a45dbf01ac",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedTitle = pm.variables.get(\"public.api.workitem_title\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const workItems = jsonData.value;\r",
													"    \r",
													"    pm.expect(workItems.length).to.be.greaterThan(0);\r",
													"\r",
													"    workItems.forEach(c => {\r",
													"        pm.expect(c.Title.toUpperCase()).to.equal(expectedTitle.toUpperCase());\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9789f686-beca-4c2d-8f73-cd4896134108",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=Title eq '{{public.api.workitem_title}}'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "Title eq '{{public.api.workitem_title}}'"
												}
											]
										}
									},
									"response": [
										{
											"id": "9f3cac68-c8a6-4730-8f35-8453a317f7c0",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Partial search by Title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157c6232-7220-45b6-b6af-98a45dbf01ac",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedTitle = pm.variables.get(\"public.api.workitem_title_part\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const workItems = jsonData.value;\r",
													"    \r",
													"    pm.expect(workItems.length).to.be.greaterThan(0);\r",
													"\r",
													"    workItems.forEach(c => {\r",
													"        pm.expect(c.Title.toUpperCase().includes(expectedTitle.toUpperCase())).to.be.true;\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ce02bd8d-d758-4091-bc4d-a6dcaa68b06c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=(contains(Title, '{{public.api.workitem_title_part}}'))",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "(contains(Title, '{{public.api.workitem_title_part}}'))"
												}
											]
										}
									},
									"response": [
										{
											"id": "48cfa16d-43bb-4e9a-8fc0-1025cae351cb",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search WorkItems without filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c11d3072-be73-4168-a239-0fe0597f7c50",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(0);    \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "34be2486-cf88-45d0-9e46-3132fdfe2abe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WorkItems"
									},
									"response": [
										{
											"id": "23a00e9f-2cd0-4684-8622-7c5f36f47e8c",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search orderby StartDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2519782-0959-4333-a97d-4164fa1de6c4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(0);    \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6f25de96-f27d-4ce7-bd41-f274ba1f7315",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$top=5&$orderby=StartDate",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$top",
													"value": "5"
												},
												{
													"key": "$orderby",
													"value": "StartDate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains Select not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "b3f59dbd-bf52-4194-8142-7f0c25ab53eb"
											}
										}
									],
									"id": "321b1863-b22d-417f-9f88-45d28e300952",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$select=AssigneeEmailAddress",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$select",
													"value": "AssigneeEmailAddress"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with day function odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains day function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Function 'day' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "8fa90a03-3b0c-4da0-9c8b-acf706a36666"
											}
										}
									],
									"id": "3938c0d3-ddff-4075-a8de-c896eed5a647",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=day(StartDate) eq 8",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "day(StartDate) eq 8"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with startswith odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains startswith not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Function 'startswith' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "b33f286d-534c-4db9-ad24-073ee446c8a3"
											}
										}
									],
									"id": "a8227681-50fb-4c38-9eeb-ac5c9a8e36f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=startswith(AssigneeEmailAddress,'test')",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "startswith(AssigneeEmailAddress,'test')"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "#5170 Search for WorkItems with Basic Work Item fields Start Date filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ea116ff-3349-499f-805c-a17494572391",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9b92b4d1-d084-4b73-bb2f-86707400edf4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=ClientKey eq '{{public.api.workitem_clientkey}}' and StartDate ge 2020-06-30 and StartDate le 2050-06-30",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "ClientKey eq '{{public.api.workitem_clientkey}}' and StartDate ge 2020-06-30 and StartDate le 2050-06-30"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search for WorkItems with Basic Work Item fields WorkStatus",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02ddb095-25a1-4495-8ff8-37ad74bbc799",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(0);   \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c42f3cb4-395a-448e-be29-6fe3c09a500c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=WorkStatus eq 'Completed'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "WorkStatus eq 'Completed'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search by WorkType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157c6232-7220-45b6-b6af-98a45dbf01ac",
												"exec": [
													"/*pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedAssigneeEmail = pm.variables.get(\"public.api.workitem_useremail\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const workItems = jsonData.value;\r",
													"    \r",
													"    pm.expect(workItems.length).to.be.greaterThan(0);\r",
													"\r",
													"    workItems.forEach(c => {\r",
													"        pm.expect(c.AssigneeEmailAddress).to.equal(expectedAssigneeEmail);\r",
													"    });\r",
													"});*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f940b2f3-3f39-4c73-aec1-cba90ea30b23",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=WorkType eq 'Payroll'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "WorkType eq 'Payroll'"
												}
											]
										}
									},
									"response": [
										{
											"id": "07de4726-4ec6-4eb1-8ace-035f5901b591",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search by AssigneeEmailAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157c6232-7220-45b6-b6af-98a45dbf01ac",
												"exec": [
													"pm.test(\"Status code is OK (200)\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Test matching items were found\", function () {\r",
													"    const expectedAssigneeEmail = pm.variables.get(\"public.api.workitem_useremail\");\r",
													"    const jsonData = pm.response.json();\r",
													"    const workItems = jsonData.value;\r",
													"    \r",
													"    pm.expect(workItems.length).to.be.greaterThan(0);\r",
													"\r",
													"    workItems.forEach(c => {\r",
													"        pm.expect(c.AssigneeEmailAddress).to.equal(expectedAssigneeEmail);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d050377e-09da-4a51-a5d2-ab49d94ead5e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=AssigneeEmailAddress eq '{{public.api.workitem_useremail}}'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "AssigneeEmailAddress eq '{{public.api.workitem_useremail}}'"
												}
											]
										}
									},
									"response": [
										{
											"id": "ab75fc38-0b71-4f77-a9ac-7a5e81ddc486",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Partial Search by WorkType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157c6232-7220-45b6-b6af-98a45dbf01ac",
												"exec": [
													"// pm.test(\"Status code is OK (200)\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"// pm.test(\"Test matching items were found\", function () {\r",
													"//     const expectedWorkType = pm.variables.get(\"public.api.WorkItem_WorkType_Search\");\r",
													"//     const jsonData = pm.response.json();\r",
													"//     const workItems = jsonData.value;\r",
													"    \r",
													"//     pm.expect(workItems.length).to.be.greaterThan(0);\r",
													"\r",
													"//     workItems.forEach(c => {\r",
													"//         pm.expect(c.expectedWorkType).to.equal(expectedWorkType);\r",
													"//     });\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "707ca3d1-989f-4af3-8d2a-1b442e689285",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkItems?$filter=(contains(WorkType , '{{public.api.WorkItem_WorkType_PartialSearch}}'))",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkItems"
											],
											"query": [
												{
													"key": "$filter",
													"value": "(contains(WorkType , '{{public.api.WorkItem_WorkType_PartialSearch}}'))"
												}
											]
										}
									},
									"response": [
										{
											"id": "6e0429f7-2b5d-4cb9-926c-c0573066ad90",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								}
							],
							"id": "1e9dbab5-5ef9-475a-9368-b31dd69acc3c"
						},
						{
							"name": "Update (Put)",
							"item": [
								{
									"name": "#5170 Update WorkItem",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dac313c5-8c50-4fb7-ac4f-05a807edffe7",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "16514fb7-d5bb-45f3-b149-12c9860bb663",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{publicapi.authorization}}"
											},
											{
												"key": "AccessKey",
												"type": "text",
												"value": "{{publicapi.accesskey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"WorkItemKey\": \"{{public.api.workitem_permakey}}\",\r\n    \"Title\": \"Test update work item\",\r\n    \"Description\": \"test Update Description\",\r\n    \"ClientKey\": \"{{public.api.workitem_clientkey}}\",\r\n    \"ClientType\": \"Contact\",\r\n    \"RelatedClientGroupKey\": \"{{public.api.workitem_relatedclientgroupkey}}\",\r\n    \"AssigneeEmailAddress\": \"{{public.api.workitem_useremail}}\",\r\n    \"StartDate\": \"2021-05-14T00:00:00+10:00\",\r\n    \"DueDate\": \"2021-05-21T00:00:00+10:00\",\r\n    \"WorkType\": \"Payroll\",\r\n    \"ToDoPeriod\": \"2021-05-14T00:00:00+10:00\",\r\n    \"WorkTemplateKey\": null,\r\n    \"WorkTemplateTile\": null,\r\n    \"WorkScheduleKey\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkItems/{{public.api.workitem_permakey}}"
									},
									"response": [
										{
											"id": "b6c9d80d-2a76-4fbd-b7f4-c5a20aaf26a3",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								}
							],
							"id": "ac6a8f36-cb6d-4951-8f3e-5bb1dcc9186f"
						},
						{
							"name": "Update (Patch)",
							"item": [
								{
									"name": "Partial Update WorkItem",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64e7c11a-4037-4dda-89b9-0451d13f34b1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Patch has been applied\", function () {\r",
													"    pm.expect(pm.response.json().Description).to.eq(\"Test Partial Update Description\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5ad5f54f-fe1d-4dea-88a3-57fc0b557665",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{publicapi.authorization}}"
											},
											{
												"key": "AccessKey",
												"type": "text",
												"value": "{{publicapi.accesskey}}"
											},
											{
												"key": "Prefer",
												"value": "return=representation",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Description\": \"Test Partial Update Description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkItems/{{public.api.workitem_permakey}}"
									},
									"response": [
										{
											"id": "4514f495-e47f-497a-908a-2e2014ccd938",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Partial Update WorkItem - Unsupported Property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08fec39d-434b-4a43-b8a6-d81b147ddc05",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Patch has not been applied and error message is correct\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid property to update. Only Description can be patched.\");\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "69f7c7b7-7cfa-4b61-809a-ee44ada210c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{publicapi.authorization}}"
											},
											{
												"key": "AccessKey",
												"type": "text",
												"value": "{{publicapi.accesskey}}"
											},
											{
												"key": "Prefer",
												"value": "return=representation",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"WorkType\": \"Payroll\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkItems/{{public.api.workitem_permakey}}"
									},
									"response": [
										{
											"id": "5d3436c3-0ea0-47d8-a75e-c6bc66df20ca",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								}
							],
							"id": "cd547bc6-7802-4e67-9446-45aedea4f4d7"
						}
					],
					"id": "33b5840c-58b3-4686-9cb7-7bf8e6095c73"
				},
				{
					"name": "WorkSchedules",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "#5170 Create WorkSchedule from work item",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc5edfb9-602b-4fc6-9267-4fcd0bc425d1",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Set workitemschedule PermaKey\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.environment.set(\"public.api.workitemschedule_permakey\", jsonData.WorkScheduleKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "273fd4de-25de-4b36-9644-85be7d745383",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"CreatedFromWorkItemKey\": \"4Jzx5JkcQDhQ\",\r\n    \"RecurrenceFrequency\": \"Custom\",\r\n    \"CustomFrequencyUnits\": \"Weeks\",\r\n    \"CustomFrequencyMultiple\": 10,\r\n    \"ScheduleStartDate\": \"2021-07-01\",\r\n    \"ScheduleEndDate\": \"2021-09-01\",\r\n    \"ScheduleDueDateMethod\": \"DaysFromStartDate\",\r\n    \"ScheduleDueDateDays\": 7,\r\n    \"ScheduleDueDateMonthMultiple\": null,\r\n    \"PreventStartEndOnWeekend\": true,\r\n    \"InitializeBeforeStartDateUnits\": \"Days\",\r\n    \"InitializeBeforeStartDateMultiple\": 3,\r\n    \"InitializeTasksBeforeStartDateUnits\": \"Days\",\r\n    \"InitializeTasksBeforeStartDateMultiple\": 2,\r\n    \"WorkItemTitleDefinition\": \"[{\\\"Text\\\":\\\"Test for Public API\\\",\\\"Variable\\\":null,\\\"Format\\\":null,\\\"Offset\\\":0}]\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkSchedules"
									},
									"response": []
								}
							],
							"id": "2ba3561b-3404-42d5-a162-1f66ce26d163"
						},
						{
							"name": "Get by PermaKey",
							"item": [
								{
									"name": "Search with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains select function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "f94831e2-e066-4f06-9214-df7f5f7b00ff"
											}
										}
									],
									"id": "d0086659-64c6-487e-9ae0-bf18c66f0b28",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkSchedules/2Tlgtl5sjmNL?$select=FrequencyDescription",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkSchedules",
												"2Tlgtl5sjmNL"
											],
											"query": [
												{
													"key": "$select",
													"value": "FrequencyDescription"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with expand odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains expand function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Expand' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "6e8db77b-6367-4334-90b4-93166bbe4021"
											}
										}
									],
									"id": "456384f5-7406-4da8-bab1-4bfb85dd65a6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkSchedules/2Tlgtl5sjmNL?$expand=ClientType",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkSchedules",
												"2Tlgtl5sjmNL"
											],
											"query": [
												{
													"key": "$expand",
													"value": "ClientType"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "#5170 Get WorkSchedule by Permakey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65feb1e4-5d04-4498-8efd-800c1e6067b3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2b2d4564-822f-4c98-8476-8f03d29eea16",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WorkSchedules/{{public.api.workitemschedule_permakey}}"
									},
									"response": []
								},
								{
									"name": "Get WorkSchedule by Wrong Permakey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a3b4d7f-42d2-41cc-9a33-8e9498afdba3",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c16af655-b371-4004-90fd-9496bad0854a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WorkSchedules/WRONGID"
									},
									"response": []
								}
							],
							"id": "08583412-188e-4ada-a41e-65d86c4e7770"
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "#5170 Update Work Schedule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e58b8099-d882-4d58-8bf7-506bad3329f4",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "804b8635-8de0-488c-a8d3-33a3006e9847",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"WorkScheduleKey\": \"3PDJ2d1pqnHN\",\r\n    \"CreatedFromWorkItemKey\": \"3pXgrxZ438ZL\",\r\n    \"RecurrenceFrequency\": \"Day\",\r\n    \"CustomFrequencyUnits\": \"Years\",\r\n    \"CustomFrequencyMultiple\": 1,\r\n    \"ScheduleStartDate\": \"2021-07-01\",\r\n    \"ScheduleEndDate\": \"Forever\",\r\n    \"ScheduleDueDateMethod\": \"DaysFromStartDate\",\r\n    \"ScheduleDueDateDays\": 7,\r\n    \"ScheduleDueDateMonthMultiple\": null,\r\n    \"PreventStartEndOnWeekend\": true,\r\n    \"InitializeBeforeStartDateUnits\": \"Days\",\r\n    \"InitializeBeforeStartDateMultiple\": 3,\r\n    \"InitializeTasksBeforeStartDateUnits\": \"Days\",\r\n    \"InitializeTasksBeforeStartDateMultiple\": 2,\r\n    \"WorkItemTitleDefinition\": \"[{\\\"Text\\\":\\\"Test for Public API\\\",\\\"Variable\\\":null,\\\"Format\\\":null,\\\"Offset\\\":0}]\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WorkSchedules/{{public.api.workitemschedule_permakey}}"
									},
									"response": []
								}
							],
							"id": "107ec326-9d2c-4c18-9a6c-8dabe403be41"
						}
					],
					"id": "9a47ffbf-67d2-45ba-9b57-d13e6b7e1072"
				},
				{
					"name": "WorkTemplates",
					"item": [
						{
							"name": "Get by PermaKey",
							"item": [
								{
									"name": "Get By Permakey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66380a5d-83d7-4908-84c2-550813117df4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ae9ba1d6-835c-4241-a6de-cb67fb3f1325",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WorkTemplates/{{public.api.worktemplatekey}}"
									},
									"response": []
								},
								{
									"name": "Search with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains select function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "5792e2ab-381b-4dcd-90fc-43f063c9e6fd"
											}
										}
									],
									"id": "b23fd363-7837-40b7-9fc0-232f1751e369",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$select=Title",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$select",
													"value": "Title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with expand odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains expand function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Expand' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "4e2aac8c-fa58-46aa-bc9c-827c0f9b7e17"
											}
										}
									],
									"id": "b30d0843-0339-48ea-84c1-5976c3aac7dc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$expand=Title",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Title"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "cf78fd91-40b1-4193-ac78-b1a54e1a632a"
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search WorkTemplates",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69bbba1c-b97b-4362-bf03-57dcf2c727ec",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d6f2e602-1f24-4f06-b79d-1e31d097eba7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$filter=startswith(Title, 'Payroll')",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$filter",
													"value": "startswith(Title, 'Payroll')"
												}
											]
										}
									},
									"response": [
										{
											"id": "37be247f-120f-401b-b792-b248e536f4c9",
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/v3/Contacts?$select=<string>&$filter=<string>&$orderby=<string>&$top=<integer>&$skip=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v3",
														"Contacts"
													],
													"query": [
														{
															"key": "$select",
															"value": "<string>"
														},
														{
															"key": "$filter",
															"value": "<string>"
														},
														{
															"key": "$orderby",
															"value": "<string>"
														},
														{
															"key": "$top",
															"value": "<integer>"
														},
														{
															"key": "$skip",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n \"Items\": [\n  {\n   \"FullName\": \"Adams, Douglas Noel\",\n   \"PreferredName\": \"Doug\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@megadodopublications.com\",\n   \"ClientManager\": \"mymanager@megadodopublications.com\",\n   \"Address\": \"42 Galaxy Way, London\",\n   \"EmailAddress\": \"DNA@megadodopublications.net\",\n   \"PhoneNumber\": \"+61212345678\",\n   \"RoleOrTitle\": \"CEO\",\n   \"UserDefinedIdentifier\": \"42\",\n   \"LastModifiedDateTime\": \"2021-01-22T03:00:14.8634476Z\",\n   \"ContactKey\": \"2BtTSg4xM7Dt\"\n  },\n  {\n   \"FullName\": \"Asimov, Isaac\",\n   \"PreferredName\": \"Zac\",\n   \"Salutation\": \"Mr\",\n   \"ClientOwner\": \"myowner@bostonuniversity.edu\",\n   \"ClientManager\": \"mymanager@bostonuniversity.edu\",\n   \"Address\": \"1920 Foundation Boulevard, Petrovichi, Russia\",\n   \"EmailAddress\": \"asimo@bostonuniversity.edu\",\n   \"PhoneNumber\": \"069283779143\",\n   \"RoleOrTitle\": \"Writer\",\n   \"UserDefinedIdentifier\": \"5020\",\n   \"LastModifiedDateTime\": \"2021-02-03T03:00:14.8634476Z\",\n   \"ContactKey\": \"23WWskXjR4wX\"\n  }\n ],\n \"NextPageLink\": \"https://api.karbonhq.com/v3/Contacts?$skip=100\",\n \"Count\": 123\n}"
										}
									]
								},
								{
									"name": "Search Parameterless",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cbba890-37af-4f24-999e-f2e8da04dbbb",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "46a69b88-8a19-406d-a5f5-88eb2cc2ee6f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WorkTemplates"
									},
									"response": []
								},
								{
									"name": "Search orderby WorkTypeKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1c40992-1712-4fe7-9a89-55a06cff7a56",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(1);    \r",
													"    pm.expect(jsonData.value.length).to.lte(10);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "dcb87d1a-2db4-42e7-970f-df1aa9afdadb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$orderby=WorkTypeKey&$top=10",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$orderby",
													"value": "WorkTypeKey"
												},
												{
													"key": "$top",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search orderby PublishedDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bfb6f42-6a85-4a2e-9ee8-abfd6a42118b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.eq(10);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2da37321-4e5e-42d2-83eb-f0166c9510a5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$orderby=PublishedDate&$top=10",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$orderby",
													"value": "PublishedDate"
												},
												{
													"key": "$top",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search orderby NumberOfWorkItemsCreated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5dbeec0-3762-478b-99a7-d304a45d3557",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.eq(10);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "12c5e3d5-1e9e-497b-98ae-b1fdafb15cb8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$orderby=NumberOfWorkItemsCreated&$top=10",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$orderby",
													"value": "NumberOfWorkItemsCreated"
												},
												{
													"key": "$top",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search orderby DateLastWorkItemCreated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d9313ed-9ea3-44f9-aaea-f7c25fc03c59",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.eq(10);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "15f48fad-a81b-4f44-87b6-dc7451431b23",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$orderby=DateLastWorkItemCreated&$top=10",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$orderby",
													"value": "DateLastWorkItemCreated"
												},
												{
													"key": "$top",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search orderby DateModified",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11bc1b6f-54aa-48a5-9887-93ede6ae23fc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work items were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.eq(10);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f47d603c-b654-42f4-9587-5b5e31cb0a7c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$orderby=DateModified&$top=10",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$orderby",
													"value": "DateModified"
												},
												{
													"key": "$top",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search orderby EstimatedBudget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c80afb90-2a65-47f3-a1c6-ebfe375fe69b",
												"exec": [
													"pm.test(\"#7791 Timesheet filter by Status is throwing 400 response\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "99f24466-ec0c-45a7-8029-5797b227aa1c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$orderby=EstimatedBudget&$top=10",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$orderby",
													"value": "EstimatedBudget"
												},
												{
													"key": "$top",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search orderby EstimatedTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3521fa26-8c28-4076-821a-3da1e9af9159",
												"exec": [
													"pm.test(\"#7791 Timesheet filter by Status is throwing 400 response\", function () {\r",
													"    // Change this when #7791 is fixed. This test should start failing.\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c922f2a2-e99e-482b-8dd8-0d9ccf5beae3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$orderby=EstimatedTime&$top=10",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$orderby",
													"value": "EstimatedTime"
												},
												{
													"key": "$top",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with select odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains Select not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Query option 'Select' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "7e0d9cb2-fbf4-423b-84ad-203a6417f21a"
											}
										}
									],
									"id": "4e6305b7-6ac4-4041-a935-31b88dee6015",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$select=Title",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$select",
													"value": "Title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with datetime odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches contains day function not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Function 'day' is not allowed\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "2cb6cdef-7fa1-44f4-abde-9f36b0198e4b"
											}
										}
									],
									"id": "812dab3b-dffb-43d2-8ad9-c691ab2c65cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$filter=day(PublishedDate) eq 4",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$filter",
													"value": "day(PublishedDate) eq 4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search with startswith odata attribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "76b50d23-38bc-4e4c-9582-6c10aacfae8e"
											}
										}
									],
									"id": "14b65d6b-9110-4148-adaf-70ce049d3006",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$filter=startswith(Title,'test')",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$filter",
													"value": "startswith(Title,'test')"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search filterby Title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6e0f143-6c9f-4016-a2f9-c0dd0b016367",
												"exec": [
													"/*pm.test(\"#7791 Timesheet filter by Status is throwing 500 response\", function () {\r",
													"    // Change this when #7791 is fixed. This test should start failing.\r",
													"    pm.response.to.have.status(500);\r",
													"});*/\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check work templates were found\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e73df5d2-0e33-483a-9dce-ba815b22615f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/WorkTemplates?$filter=Title eq 'Accounting: Month-end close'",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"WorkTemplates"
											],
											"query": [
												{
													"key": "$filter",
													"value": "Title eq 'Accounting: Month-end close'"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "c09ef0e4-64b6-47bc-b763-9db90b7446a3"
						}
					],
					"id": "8cdbc087-94a9-4539-b16b-07b0a4fb29db"
				},
				{
					"name": "ClientApp",
					"item": [
						{
							"name": "ClientRequestRecipients",
							"item": [
								{
									"name": "GET ClientRequestRecipients by Email Address (Invalid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b58c13cf-e462-4c6b-9d62-db187b0161b3",
												"exec": [
													"pm.test(\"Returns invalid email address\", function () {\r",
													"        pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "335bfe22-5114-4202-b7e6-ce60dc8cf8b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequestRecipients?emailAddress=barryt.7877",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequestRecipients"
											],
											"query": [
												{
													"key": "emailAddress",
													"value": "barryt.7877"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET ClientRequestRecipients by Email Address VALID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cb42b8a-fe5d-43d8-a77b-01f855a45648",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        var jsonData = pm.response.json();\r",
													"        pm.expect(jsonData.value.length).to.gte(1);    \r",
													"        pm.environment.set(\"public.api.clientrequest_test_recipientkey\", jsonData.value[0].ClientRequestRecipientKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5142870d-0e58-4a38-8ffa-a0f4e811d0f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequestRecipients?emailAddress={{public.api.clientrequest_test_emailaddress}}",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequestRecipients"
											],
											"query": [
												{
													"key": "emailAddress",
													"value": "{{public.api.clientrequest_test_emailaddress}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "52845d10-c6a0-4f07-aa34-8be8753a065f"
						},
						{
							"name": "ClientRequests",
							"item": [
								{
									"name": "GetRequests by PermaKey: No Expands",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "209bc8b8-ee00-43c3-b81a-a7326c60423d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData).to.not.have.property('Recipient');\r",
													"    pm.expect(jsonData).to.not.have.property('ClientTaskSummaries');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7d52b1aa-db74-44e8-9843-8c3af084fec7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/ClientRequests('{{public.api.clientrequest_test_permakey}}')"
									},
									"response": []
								},
								{
									"name": "GetRequests by PermaKey: Expand Recipient ONLY",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "161d618e-488f-40eb-9264-407c3b0e2305",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('Recipient');\r",
													"    pm.expect(jsonData).to.not.have.property('ClientTaskSummaries');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2f6531ef-00ac-43a7-abfd-d57ed25d2fe8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequests('{{public.api.clientrequest_test_permakey}}')?$expand=Recipient",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequests('{{public.api.clientrequest_test_permakey}}')"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Recipient"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetRequests by PermaKey: Expand Recipients AND TaskSummary ONLY",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36c48748-66bb-4ae3-b9cb-98ac2d53afdf",
												"exec": [
													"pm.test(\"Status code is 200 for Dev2\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        var jsonData = pm.response.json();\r",
													"        pm.expect(jsonData).to.have.property('Recipient');\r",
													"        pm.expect(jsonData).to.have.property('ClientTaskSummaries');\r",
													"        jsonData.ClientTaskSummaries.forEach(task => pm.expect(task).to.not.have.property('LastExternalCommentItem'));\r",
													"        pm.environment.set(\"public.api.clienttask_test_permakey\", jsonData.ClientTaskSummaries[0].ClientTaskKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7757c7ee-7564-4ae6-ab63-27293e1f4aa7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequests('{{public.api.clientrequest_test_permakey}}')?$expand=Recipient, ClientTaskSummaries",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequests('{{public.api.clientrequest_test_permakey}}')"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Recipient, ClientTaskSummaries"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetRequests by PermaKey: Expand Everything: Including LastCommentItem",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3775e27-fd89-454e-ae2a-716821081105",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        var jsonData = pm.response.json();\r",
													"        pm.expect(jsonData).to.have.property('Recipient');\r",
													"        pm.expect(jsonData).to.have.property('ClientTaskSummaries');\r",
													"        jsonData.ClientTaskSummaries.forEach(task => pm.expect(task).to.have.property('LastCommentItem'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d263a4e9-9447-41b7-9dd4-bf5ef77fae5c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequests/{{public.api.clientrequest_test_permakey}}?$expand=Recipient, ClientTaskSummaries($expand=LastCommentItem)",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequests",
												"{{public.api.clientrequest_test_permakey}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Recipient, ClientTaskSummaries($expand=LastCommentItem)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search ClientRequest (Parameterless)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "164c60d3-96b7-4007-ae0b-cfdd2f179956",
												"exec": [
													"pm.test(\"Status code is 200 \", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        pm.test(\"Check client requests are returned\", function () {\r",
													"            var jsonData = pm.response.json();\r",
													"            pm.expect(jsonData.value.length).to.gte(1);    \r",
													"            pm.expect(jsonData.value.length).to.lte(100);\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7d6f84e1-3f0f-444f-b1f1-217dfd3831df",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/ClientRequests/"
									},
									"response": []
								},
								{
									"name": "Search ClientRequest (Parameterless) Expand Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "164c60d3-96b7-4007-ae0b-cfdd2f179956",
												"exec": [
													"pm.test(\"Status code is 400 \", function () {\r",
													"        pm.response.to.have.status(400);\r",
													"        pm.test(\"Check expected error response\", function () {\r",
													"            var jsonData = pm.response.json();\r",
													"            pm.expect(jsonData.error.message).to.contain(\"$expand was specified on ClientTaskSummaries but none of the required $filter properties were specified.\");\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7ddfaa4b-9d14-4399-a638-23383dc93a46",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequests/?$expand=ClientTaskSummaries",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequests",
												""
											],
											"query": [
												{
													"key": "$expand",
													"value": "ClientTaskSummaries"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search ClientRequest By ClientRequestRecipientKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d6f7efb-f757-4d20-b54d-099bd1f8e38b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        pm.test(\"Check client requests are returned with correct search results\", function () {\r",
													"            var jsonData = pm.response.json();\r",
													"            if (jsonData.value.length > 0){\r",
													"                pm.environment.set('public.api.clientrequest_test_workitemkey', jsonData.value[0].WorkItemKey);\r",
													"                var recipientKey = pm.environment.get('public.api.clientrequest_test_recipientkey');\r",
													"                jsonData.value.forEach(element => \r",
													"                    pm.expect(element.Recipient.ClientRequestRecipientKey).to.eq(recipientKey));\r",
													"            }\r",
													"        });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "dc9f10d3-9467-4dbf-a3de-d66382f5b9ba",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequests?$filter=Recipient/ClientRequestRecipientKey eq '{{public.api.clientrequest_test_recipientkey}}'&$expand=Recipient",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequests"
											],
											"query": [
												{
													"key": "$filter",
													"value": "Recipient/ClientRequestRecipientKey eq '{{public.api.clientrequest_test_recipientkey}}'"
												},
												{
													"key": "$expand",
													"value": "Recipient",
													"type": "text"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search ClientRequest By ClientRequestRecipientKey AND WorkItemKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a20ff091-ffb7-40b4-ad37-f0f9483b9d40",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        pm.test(\"Check client requests are returned with correct search results\", function () {\r",
													"            var jsonData = pm.response.json();\r",
													"            if (jsonData.value.length > 0){\r",
													"                var recipientKey = pm.environment.get('public.api.clientrequest_test_recipientkey');\r",
													"                var workItemKey = pm.environment.get('public.api.clientrequest_test_workitemkey');\r",
													"                jsonData.value.forEach(element => \r",
													"                {\r",
													"                    pm.expect(element.Recipient.ClientRequestRecipientKey).to.eq(recipientKey) &&\r",
													"                    pm.expect(element.WorkItemKey).to.eq(workItemKey) &&\r",
													"                    pm.expect(element.ClientTaskSummaries).to.exist;\r",
													"                    element.ClientTaskSummaries.forEach(clientTask =>\r",
													"                        pm.expect(clientTask.ClientRequestKey).to.eq(element.ClientRequestKey));\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d4c2421f-de8c-478e-a74e-77ea9a1e5881",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequests?$filter=Recipient/ClientRequestRecipientKey eq '{{public.api.clientrequest_test_recipientkey}}' and WorkItemKey eq '{{public.api.clientrequest_test_workitemkey}}'&$expand=Recipient,ClientTaskSummaries",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequests"
											],
											"query": [
												{
													"key": "$filter",
													"value": "Recipient/ClientRequestRecipientKey eq '{{public.api.clientrequest_test_recipientkey}}' and WorkItemKey eq '{{public.api.clientrequest_test_workitemkey}}'"
												},
												{
													"key": "$expand",
													"value": "Recipient,ClientTaskSummaries"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search ClientRequest By DueDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cffed391-547e-4e55-8762-27ede3c9336e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        pm.test(\"Check client requests are returned with correct search results\", function () {\r",
													"            var jsonData = pm.response.json();\r",
													"            if (jsonData.value.length > 0){\r",
													"                pm.expect(jsonData.value.length).to.lte(100);\r",
													"                jsonData.value.forEach(element => \r",
													"                    pm.expect(Date.parse(element.WorkItemDueDate)).to.gte(Date.parse('2020-10-31T17:04:32Z')));\r",
													"            }\r",
													"        });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a74670e8-0aa3-4163-bbec-43c7106d62ff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequests?$filter=WorkItemDueDate ge 2020-10-31T17:04:32Z",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequests"
											],
											"query": [
												{
													"key": "$filter",
													"value": "WorkItemDueDate ge 2020-10-31T17:04:32Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search ClientRequest By CompletedDate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d4d52e3b-5096-4b13-94bc-834cfbb2e974",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0cfdefd1-a919-4f7a-a9d9-6f202f75f67a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        pm.test(\"Check client requests are returned with correct search results\", function () {\r",
													"            var jsonData = pm.response.json();\r",
													"            if (jsonData.value.length > 0){\r",
													"                pm.expect(jsonData.value.length).to.lte(100);\r",
													"                jsonData.value.forEach(element => \r",
													"                    pm.expect(Date.parse(element.WorkItemCompletedDate)).to.gte(Date.parse('2020-06-30')));\r",
													"            }\r",
													"        });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fdc376a4-e8e8-49f2-a12c-6e00eb246479",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequests?$filter=WorkItemCompletedDate ge 2020-06-30",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequests"
											],
											"query": [
												{
													"key": "$filter",
													"value": "WorkItemCompletedDate ge 2020-06-30"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search ClientRequest Complex Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0cd7780-876e-4c39-bcf8-f51612e8b263",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        pm.test(\"Check client requests are returned with correct search results\", function () {\r",
													"            var jsonData = pm.response.json();\r",
													"            if (jsonData.value.length > 0){\r",
													"                pm.expect(jsonData.value.length).to.lte(100);\r",
													"                var recipientKey = pm.environment.get('public.api.clientrequest_test_recipientkey');\r",
													"                jsonData.value.forEach(element => \r",
													"                    pm.expect(Date.parse(element.WorkItemDueDate)).to.gte(Date.parse('2008-10-31T17:04:32Z')) &&\r",
													"                    pm.expect(Date.parse(element.WorkItemDueDate)).to.lte(Date.parse('2031-06-30T17:04:32Z')) &&\r",
													"                    pm.expect(element.Recipient.ClientRequestRecipientKey).to.eq(recipientKey));\r",
													"            }\r",
													"        });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3befb649-9c40-4da2-9142-7857b7126d77",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientRequests?$filter=WorkItemDueDate ge 2008-10-31T17:04:32Z and WorkItemDueDate le 2031-06-30T17:04:32Z and Recipient/ClientRequestRecipientKey eq '{{public.api.clientrequest_test_recipientkey}}'&$expand=Recipient",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientRequests"
											],
											"query": [
												{
													"key": "$filter",
													"value": "WorkItemDueDate ge 2008-10-31T17:04:32Z and WorkItemDueDate le 2031-06-30T17:04:32Z and Recipient/ClientRequestRecipientKey eq '{{public.api.clientrequest_test_recipientkey}}'"
												},
												{
													"key": "$expand",
													"value": "Recipient",
													"type": "text"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "cb3881ea-ddbc-4a2c-9434-607e4815795b"
						},
						{
							"name": "ClientTasks",
							"item": [
								{
									"name": "Get ClientTasks by PermaKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c0e502d-b659-4e8f-9e12-11f200ef7315",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "123c78a1-196f-4015-8830-2ac529622841",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientTasks/{{public.api.clienttask_test_permakey}}",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientTasks",
												"{{public.api.clienttask_test_permakey}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "LastCommentItem",
													"disabled": true
												},
												{
													"key": "linkId",
													"value": "287DF211-BD8D-4F91-B7A4-ADE7608F9544",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH ClientTasks (Valid Property)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0dbcf75-6d1e-4a1f-aa11-a44e7cdc29eb",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d0a94919-0d07-463a-b53d-006c4495cf11",
												"exec": [
													"var data = pm.request.body.raw;\r",
													"data = \"{\\\"DateCompleted\\\": \" + \"'\" + new Date().toISOString() + \"'}\";\r",
													"//data = \"{\\\"DateCompleted\\\": \"  + \"null\" + \"}\";\r",
													"let body = {\r",
													"    mode: 'raw',\r",
													"    raw: data,\r",
													"    options: {\r",
													"        raw: {\r",
													"            language: 'json'\r",
													"        }\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.request.body.update(body);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "44fc433e-5317-4da2-a0b1-92c020ec1f95",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientTasks/{{public.api.clienttask_test_permakey}}",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientTasks",
												"{{public.api.clienttask_test_permakey}}"
											],
											"query": [
												{
													"key": "$expand",
													"value": "LastCommentItem",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH ClientTasks (Valid Property, NULL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14fb8c6b-16c4-45e2-8738-12fded1ba3e3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d2ce4e22-40bf-4efc-a2dd-2e7e7021b9c3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"DateCompleted\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/ClientTasks('{{public.api.clienttask_test_permakey}}')"
									},
									"response": []
								},
								{
									"name": "PATCH ClientTasks (Invalid Property)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f6c6476-5301-4ed4-a7ec-c04ee53396ec",
												"exec": [
													"pm.test(\"Status code is 400 for Dev2, 404 otherwise\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "209c8fce-ce22-4402-90fd-e6dd9ae78f20",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Title\": \"Update Title\",\r\n    \"DateCompleted\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/ClientTasks/{{public.api.clienttask_test_permakey}}"
									},
									"response": []
								}
							],
							"id": "87646536-e458-44fb-95ce-85a94ea0cf70"
						},
						{
							"name": "ClientTaskComments",
							"item": [
								{
									"name": "GET",
									"item": [
										{
											"name": "Get ClientTaskComments LIST by ClientTaskKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b50b86a4-6fbd-4c25-a6d4-0fc0bfbd48a3",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"        pm.test(\"Check object is returned with correct data.\", function () {\r",
															"            var jsonData = pm.response.json();\r",
															"            if (jsonData.value.length > 0){\r",
															"                pm.environment.set('public.api.clientcomment_test_authorkey', jsonData.value[0].AuthorKey)\r",
															"                var clientTaskKey = pm.environment.get('public.api.clienttask_test_permakey');\r",
															"                jsonData.value.forEach(element => \r",
															"                    pm.expect(element.ClientTaskKey).to.eq(clientTaskKey));\r",
															"            }\r",
															"        });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ef3f5be5-cd66-4ab6-9447-24485eb043b5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "AccessKey",
														"value": "{{publicapi.accesskey}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{publicapi.authorization}}",
														"type": "text"
													}
												],
												"url": "{{public.api.baseurl}}/v3/ClientTaskComments('{{public.api.clienttask_test_permakey}}')"
											},
											"response": []
										}
									],
									"id": "acea2dd4-58ea-47df-aaa0-c3eac4dced6a"
								},
								{
									"name": "POST",
									"item": [
										{
											"name": "Create ClientTaskComment Valid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b3125875-e9cc-40ff-a0d0-03009c3611a0",
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"        pm.response.to.have.status(201);\r",
															"        pm.test(\"Check object is created with correct data.\", function () {\r",
															"            var jsonData = pm.response.json();\r",
															"            var requestData = JSON.parse(pm.request.body.raw);\r",
															"            pm.expect(jsonData.ClientTaskKey).to.eq(requestData.ClientTaskKey);\r",
															"            pm.expect(jsonData.Message).to.eq(requestData.Message);\r",
															"            pm.expect(jsonData.AuthorKey).to.eq(requestData.AuthorKey);\r",
															"            pm.environment.set('public.api.clienttask_test_commentkey', jsonData.CommentItemKey);\r",
															"        });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8f286d16-3934-4b64-899a-1d3e73c4dce7",
														"exec": [
															"var data = JSON.parse(pm.request.body.raw);\r",
															"data.Message = \"Message via Public API, posted at \"+ new Date().toISOString();\r",
															"\r",
															"let body = {\r",
															"    mode: 'raw',\r",
															"    raw: JSON.stringify(data),\r",
															"    options: {\r",
															"        raw: {\r",
															"            language: 'json'\r",
															"        }\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.request.body.update(body);"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "48c1d0c0-c704-40e4-a7ed-6e15051a1328",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "AccessKey",
														"value": "{{publicapi.accesskey}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{publicapi.authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientTaskKey\": \"{{public.api.clienttask_test_permakey}}\",\r\n    \"PostDateTime\": \"2021-05-28T00:49:03+12:00\",\r\n    \"AuthorKey\": \"{{public.api.clientcomment_test_authorkey}}\",\r\n    \"AuthorType\": \"Contact\",\r\n    \"AuthorAvatarUrl\": null,\r\n    \"AvatarIndex\": 4,\r\n    \"IsEdited\": false,\r\n    \"DateModified\": null\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{public.api.baseurl}}/v3/ClientTaskComments/",
													"host": [
														"{{public.api.baseurl}}"
													],
													"path": [
														"v3",
														"ClientTaskComments",
														""
													],
													"query": [
														{
															"key": "linkId",
															"value": "e45f51af-3246-4cbd-bd97-d8afd430b232",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ClientTaskComment INVALID - Wrong ClientTaskKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a58ad07d-0e68-4b3a-8094-930469476fbc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"        pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cf93a1d3-3087-4802-a160-5d589df3fe93",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "500ab711-597d-488c-b4a1-970800f09767",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "AccessKey",
														"value": "{{publicapi.accesskey}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{publicapi.authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientTaskKey\": \"{{public.api.clienttask_test_permakey}}\",\r\n    \"Message\": \"test bad\",\r\n    \"PostDateTime\": \"2021-05-28T00:49:03+12:00\",\r\n    \"AuthorKey\": \"3JM1sQXc3zJ4\",\r\n    \"AuthorType\": \"Contact\",\r\n    \"AuthorFullName\": \"Acme Test User\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{public.api.baseurl}}/v3/ClientTaskComments/"
											},
											"response": []
										},
										{
											"name": "Create ClientTaskComment INVALID - Missing Author field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e8b528ec-b154-4fed-9dc9-9148a345b8b0",
														"exec": [
															"pm.test(\"Status code is 400 for Dev2, 404 otherwise\", function () {\r",
															"        pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e9f360e7-9f30-401c-b327-f44073a6ac8b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "35e3e382-62d2-4e9c-a68f-156b2d8e5ce2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "AccessKey",
														"value": "{{publicapi.accesskey}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{publicapi.authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"ClientTaskKey\": \"{{public.api.clienttask_test_permakey}}\",\r\n    \"Message\": \"test bad\",\r\n    \"AuthorType\": \"Contact\",\r\n    \"AuthorFullName\": \"Acme Test User\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{public.api.baseurl}}/v3/ClientTaskComments/"
											},
											"response": []
										},
										{
											"name": "Create ClientTaskComment INVALID - Missing client task key",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4d29aa24-5bfa-453f-b665-41ca389ed2ce",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"        pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2e7a2c70-e19e-45fd-af57-07b5fff2086e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ae710e37-916e-4821-80df-0699f2859d47",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "AccessKey",
														"value": "{{publicapi.accesskey}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{publicapi.authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Message\": \"test bad\",\r\n    \"AuthorType\": \"Contact\",\r\n    \"AuthorFullName\": \"Acme Test User\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{public.api.baseurl}}/v3/ClientTaskComments/"
											},
											"response": []
										}
									],
									"id": "7db18120-1713-4487-b5ff-daa0e46346ad"
								},
								{
									"name": "PATCH",
									"item": [
										{
											"name": "Patch Comment Message (Valid)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "558685f1-0f3a-4b4e-953a-7b429992fadf",
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"        pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "05c39c81-d5df-4abf-9a11-2a6ec3870cea",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "AccessKey",
														"value": "{{publicapi.accesskey}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{publicapi.authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Message\": \"Patched by the Public API!\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{public.api.baseurl}}/v3/ClientTaskComments('{{public.api.clienttask_test_commentkey}}')",
													"host": [
														"{{public.api.baseurl}}"
													],
													"path": [
														"v3",
														"ClientTaskComments('{{public.api.clienttask_test_commentkey}}')"
													],
													"query": [
														{
															"key": "linkId",
															"value": "287DF211-BD8D-4F91-B7A4-ADE7608F9544",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch Comment Message Invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "31691275-4baa-4408-a314-141de703e4f6",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"        pm.response.to.have.status(400);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ab832431-8ddf-4f48-826e-12aa2d43c272",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "AccessKey",
														"value": "{{publicapi.accesskey}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{publicapi.authorization}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"Message\": \"A patched message via Public API!\",\r\n    \"AuthorKey\": \"ABadActor\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{public.api.baseurl}}/v3/ClientTaskComments/{{public.api.clienttask_test_commentkey}}"
											},
											"response": []
										}
									],
									"id": "616c57a8-cc63-46ab-b786-4e05315b615d"
								}
							],
							"id": "0bf5abf0-3f33-45e0-86f1-84d48bff8729"
						},
						{
							"name": "ClientTaskCommentAttachment",
							"item": [
								{
									"name": "Upload Attachment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e77dd31b-a9cc-4e72-b707-d362685ea11d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        var jsonData = pm.response.json().value[0];\r",
													"        pm.expect(jsonData).to.have.property('FileUrl');\r",
													"        pm.expect(jsonData).to.have.property('ClientTaskCommentAttachmentKey');\r",
													"        pm.expect(jsonData.FileUrl).to.include('=');\r",
													"        pm.environment.set(\"public.api.clienttask_test_attachmenttoken\", jsonData.FileUrl.split('=')[1]);\r",
													"        pm.environment.set(\"public.api.clienttask_test_attachmentkey\", jsonData.ClientTaskCommentAttachmentKey);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "17c9a3e9-2a4c-4dda-9f92-da2963747158",
												"exec": [
													"pm.environment.set(\"public.api.clienttask_test_attachment_content\",pm.variables.replaceIn('{{$guid}}'))"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "279f20fb-4ca3-48e9-b1b8-7a4022cc46a6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "content-type",
												"value": "multipart/form-data; boundary=--------------------------separator",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "----------------------------separator\r\nContent-Disposition: form-data; name=\"file\"; filename=\"file.txt\"\r\nContent-Type: text/plain\r\n\r\n{{public.api.clienttask_test_attachment_content}}\r\n----------------------------separator--",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/ClientTaskCommentAttachments/{{public.api.clienttask_test_commentkey}}"
									},
									"response": []
								},
								{
									"name": "Get ClientTaskCommentAttachments [Updated]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25abd56e-b46d-46a5-ab8e-38080e29d64b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var expectedValue=pm.environment.get(\"public.api.clienttask_test_attachment_content\");\r",
													"    pm.expect(pm.response.text()).to.eq(expectedValue);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3bcfe499-dae1-40cc-935a-30990b8dc9aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientTaskCommentAttachments?token={{public.api.clienttask_test_attachmenttoken}}",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientTaskCommentAttachments"
											],
											"query": [
												{
													"key": "token",
													"value": "{{public.api.clienttask_test_attachmenttoken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE ClientTaskCommentAttachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "510305fc-de82-4e77-9022-ff3ca0cd3620",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9d008d7b-586a-4d6d-aee9-e08678123c10",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/ClientTaskCommentAttachments('')?fileKey={{public.api.clienttask_test_attachmentkey}}",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"ClientTaskCommentAttachments('')"
											],
											"query": [
												{
													"key": "fileKey",
													"value": "{{public.api.clienttask_test_attachmentkey}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "4849bceb-e979-4083-a427-2b247e3e1176"
						},
						{
							"name": "ClientTaskComments Post-Attachment",
							"item": [
								{
									"name": "DELETE",
									"item": [
										{
											"name": "Delete ClientTaskComment Valid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab51ff02-a615-4902-ae9c-e3bbecc517da",
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"        pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "58ff25af-24e3-43b6-b035-2bd065addfcc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "AccessKey",
														"value": "{{publicapi.accesskey}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{publicapi.authorization}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{public.api.baseurl}}/v3/ClientTaskComments/{{public.api.clienttask_test_commentkey}}",
													"host": [
														"{{public.api.baseurl}}"
													],
													"path": [
														"v3",
														"ClientTaskComments",
														"{{public.api.clienttask_test_commentkey}}"
													],
													"query": [
														{
															"key": "linkId",
															"value": "287DF211-BD8D-4F91-B7A4-ADE7608F9544",
															"type": "text",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete ClientTaskComment Invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b5148572-7b35-4f8e-a2f4-1bb8fead3d76",
														"exec": [
															"pm.test(\"Status code is 204 for Dev2, 404 otherwise\", function () {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(pm.response.json().error.message).to.contain(\"No comment found\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "68888856-25ec-431b-b249-3778036efc88",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "AccessKey",
														"value": "{{publicapi.accesskey}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "{{publicapi.authorization}}",
														"type": "text"
													}
												],
												"url": "{{public.api.baseurl}}/v3/ClientTaskComments/RANDOMKEYHERE"
											},
											"response": []
										}
									],
									"id": "105245e3-53bf-4494-b1eb-ea3de62e2a22"
								}
							],
							"id": "30e2a223-d665-4bbb-bb77-0e23c6d44a13"
						},
						{
							"name": "MagicLink Requests",
							"item": [
								{
									"name": "[MagicLink] ResendLink",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "499036b4-c21a-42c4-a841-c2898bb0f7dd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.value.length).to.gte(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "89a69184-b78e-4f6b-bc89-402a9781e017",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Reason\": 4011\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/MagicLinkClientRequests('{{public.api.clienttask_test_magiclinkid}}')/KarbonService.Resend"
									},
									"response": []
								},
								{
									"name": "[MagicLink] GetRequests by PermaKey: Expand Everything: Including LastCommentItem Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "499036b4-c21a-42c4-a841-c2898bb0f7dd",
												"exec": [
													"/*\r",
													"This is only a dummy request for now and the test is not yet ready to be run.\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d4a33299-d236-450d-a468-b287f009d22d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{public.api.baseurl}}/v3/MagicLinkClientRequests('{{public.api.clienttask_test_magiclinkid}}')?$expand=Recipient, ClientTaskSummaries($expand=LastCommentItem)&deviceId=2536DF8E-5CA5-4BB5-A7AB-F76039B19E48",
											"host": [
												"{{public.api.baseurl}}"
											],
											"path": [
												"v3",
												"MagicLinkClientRequests('{{public.api.clienttask_test_magiclinkid}}')"
											],
											"query": [
												{
													"key": "$expand",
													"value": "Recipient, ClientTaskSummaries($expand=LastCommentItem)"
												},
												{
													"key": "deviceId",
													"value": "2536DF8E-5CA5-4BB5-A7AB-F76039B19E48"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "fe426abd-a56a-400e-a985-a3599de824d3"
						}
					],
					"id": "4d931b1e-5742-4043-aaf0-ae6ceedbde03"
				},
				{
					"name": "EstimateSummaries",
					"item": [
						{
							"name": "Get",
							"item": [
								{
									"name": "Get Estimate Summaries by WorkItemKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79eda62c-9da2-42f2-88ab-2d4b9bccf167",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5524273d-3c05-49ac-8c58-b021ccb4c579",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{public.api.baseurl}}/v3/EstimateSummaries/{{public.api.workitem_permakey}}"
									},
									"response": []
								}
							],
							"id": "5c648604-0478-4ea2-b3ff-a3d1bc7bd426"
						}
					],
					"id": "c137a77c-15f1-4e30-995c-48902fd53460"
				},
				{
					"name": "WebhookSubscriptions",
					"item": [
						{
							"name": "Negative test",
							"item": [
								{
									"name": "Create WebhookSubscription NegativeTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "176bb8a2-7a9c-4616-9069-88c69d4d2a87",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{hardCodedUrl}}\",\r\n    \"WebhookType\": \"{{invalidWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "GetWebhookSubscription NegativeTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3fe36135-8c37-493e-9374-75fd8407552f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{invalidWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Delete WebhookSubscription NegativeTest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3752b00c-1e69-4a90-bc16-ecc242b85fd6",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "35a6915a-094c-4971-8676-5a448e32d12b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{invalidWebhookType}}"
									},
									"response": []
								},
								{
									"name": "No existing webhookSubscriptions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1ed99b0d-6126-4303-b11d-ab5b50f03711",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{hardCodedUrl}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "No Target Url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b4b26e14-6f4b-4289-a74a-089e52606f20",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"WebhookType\": \"{{WorkWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get - No webhook subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7c805f10-3c64-4475-afa1-376a3db1f26a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/"
									},
									"response": []
								}
							],
							"id": "f37f7843-dca0-4fa0-9334-4caafed74d14"
						},
						{
							"name": "Contact",
							"item": [
								{
									"name": "Create Contact - Same target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"ContactWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8f2ac068-094a-4f66-8a01-09cf12d2b864",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{hardCodedUrl}}\",\r\n    \"WebhookType\": \"{{ContactWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"ContactWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8c3d1521-4d6b-4ea1-873f-fab7a6d0e930",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{ContactWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Create Contact - Different target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"randomUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"ContactWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d2cbae34-fd5d-4891-85c2-d0c422674b2f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{randomUrl}}\",\r\n    \"WebhookType\": \"{{ContactWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get Contact - Different target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.not.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"ContactWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c0e990b8-0db1-4f04-b615-444dfeb148f8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{ContactWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Create Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"ContactWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0ec96837-09b9-4086-a902-443f9e7dc15b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{hardCodedUrl}}\",\r\n    \"WebhookType\": \"{{ContactWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get Contact - Same target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"ContactWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "31056ba9-c090-46e3-943e-9a58c954a8f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{ContactWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Delete Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3752b00c-1e69-4a90-bc16-ecc242b85fd6",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d4b08de3-b014-4d51-b5c9-57a1cd90ab5f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/Contact"
									},
									"response": []
								},
								{
									"name": "Get Contact 404 after Deletion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02ba2957-0a83-4012-b90c-e99df6d86ee0",
												"exec": [
													"pm.test(\"Status code is 404 if Deleted\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "dc504486-12c8-4377-8882-36942bca357f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{ContactWebhookType}}"
									},
									"response": []
								}
							],
							"id": "a742b52f-64c6-4e6c-a36e-5091ed033233"
						},
						{
							"name": "Work",
							"item": [
								{
									"name": "Create Work - Same target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"WorkWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f9764cc8-888c-455d-bca2-72c4d49d0a86",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{hardCodedUrl}}\",\r\n    \"WebhookType\": \"{{WorkWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get Work - Same target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"WorkWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0bf384c7-d3a0-4efc-9426-81d2b332205c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{WorkWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Create Work - Different target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"randomUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"WorkWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4f0d9d01-0958-4555-9bb7-927994dc8591",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{randomUrl}}\",\r\n    \"WebhookType\": \"{{WorkWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get Work - Different target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.not.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"WorkWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "db539b26-198b-4e4e-888c-949f514338ff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{WorkWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Create Work",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"WorkWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "58d933fe-34a2-4695-a2f0-1ce4e0505a55",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9a196f3e-d258-4587-af3d-f1cc38148346",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{hardCodedUrl}}\",\r\n    \"WebhookType\": \"{{WorkWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get Work",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"WorkWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7bd5986b-393d-41cb-8da2-764d04e25719",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{WorkWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Delete Work",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3752b00c-1e69-4a90-bc16-ecc242b85fd6",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c1824838-7a52-4d71-98ea-0c91bcc744b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{WorkWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Get Work 404 after Deletion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "aca99246-ff89-4b57-bd99-b393f6032059",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{WorkWebhookType}}"
									},
									"response": []
								}
							],
							"id": "0314dbf9-0cd0-4939-8d55-a0d6fbcd8b9f",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff19a853-0478-4fc3-b785-2f77e68d2081",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fa43c283-cb17-46d7-973a-06cb4439fdba",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Note",
							"item": [
								{
									"name": "Create Note - Same target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"NoteWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ec67c545-c221-41ac-907a-899117738beb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{hardCodedUrl}}\",\r\n    \"WebhookType\": \"{{NoteWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get Note - Same target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"NoteWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "53d72bcf-6ff4-4ced-81da-7f7a61582dd0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{NoteWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Create Note - Different target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"randomUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"NoteWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fa782646-e934-4a94-a746-061da12ad918",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{randomUrl}}\",\r\n    \"WebhookType\": \"{{NoteWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get Note - Different target url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.not.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"NoteWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "67b04609-108c-4a82-84b4-913837c3b0ae",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{NoteWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Create Note",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adab9176-e2aa-4af6-b1a4-7a8defeb3379",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"NoteWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "84966d79-888c-4477-a57b-5d441ef6bc9b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"TargetUrl\": \"{{hardCodedUrl}}\",\r\n    \"WebhookType\": \"{{NoteWebhookType}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get Note",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Target Url is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.TargetUrl).to.be.not.empty;\r",
													"    pm.expect(responseJson.TargetUrl).to.eql(pm.variables.get(\"hardCodedUrl\"));\r",
													"});\r",
													"\r",
													"pm.test(\"WebhookType is set\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson).have.property('WebhookType',pm.variables.get(\"NoteWebhookType\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f88505dc-2926-4b6c-ace0-854d0f8dda0a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{NoteWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Delete Note",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3752b00c-1e69-4a90-bc16-ecc242b85fd6",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4bfc3470-e787-452a-9992-0c87c2baea17",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{NoteWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Get Note 404 after Deletion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "58d643b4-fb0d-42a0-a9c6-30f6e8236e29",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{NoteWebhookType}}"
									},
									"response": []
								}
							],
							"id": "068bdf1d-2e18-4e4d-a0f5-6e74bfdb4cc3"
						},
						{
							"name": "Delete all should return 404",
							"item": [
								{
									"name": "Delete All WebhookSubscriptions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3752b00c-1e69-4a90-bc16-ecc242b85fd6",
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5e2b79f5-06b4-48b0-81da-e1c98c2a198d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								},
								{
									"name": "Get Work 404 after Deletion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ab5b8aa9-9679-419f-b5f8-35f55b8f2066",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{WorkWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Get Note 404 after Deletion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "615d5a97-d782-4b60-ad16-2f2982f26336",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0c8866bb-441c-4190-9cc0-f7d0f44bf359",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions/{{NoteWebhookType}}"
									},
									"response": []
								},
								{
									"name": "Get Contact 404 after Deletion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02ba2957-0a83-4012-b90c-e99df6d86ee0",
												"exec": [
													"pm.test(\"Status code is 404 if Deleted\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "72da8b13-1b6a-4f9b-b218-201e23355b25",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/WebhookSubscriptions"
									},
									"response": []
								}
							],
							"id": "b3c8f76e-aba0-4e99-b775-a1db5c5c9e2b"
						}
					],
					"id": "b005c019-94be-43c6-990e-c3d1ad6ce4b3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "50cd3243-0468-4b32-afb0-33f0c7803457",
								"type": "text/javascript",
								"exec": [
									"// Setting default values in for the test",
									"pm.variables.set(\"hardCodedUrl\", \"https://hooks.zapier.com/hooks/catch/3550924/ovsbqn4/\");",
									"",
									"let url = pm.variables.replaceIn(\"{{$randomUrl}}\")",
									"pm.variables.set(\"randomUrl\", `${url}`)",
									"pm.variables.set(\"invalidWebhookType\", \"test\")",
									"",
									"// Collection of webhook types",
									"pm.variables.set(\"WorkWebhookType\", \"Work\")",
									"pm.variables.set(\"ContactWebhookType\", \"Contact\")",
									"pm.variables.set(\"NoteWebhookType\", \"Note\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f6af9dc5-eb87-4a6b-9f7a-c928e8abac2c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Comment",
					"item": [
						{
							"name": "Get",
							"item": [
								{
									"name": "Get comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "463fc1ef-5516-484b-bf9f-d4923df89893",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e4d070ba-d9bf-4216-8b4a-e1371baccb2a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/Comments('{{hardCodedUrl}}')"
									},
									"response": []
								},
								{
									"name": "Get comment valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5831a10-2db9-4d65-a776-57345103a884",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3e777b73-c199-4526-a99c-d13e8e3c564a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{publicapi.authorization}}",
												"type": "text"
											},
											{
												"key": "AccessKey",
												"value": "{{publicapi.accesskey}}",
												"type": "text"
											}
										],
										"url": "{{public.api.baseurl}}/v3/Comments('{{public.api.contact_commentitem_permaKey}}')"
									},
									"response": []
								}
							],
							"id": "05db4a75-3199-4e0b-937b-fe58f6e60dfd"
						}
					],
					"id": "d999dc8e-1611-42d7-8ee1-4dabe186bb1c"
				}
			],
			"id": "ae7faa85-66ea-4f17-901c-7798cc3be613"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9d6328a2-aa80-4ce2-885f-82b8e53708cd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f657a5b3-fcab-4529-b61a-a72fb480e068",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}