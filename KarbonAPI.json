{
    "openapi": "3.0.2",
    "servers": [
        {
            "url": "https://api.karbonhq.com",
            "description": "The production API server"
        }
    ],
    "info": {
        "description": "This document covers Karbon API endpoints and data formats. You can find additional developer resources at [Karbon Developer Center](https://developers.karbonhq.com). <br><br><b>Please note the following</b> <ul><li>Karbon's APIs use the OData standard to help with resource searching. Use [OData's reference guide](https://www.odata.org/documentation/odata-version-2-0/uri-conventions/)  to learn more about OData URI conventions.</li> <li>PATCH operations are limited to simple top-level properties and currently do not work on nested objects.</li> <li>OData's <code>$expand</code> option is only available where explicitly mentioned.</li>  <li>If an endpoint allows you to use multiple properties with the <code>$expand</code> option, you can assign a comma-separated list of the properties to the <code>$expand</code> option.</li>  <li>Wherever <code>$orderby</code> option is explicitly mentioned, you can also use allowed property name followed by space then <code>desc</code> keyword to receive the response in descending order.</li>  </ul> \n<p><b style=\"color:red\">Warning!!</b> - The examples shown below are for illustration purpose only. Attempting to call an API using the examples for request payload might result in unusual behaviour because the Karbon generated values for various entities' keys may differ from the values in your tenant.</p>\n<hr> <h2>Credentials for accessing Karbon APIs<h2> <p>You will need two credentials - an Authorization token and a Karbon Tenant AccessKey - to access Karbon APIs. If you don't already have these credentials, follow the steps below to receive them and access Karbon APIs: <ol> <li> [Register](https://developers.karbonhq.com/register) for a free developer account to receive the Authorization (<code>Bearer</code>) token via an email.</li> <li> [Find](https://help.karbonhq.com/en/articles/4580888-karbon-api-integration#h_03a24631ea) your Karbon Tenant Accesskey under Settings -> Connected Apps in Karbon.</li> <li>Assign the Authorization token to <code>Authorization</code> header and Karbon Tenant AccessKey to <code>AccessKey</code> header to send requests to Karbon APIs.</li> </ol></p> <hr>\n",
        "version": "v3",
        "title": "Karbon API",
        "termsOfService": "https://karbonhq.com/terms-of-use/",
        "contact": {
            "name": "API Support",
            "url": "karbonhq.com/contact-us"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "tags": [
        {
            "name": "Business Cards",
            "description": "View or update the Business Card attached to a Contact and/or Organisation"
        },
        {
            "name": "Client Groups",
            "description": "Create a client group to manage related contacts, create work for them, and see all related jobs in a single view. [Read more](https://help.karbonhq.com/en/articles/5880261-manage-a-client-group)"
        },
        {
            "name": "Client Request Recipients",
            "description": "Receive information about the recipient of the the Client Request Tasks. [Read more](https://help.karbonhq.com/en/collections/102205-client-tasks)"
        },
        {
            "name": "Client Requests",
            "description": "Review Client Requests that you have created to assign tasks, schedule automatic reminders and receive information. [Read more](https://help.karbonhq.com/en/collections/102205-client-tasks)"
        },
        {
            "name": "Client Task Comment Attachments",
            "description": "Manage attachments in Client Request Tasks comments. [Read more](https://help.karbonhq.com/en/collections/102205-client-tasks)"
        },
        {
            "name": "Client Task Comments",
            "description": "Manage Client Tasks comments and receive information about them. [Read more](https://help.karbonhq.com/en/collections/102205-client-tasks)"
        },
        {
            "name": "Client Tasks",
            "description": "Use Client Tasks to collaborate with clients, assign tasks, schedule automatic reminders and receive info. [Read more](https://help.karbonhq.com/en/collections/102205-client-tasks)"
        },
        {
            "name": "Comments",
            "description": "Use comments on tasks to add notes or bring a colleague into the conversation to collaborate on the task. [Read more](https://help.karbonhq.com/en/articles/2111192-comment-and-collaborate-on-a-task)"
        },
        {
            "name": "Contacts",
            "description": "Manage your contacts and get the full overview over clients, whether they are individuals or organizations. [Read more](https://help.karbonhq.com/en/articles/5708609-overview-of-contacts)"
        },
        {
            "name": "Estimate Summaries",
            "description": "Estimate and track time to understand jobs that are on-budget, allocate resources, and uncover performance insights to transform your firm. [Read more](https://help.karbonhq.com/en/articles/4439115-overview-of-time-budgets)"
        },
        {
            "name": "Files",
            "description": "Handle files and attachments. [Read more](https://help.karbonhq.com/en/articles/5714089-files-and-attachments)"
        },
        {
            "name": "Notes",
            "description": "Hold a conversation internally within your company. Unlike an email, Notes are viewed only by members of your team. [Read more](https://help.karbonhq.com/en/articles/5919746-use-notes)"
        },
        {
            "name": "Organizations",
            "description": "Create an organization to represent marriages and couples and client groups to represent families. [Read more](https://help.karbonhq.com/en/articles/5880261-manage-a-client-group)"
        },
        {
            "name": "Socket Manager",
            "description": "Operations about Socket Manager"
        },
        {
            "name": "Timesheets",
            "description": "Review colleagues' weekly submitted timesheets. [Read more](https://help.karbonhq.com/en/articles/6022358-add-budget-estimates-track-time-and-submit-time-sheets)"
        },
        {
            "name": "Users",
            "description": "Create and view the basics & defaults for colleagues, teams and job roles to customize Karbon to represent the way you and your team work. [Read more](https://help.karbonhq.com/en/articles/3731216-edit-your-user-profile)"
        },
        {
            "name": "Webhook Subscriptions",
            "description": "Integrate your system with Karbon to receive changes made to your data in Karbon."
        },
        {
            "name": "Work Items",
            "description": "Manage a Work Item to best fit your workflow, including timelines, tasks and work teams. [Read more](https://help.karbonhq.com/en/articles/6057036-managing-work-items-and-teams)"
        },
        {
            "name": "Work Schedules",
            "description": "Set a Work Item to repeat on a defined schedule. [Read more](https://help.karbonhq.com/en/articles/6096234-setup-repeating-work-on-a-schedule)"
        },
        {
            "name": "Work Templates",
            "description": "Find and review templates that you created to fit your firm's unique workflows. [Read more](https://help.karbonhq.com/en/articles/5325202-create-and-customize-work-templates)"
        }
    ],
    "security": [
        {
            "ApiKeyAuth": [],
            "BearerAuth": []
        }
    ],
    "paths": {
        "/v3/BusinessCards/{BusinessCardKey}": {
            "get": {
                "tags": [
                    "Business Cards"
                ],
                "summary": "Gets a single Business Card",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "BusinessCardKey",
                        "schema": {
                            "type": "string",
                            "example": "2tBHyXtJBxBy"
                        },
                        "description": "The Karbon-generated Business Card key"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Business Card specified using the BusinessCardKey.",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@odata.context": {
                                                    "type": "string",
                                                    "example": "https://api.karbonhq.com/v3/$metadata#BusinessCards/$entity",
                                                    "description": "The information about Karbon controllers generating this response."
                                                }
                                            }
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "EntityType": {
                                                    "type": "string",
                                                    "example": "Organization",
                                                    "enum": [
                                                        "Contact",
                                                        "Organization"
                                                    ],
                                                    "description": "The type of entity that this business card is connected to."
                                                },
                                                "EntityKey": {
                                                    "type": "string",
                                                    "example": "2jHPZngklwxQ",
                                                    "descrition": "The unique key for the entity specified this business card is connected to"
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/BusinessCard"
                                        }
                                    ]
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#BusinessCards/$entity",
                                    "@odata.type": "#KarbonService.ClientGroupDTO",
                                    "BusinessCardKey": "2tBHyXtJBxBy",
                                    "EntityType": "Organization",
                                    "EntityKey": "2jHPZngklwxQ",
                                    "IsPrimaryCard": true,
                                    "WebSites": [
                                        "www.website.one",
                                        "www.website.two"
                                    ],
                                    "EmailAddresses": [
                                        "sample@example.com",
                                        "sample.two@example.com"
                                    ],
                                    "OrganizationKey": "ZGNmtYyLm4z",
                                    "RoleOrTitle": "COO",
                                    "FacebookLink": "facebook.com/sampleName",
                                    "LinkedInLink": "linkedin.com/sampleName",
                                    "TwitterLink": "twitter.com/sampleName",
                                    "SkypeLink": "skype.com/sampleName",
                                    "Addresses": {
                                        "AddressKey": "e150a05a-2dea-4292-8bc8-03398c9384e4",
                                        "AddressLines": "45 Sample Street",
                                        "City": "Alexandria",
                                        "StateProvinceCounty": "NSW",
                                        "ZipCode": "2015",
                                        "CountryCode": "AU",
                                        "Label": "Physical"
                                    },
                                    "PhoneNumbers": {
                                        "PhoneNumberKey": "6e0b9ace-24b1-4328-a922-3b8be5ef5052",
                                        "Number": 1234567890,
                                        "CountryCode": 61,
                                        "Label": "Work"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "UDI Not Found": {
                                        "$ref": "#/components/examples/BusinessCard_Not_Found"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Business Cards"
                ],
                "summary": "Updates a single Business Card",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "BusinessCardKey",
                        "schema": {
                            "type": "string",
                            "example": "2tBHyXtJBxBy"
                        },
                        "description": "The Karbon-generated Business Card key"
                    }
                ],
                "description": "Use the <code>PUT</code> method on this endpoint to update the details of a Business Card specified using the BusinessCardKey.",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Update_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Non existent Key": {
                                        "$ref": "#/components/examples/Shortened_5001"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "EntityType": {
                                                "type": "string",
                                                "example": "Organization",
                                                "enum": [
                                                    "Contact",
                                                    "Organization"
                                                ],
                                                "description": "The type of entity that this business card is connected to."
                                            },
                                            "EntityKey": {
                                                "type": "string",
                                                "example": "2jHPZngklwxQ",
                                                "description": "The unique key for the entity specified this business card is connected to"
                                            }
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/BusinessCardRequest"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientGroups": {
            "get": {
                "tags": [
                    "Client Groups"
                ],
                "summary": "Gets a list of Client Groups",
                "parameters": [
                    {
                        "in": "query",
                        "name": "$filter",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FullName"
                            ],
                            "example": "FullName eq 'Sample Management Team'"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a subset of the Client Groups that satisfy the <code>$filter</code> expression. \n"
                    },
                    {
                        "in": "query",
                        "name": "$orderby",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FullName"
                            ],
                            "default": "ClientGroupKey",
                            "example": [
                                "FullName",
                                "FullName desc"
                            ]
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a list of Client Groups, sorted by the available properties.\n"
                    },
                    {
                        "in": "query",
                        "name": "$top",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 100,
                            "example": 50
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return only the first N Client Groups.\n"
                    },
                    {
                        "in": "query",
                        "name": "$skip",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return all but the first N Client Groups.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive a paginated list of Client Groups from your tenant.  Using the query parameters available to this endpoint,  you can also filter the list of Client Groups by their full name. <br><br> <div style = \"border-block: 1px solid #fc7f03;\"> <b>Notes</b> <ul> <li>This endpoint returns a maximum of 100 Client Groups at once.</li> <li>If the query results in more than 100 Client Groups, a link to the next set of the results will be given in the <code>@odata.nextLink</code> field of the response.</li> <li>The <code>$filter</code> query parameter supports a logical operator - <code>eq</code> and a property to help you form an expression.</li> </ul> </div>\n",
                "operationId": "getClientGroups",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetClientGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    },
                                    "Unsupported Orderby Property": {
                                        "$ref": "#/components/examples/$Orderby_Unsupported_Property"
                                    },
                                    "$top limit exceeded": {
                                        "$ref": "#/components/examples/Limit_Exceeded_Top"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Client Groups"
                ],
                "summary": "Creates a new Client Group",
                "description": "Use the <code>POST</code> method on this endpoint to create a new Client Group in your tenant.\n",
                "operationId": "createClientGroup",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ResponseCreateClientGroup"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "AccountingDetails": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "description": "The accounting details associated with the Client Group. This property will be <code>null</code>."
                                                }
                                            }
                                        }
                                    ]
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#ClientGroups/$entity",
                                    "@odata.type": "#KarbonService.ClientGroupDTO",
                                    "ClientGroupKey": "38zlxNyJSr8y",
                                    "FullName": "Abigail Silvers",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Client",
                                    "UserDefinedIdentifier": "SILVERS",
                                    "RestrictionLevel": "Public",
                                    "PrimaryContact": "Duncan Moore",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "Members": [],
                                    "EntityDescription": {
                                        "Text": "Bicycle rental service in the New jersey area."
                                    },
                                    "AccountingDetails": null
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "The endpoint URL to the newly created Client Group.",
                                "schema": {
                                    "type": "string",
                                    "example": "https://api.karbonhq.com/v3/ClientGroups('4t8LbR1QcbGS')"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Create_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Duplicate UDI": {
                                        "$ref": "#/components/examples/Duplicate_UDI"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateClientGroup"
                            },
                            "example": {
                                "FullName": "Abigail Silvers",
                                "ClientOwner": "rodney.muller@samplecompany.com",
                                "ClientManager": "jessica.tse@samplecompany.com",
                                "ContactType": "Client",
                                "UserDefinedIdentifier": "SILVERS",
                                "RestrictionLevel": "Public",
                                "PrimaryContact": "Duncan Moore",
                                "EntityDescription": {
                                    "Text": "Bicycle rental service in the New jersey area."
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientGroups/GetClientGroupByUserDefinedIdentifier(UserDefinedIdentifier='{UserDefinedIdentifier}')": {
            "get": {
                "tags": [
                    "Client Groups"
                ],
                "summary": "Gets a Client Group using UserDefinedIdentifier",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "UserDefinedIdentifier",
                        "schema": {
                            "type": "string",
                            "example": "SILVERS"
                        },
                        "description": "A unique identifier that you had created to identify this Client Group. This parameter is <b>not</b> case sensitive."
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BusinessCard"
                            ],
                            "example": "BusinessCard"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will also return the Business Card of the Client Group.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Client Group specified using the UserDefinedIdentifier.  <br><br>Using the query parameter available to this endpoint, you can also include Business Card details of the Client Group in the response.\n",
                "operationId": "getClientGroupByUDI",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ResponseCreateClientGroup"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "AccountingDetails": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "description": "The accounting details associated with the Client Group. This property will be <code>null</code>."
                                                }
                                            }
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "BusinessCard": {
                                                    "$ref": "#/components/schemas/BusinessCard"
                                                }
                                            }
                                        }
                                    ]
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#ClientGroups/$entity",
                                    "@odata.type": "#KarbonService.ClientGroupDTO",
                                    "ClientGroupKey": "38zlxNyJSr8y",
                                    "FullName": "Abigail Silvers",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Client",
                                    "UserDefinedIdentifier": "SILVERS",
                                    "RestrictionLevel": "Public",
                                    "PrimaryContact": "Duncan Moore",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "Members": {
                                        "ContactKey": "34yxkY51knn7",
                                        "OrganizationKey": "4ncPZ7q96SGc"
                                    },
                                    "EntityDescription": {
                                        "Text": "Bicycle rental service in the New jersey area."
                                    },
                                    "AccountingDetails": null,
                                    "BusinessCard": {
                                        "BusinessCardKey": "2tBHyXtJBxBy",
                                        "IsPrimaryCard": true,
                                        "WebSites": [
                                            "www.website.one",
                                            "www.website.two"
                                        ],
                                        "EmailAddresses": [
                                            "sample@example.com",
                                            "sample.two@example.com"
                                        ],
                                        "OrganizationKey": "ZGNmtYyLm4z",
                                        "RoleOrTitle": "COO",
                                        "FacebookLink": "facebook.com/sampleName",
                                        "LinkedInLink": "linkedin.com/sampleName",
                                        "TwitterLink": "twitter.com/sampleName",
                                        "SkypeLink": "skype.com/sampleName",
                                        "Addresses": {
                                            "AddressKey": "e150a05a-2dea-4292-8bc8-03398c9384e4",
                                            "AddressLines": "45 Sample Street",
                                            "City": "Alexandria",
                                            "StateProvinceCounty": "NSW",
                                            "ZipCode": "2015",
                                            "CountryCode": "AU",
                                            "Label": "Physical"
                                        },
                                        "PhoneNumbers": {
                                            "PhoneNumberKey": "6e0b9ace-24b1-4328-a922-3b8be5ef5052",
                                            "Number": 1234567890,
                                            "CountryCode": 61,
                                            "Label": "Work"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "UDI Is Empty": {
                                        "$ref": "#/components/examples/UDI_Is_Empty"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "UDI Not Found": {
                                        "$ref": "#/components/examples/UDI_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientGroups/{ClientGroupkey}": {
            "get": {
                "tags": [
                    "Client Groups"
                ],
                "summary": "Gets a Client Group using ClientGroupkey",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "ClientGroupkey",
                        "schema": {
                            "type": "string",
                            "example": "4t8LbR1QcbGS"
                        },
                        "description": "The Karbon-generated Client Group key"
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BusinessCard"
                            ],
                            "example": "BusinessCard"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will also return Business Card of the Client Group.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Client Group specified using the <code>ClientGroupkey</code>.  <br><br>Using the query parameter available to this endpoint,  you can also include the Business Card details of the Client Group in the response.\n",
                "operationId": "getClientGroupByID",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ResponseCreateClientGroup"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "AccountingDetails": {
                                                    "nullable": true,
                                                    "type": "string",
                                                    "description": "The accounting details associated with the Client Group. This property will be <code>null</code>."
                                                }
                                            }
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "BusinessCard": {
                                                    "$ref": "#/components/schemas/BusinessCard"
                                                }
                                            }
                                        }
                                    ]
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#ClientGroups/$entity",
                                    "@odata.type": "#KarbonService.ClientGroupDTO",
                                    "ClientGroupKey": "38zlxNyJSr8y",
                                    "FullName": "Abigail Silvers",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Client",
                                    "UserDefinedIdentifier": "SILVERS",
                                    "RestrictionLevel": "Public",
                                    "PrimaryContact": "Duncan Moore",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "Members": {
                                        "ContactKey": "34yxkY51knn7",
                                        "OrganizationKey": "4ncPZ7q96SGc"
                                    },
                                    "EntityDescription": {
                                        "Text": "Bicycle rental service in the New jersey area."
                                    },
                                    "AccountingDetails": null,
                                    "BusinessCard": {
                                        "BusinessCardKey": "2tBHyXtJBxBy",
                                        "IsPrimaryCard": true,
                                        "WebSites": [
                                            "www.website.one",
                                            "www.website.two"
                                        ],
                                        "EmailAddresses": [
                                            "sample@example.com",
                                            "sample.two@example.com"
                                        ],
                                        "OrganizationKey": "ZGNmtYyLm4z",
                                        "RoleOrTitle": "COO",
                                        "FacebookLink": "facebook.com/sampleName",
                                        "LinkedInLink": "linkedin.com/sampleName",
                                        "TwitterLink": "twitter.com/sampleName",
                                        "SkypeLink": "skype.com/sampleName",
                                        "Addresses": {
                                            "AddressKey": "e150a05a-2dea-4292-8bc8-03398c9384e4",
                                            "AddressLines": "45 Sample Street",
                                            "City": "Alexandria",
                                            "StateProvinceCounty": "NSW",
                                            "ZipCode": "2015",
                                            "CountryCode": "AU",
                                            "Label": "Physical"
                                        },
                                        "PhoneNumbers": {
                                            "PhoneNumberKey": "6e0b9ace-24b1-4328-a922-3b8be5ef5052",
                                            "Number": 1234567890,
                                            "CountryCode": 61,
                                            "Label": "Work"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/Key_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Client Groups"
                ],
                "summary": "Updates a Client Group (Full)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "ClientGroupkey",
                        "schema": {
                            "type": "string",
                            "example": "4t8LbR1QcbGS"
                        },
                        "description": "The Karbon-generated Client Group key"
                    }
                ],
                "description": "Use the <code>PUT</code> method on this endpoint to update full details of a Client Group specified using the <code>ClientGroupkey</code>.  <br><br>Using the query parameter available to this endpoint, you can also update the Business Card details of the Client Group.\n",
                "operationId": "putClientGroupByID",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Update_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Non existent Key": {
                                        "$ref": "#/components/examples/Shortened_5001"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CreateClientGroup"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "BusinessCard": {
                                                "$ref": "#/components/schemas/BusinessCardRequest"
                                            }
                                        }
                                    }
                                ]
                            },
                            "example": {
                                "FullName": "Abigail Silvers",
                                "ClientOwner": "rodney.muller@samplecompany.com",
                                "ClientManager": "jessica.tse@samplecompany.com",
                                "ContactType": "Client",
                                "UserDefinedIdentifier": "SILVERS",
                                "RestrictionLevel": "Public",
                                "PrimaryContact": "Duncan Moore",
                                "EntityDescription": {
                                    "Text": "Bicycle rental service in the New jersey area."
                                },
                                "BusinessCard": {
                                    "IsPrimaryCard": true,
                                    "WebSites": [
                                        "www.website.one",
                                        "www.website.two"
                                    ],
                                    "EmailAddresses": [
                                        "sample@example.com",
                                        "sample.two@example.com"
                                    ],
                                    "RoleOrTitle": "COO",
                                    "FacebookLink": "facebook.com/sampleName",
                                    "LinkedInLink": "linkedin.com/sampleName",
                                    "TwitterLink": "twitter.com/sampleName",
                                    "SkypeLink": "skype.com/sampleName",
                                    "Addresses": {
                                        "AddressLines": "45 Sample Street",
                                        "City": "Alexandria",
                                        "StateProvinceCounty": "NSW",
                                        "ZipCode": "2015",
                                        "CountryCode": "AU",
                                        "Label": "Physical"
                                    },
                                    "PhoneNumbers": {
                                        "Number": 1234567890,
                                        "CountryCode": 61,
                                        "Label": "Work"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Client Groups"
                ],
                "summary": "Updates a Client Group (Partial)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "ClientGroupkey",
                        "schema": {
                            "type": "string",
                            "example": "4t8LbR1QcbGS"
                        },
                        "description": "The Karbon-generated Client Group key"
                    }
                ],
                "description": "Use the <code>PATCH</code> method on this endpoint to update partial details of a Client Group specified using the <code>ClientGroupkey</code>.  <br><br>This method <b>only supports</b> editing the <code>FullName</code> property. \n",
                "operationId": "patchClientGroupByID",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Update_Unsupported_Property"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Non existent Key": {
                                        "$ref": "#/components/examples/Shortened_5001"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "FullName": {
                                        "type": "string",
                                        "description": "The full name of the Client Group",
                                        "example": "Abigail Silvers"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientRequestRecipients": {
            "get": {
                "tags": [
                    "Client Request Recipients"
                ],
                "summary": "Gets details of a Client email",
                "parameters": [
                    {
                        "in": "query",
                        "required": true,
                        "name": "emailAddress",
                        "schema": {
                            "type": "string",
                            "example": "info@acme.com"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return the details of a Client email.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Client email address.\n",
                "operationId": "getClientRequestRecipientsByEmail",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "required": [
                                        "value",
                                        "@odata.context"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "@odata.context": {
                                            "type": "string",
                                            "description": "The information about Karbon controllers generating this response.",
                                            "example": "https://api.karbonhq.com/v3/$metadata#ClientRequestRecipients"
                                        },
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "required": [
                                                    "value",
                                                    "@odata.context"
                                                ],
                                                "type": "object",
                                                "properties": {
                                                    "ClientRequestRecipientKey": {
                                                        "type": "string",
                                                        "description": "A Karbon-generated unique identifier for the email recipient",
                                                        "example": "yD8Rw3DxksW"
                                                    },
                                                    "ClientType": {
                                                        "type": "string",
                                                        "enum": [
                                                            "Contact",
                                                            "Organization"
                                                        ],
                                                        "description": "The client type of the Client Request Recipient.",
                                                        "example": "Organization"
                                                    },
                                                    "Name": {
                                                        "type": "string",
                                                        "description": "The name of the Client",
                                                        "example": "Acme Corporation"
                                                    },
                                                    "EmailAddresses": {
                                                        "type": "string",
                                                        "description": "The email address of the client",
                                                        "example": "info@acme.com"
                                                    },
                                                    "AuthorAvatarUrl": {
                                                        "type": "string",
                                                        "description": "The URL to the avatar of the client",
                                                        "example": "https://api.az.karbonemail.com/images/e546f2bc-e48f-4c2a-9384-a1036c28c081"
                                                    },
                                                    "AvatarIndex": {
                                                        "type": "integer",
                                                        "format": "int32",
                                                        "description": "The background color index number of the Client avatar",
                                                        "example": 25
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Invalid Email Address": {
                                        "$ref": "#/components/examples/ClientRequestRecipient_Invalid_Email"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Email Not Found": {
                                        "$ref": "#/components/examples/ClientRequestRecipient_Not_Found"
                                    },
                                    "HTTP Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientRequests": {
            "get": {
                "tags": [
                    "Client Requests"
                ],
                "summary": "Gets a list of Client Requests",
                "description": "This endpoint can be used to get the details of all Client Request tasks.<br><br> <div style = \"border-block: 1px solid #fc7f03;\">   <b>Notes</b>   <ul>   <li>This endpoint returns a maximum of 100 Client Requests at once.</li>   <li>If the query results in more than 100 Client Requests, a link to the next set of the results will be given in the <code>@odata.nextLink</code> field of the response.</li>   <li>The <code>$expand</code> query parameter lets you include Recipient and ClientTaskSummaries associated with the Client task in the response. </li>  <li>The <code>$filter</code> query parameter supports 4 logical operators (<code>eq</code>, <code>ge</code>, <code>le</code>, and <code>and</code>) and 4 properties to help you  form an expression.  They are listed below with examples of usage.<br> <ul><br> <li><b>Operators for DateTime Properties</b></li> <table> <thead>\n    <tr>\n        <th>Logical Operators</th>\n        <th>Purpose</th>\n        <th>WorkItemCompletedDate</th>\n        <th>WorkItemDueDate</th>\n    </tr>\n</thead> <tbody>\n    <tr>\n        <td>eq</td>\n        <td>Full-text search</td>\n        <td>WorkItemCompletedDate eq 2020-10-31T17:04:32Z</td>\n        <td>WorkItemDueDate eq  2020-10-31T17:04:32Z</td>\n    </tr>\n    <tr>\n        <td>ge</td>\n        <td>Greater than and equals to</td>\n        <td>WorkItemCompletedDate ge 2020-10-31T17:04:32Z</td>\n        <td>WorkItemDueDate ge 2020-10-31T17:04:32Z</td>\n    </tr>\n    <tr>\n        <td>le</td>\n        <td>Lesser than and equals to</td>\n        <td>WorkItemCompletedDate le 2020-10-31T17:04:32Z</td>\n        <td>WorkItemDueDate le 2020-10-31T17:04:32Z</td>\n    </tr>\n    <tr>\n        <td>and</td>\n        <td>Combines properties</td>\n        <td colspan = \"2\">WorkItemCompletedDate ge\n2020-10-31T17:04:32Z and WorkItemKey eq '3jtk81v2Xtw7'</td>\n    </tr>\n</tbody> </table><br> <li><b>Operators for other Properties</b></li><br> <table> <thead>\n    <tr>\n        <th>Logical Operators</th>\n        <th>Purpose</th>\n        <th>Recipient/ClientRequestRecipientKey</th>\n        <th>WorkItemkey</th>\n    </tr>\n</thead> <tbody>\n    <tr>\n        <td>eq</td>\n        <td>Full-text search</td>\n        <td>/v3/ClientRequests?$filter=Recipient/ClientRequestRecipientKe\n eq 'yD8Rw3DxksW'</td>\n        <td>/v3/ClientRequests?$filter=WorkItemKey eq\n'3jtk81v2Xtw7'</td>\n    </tr>\n    <tr>\n        <td>and</td>\n        <td>Combines properties</td>\n        <td colspan = \"2\">/v3/ClientRequests?$filter=WorkItemKey\neq '3jtk81v2Xtw7' and WorkItemDueDate ge 2020-10-31T17:04:32Z</td>\n    </tr>\n</tbody> </table> </ul> </li></ul>",
                "operationId": "getClientRequests",
                "parameters": [
                    {
                        "in": "query",
                        "name": "$filter",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Recipient/ClientRequestRecipientKey",
                                "WorkItemCompletedDate",
                                "WorkItemDueDate",
                                "WorkItemKey"
                            ],
                            "example": "WorkItemKey eq '3jtk81v2Xtw7'"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a subset of the Client Requests that satisfy the <code>$filter</code> expression. \n"
                    },
                    {
                        "in": "query",
                        "name": "$top",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 100,
                            "example": 50
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return only the first N Client Requests.\n"
                    },
                    {
                        "in": "query",
                        "name": "$skip",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return all but the first N Client Requests.\n"
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Recipient",
                                "ClientTaskSummaries"
                            ],
                            "example": "Recipient,ClientTaskSummaries"
                        },
                        "description": "When these parameters are combined with the URI, this endpoint will also return the Recipient and ClientTaskSummaries associated with the Client task.  <br><br>  <b>Notes</b>:  <ul>  <li>You <b>must</b> use the <code>WorkItemKey</code> property on the <code>$filter</code> option to use <code>ClientTaskSummaries</code> on the <code>$expand</code> option. </li> <li>Assign <code>Recipient</code> and <code>ClientTaskSummaries</code> (seperated by a comma) to the <code>$expand</code> option to include, both, Recipient and ClientTaskSummaries in the response.</li></ul>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetExpandedClientRequestWOLastCommentItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Missing Filter Property": {
                                        "$ref": "#/components/examples/Missing_Filter_Property"
                                    },
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    },
                                    "$top limit exceeded": {
                                        "$ref": "#/components/examples/Limit_Exceeded_Top"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientRequests/{ClientTaskkey}": {
            "get": {
                "tags": [
                    "Client Requests"
                ],
                "summary": "Gets a Client Request using ClientTaskkey",
                "description": "This endpoint can be used to get the details of a Client Request task (specified by the <code>ClientTaskkey</code>) attached to a Work Item.<br><br>\nUsing the query parameter available to this endpoint, you can also include Recipient, ClientTaskSummaries, and LastCommentItem associated with the Client task in the response.",
                "operationId": "getClientRequestsbyID",
                "parameters": [
                    {
                        "name": "ClientTaskkey",
                        "in": "path",
                        "description": "A Karbon-generated unique value that is used to identify the Client Request task",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "2cmnl9fy6mj3"
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Recipient",
                                "ClientTaskSummaries",
                                "ClientTaskSummaries($expand=LastCommentItem)"
                            ],
                            "example": "Recipient,ClientTaskSummaries($expand=LastCommentItem)"
                        },
                        "description": "When these parameters are combined with the URI, this endpoint will also return the Recipient, ClientTaskSummaries, and LastCommentItem associated with the Client task. <br><br> <b>Notes</b>: <ul> <li>Assign <code>Recipient</code> and <code>ClientTaskSummaries</code> (seperated by a comma) to the <code>$expand</code> option to include, both, Recipient and ClientTaskSummaries in the response.  </li> <li>The URI format for including <code>LastCommentItem</code> in the response is different from the format used for including <code>Recipient</code> and <code>ClientTaskSummaries</code> in the response.  <ul><li>You will need another <code>$expand</code> option (next to <code>ClientTaskSummaries</code> and inside parenthesis) and assign <code>LastCommentItem</code> to it.</li> <li>This anomaly in the format exists because <code>LastCommentItem</code> is a child object of <code>ClientTaskSummaries</code>.</li></ul> </li></ul>\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetExpandedClientRequest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ClientRequestKey_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientTaskCommentAttachments/{ClientTaskCommentKey}": {
            "put": {
                "tags": [
                    "Client Task Comment Attachments"
                ],
                "summary": "Uploads and links a file",
                "description": "This endpoint can be used to upload and link an attachment to a comment using the <code>ClientTaskCommentKey</code>.<br><br><div style = \"border-block: 1px solid #fc7f03; padding:5px;\"> Note that this endpoint <b>only supports uploading files from the local network</b> but not from the web. </div>",
                "operationId": "uploadClientTaskCommentAttachments",
                "parameters": [
                    {
                        "name": "ClientTaskCommentKey",
                        "in": "path",
                        "description": "A Karbon-generated unique value that is used to identify the Client Task Comment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4x6xD7GnPXGL"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "@odata.context": {
                                            "type": "string",
                                            "description": "The information about Karbon controllers generating this response.",
                                            "example": "https://api.karbonhq.com/v3/$metadata#Collection(KarbonService.ClientTaskCommentAttachmentDTO)"
                                        },
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Attachments"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Could not upload attachment": {
                                        "$ref": "#/components/examples/Could_not_upload_attachment"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ResourceNotFound"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ErrorMessages"
                                        }
                                    ]
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    },
                                    "HTTP Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "File"
                                ],
                                "properties": {
                                    "File": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The field to hold the content of the uploaded file"
                                    },
                                    "FileName": {
                                        "type": "string",
                                        "description": "The name of the file excluding the path",
                                        "example": "Screenshot(1).png"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientTaskCommentAttachments": {
            "get": {
                "tags": [
                    "Client Task Comment Attachments"
                ],
                "summary": "Gets an attachment using token parameter",
                "description": "This endpoint can be used to download the attachment from a comment using its token.",
                "operationId": "getClientTaskCommentAttachments",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "A Karbon-generated token that is used to identify the attachment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJGaWxlQ29udGV4dFBlcm1hS2V5IjoiRFBwWGY3a2JqYnYiLCJpYXQiOjE2NTg3MDg0NjEuMCwiZXhwIjoxNjU4OTY3NjYxLjB9.VsETUnJd47qQFtj102o5dIm5PbJQ8pVKcgrJ6v_Rs84"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The file"
                                },
                                "examples": {
                                    "sampleFile": {
                                        "summary": "A sample file",
                                        "externalValue": "https://cdn.awstatic.com/pub/list-of-mime-types-by-content-type.pdf"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Invalid Token": {
                                        "$ref": "#/components/examples/Invalid_Token"
                                    },
                                    "Missing Token": {
                                        "$ref": "#/components/examples/Missing_Token"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientTaskCommentAttachments('')": {
            "delete": {
                "tags": [
                    "Client Task Comment Attachments"
                ],
                "summary": "Deletes an attachment using fileKey",
                "description": "This endpoint can be used to delete an attachment from a comment using the attachment <code>fileKey</code>.<br><br> <div style = \"border-block: 1px solid #fc7f03;\">   <b>Notes</b>   <ul>   <li>You can find the attachment's <code>fileKey</code> in the response generated by ClientTaskCommentAttachments endpoint's [PUT](#put-/v3/ClientTaskCommentAttachments/-ClientTaskCommentKey-) method. </li>   <ul><li>The <code>fileKey</code> will be the value of <code>ClientTaskCommentAttachmentKey</code> property.</li></ul> </ul> </div>",
                "operationId": "deleteClientTaskCommentAttachments",
                "parameters": [
                    {
                        "name": "fileKey",
                        "in": "query",
                        "description": "A Karbon-generated unique value that is used to identify the attachment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "4NjRcvCb1zV"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "@odata.context": {
                                            "type": "string",
                                            "description": "The information about Karbon controllers generating this response.",
                                            "example": "https://api.karbonhq.com/v3/$metadata#Edm.Boolean"
                                        },
                                        "value": {
                                            "type": "boolean",
                                            "description": "This value will be true if the attachment was successfully deleted.",
                                            "example": true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnhancedErrorMessages"
                                },
                                "examples": {
                                    "File Key not present": {
                                        "$ref": "#/components/examples/File_key_not_present"
                                    },
                                    "No File context": {
                                        "$ref": "#/components/examples/No_File_context"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ResourceNotFound"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ErrorMessages"
                                        }
                                    ]
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    },
                                    "HTTP Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientTaskComments": {
            "post": {
                "tags": [
                    "Client Task Comments"
                ],
                "summary": "Creates a new Client Task comment",
                "description": "Use the <code>POST</code> method on this endpoint to create a new Client Task comment.<br><br> You can also use this endpoint to update an existing Client Task comment. If you want to update  an existing Client Task comment using this endpoint, you must:  <ul>\n    <li>add the <code>CommentItemKey</code> property to the\nrequest payload and assign the correct value to it.</li>\n    <li>remember that only <code>Message</code> and\n<code>IsDraft</code> properties can be updated.</li> <ul>\n",
                "operationId": "postClientTaskComment",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@odata.context": {
                                                    "type": "string",
                                                    "description": "The information about Karbon controllers generating this response.",
                                                    "example": "https://api.karbonhq.com/v3/$metadata#ClientTaskComments/$entity"
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/ResponseCommentItem"
                                        }
                                    ]
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "The endpoint URL to the newly created Comment.",
                                "schema": {
                                    "type": "string",
                                    "example": "https://api.karbonhq.com/v3/ClientTaskComments('4nwNPylJnPhM')"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnhancedErrorMessages"
                                },
                                "examples": {
                                    "Invalid ClientTaskKey": {
                                        "$ref": "#/components/examples/Invalid_ClientTaskKey"
                                    },
                                    "Invalid AuthorKey": {
                                        "$ref": "#/components/examples/Invalid_AuthorKey"
                                    },
                                    "Missing AuthorKey": {
                                        "$ref": "#/components/examples/Missing_AuthorKey"
                                    },
                                    "Missing AuthorType": {
                                        "$ref": "#/components/examples/Missing_AuthorType"
                                    },
                                    "Missing ClientTaskKey": {
                                        "$ref": "#/components/examples/Missing_ClientTaskKey"
                                    },
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Create_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCommentItem"
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientTaskComments/{ClientTaskKey}": {
            "get": {
                "tags": [
                    "Client Task Comments"
                ],
                "summary": "Gets a list of comments on a Client Task",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "ClientTaskKey",
                        "schema": {
                            "type": "string",
                            "example": "35XZhGpm17r7"
                        },
                        "description": "The Karbon-generated Client Task key"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive a list of comments on a Client Task using the <code>ClientTaskKey</code>.",
                "operationId": "getClientTaskCommentsByClientTaskKey",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "@odata.context": {
                                            "type": "string",
                                            "description": "The information about Karbon controllers generating this response.",
                                            "example": "https://api.karbonhq.com/v3/$metadata#ClientTaskComments"
                                        },
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CommentItemForClientRequest"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnhancedErrorMessages"
                                },
                                "examples": {
                                    "Client task key is empty": {
                                        "$ref": "#/components/examples/Client_task_key_is_empty"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientTaskComments/{CommentItemKey}": {
            "patch": {
                "tags": [
                    "Client Task Comments"
                ],
                "summary": "Updates a Client Task Comment (Partial)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "CommentItemKey",
                        "schema": {
                            "type": "string",
                            "example": "35XZhGpm17r7"
                        },
                        "description": "The Karbon-generated Comment Item key"
                    }
                ],
                "description": "Use the <code>PATCH</code> method on this endpoint to update partial details of a Client Task Comment specified using the <code>CommentItemKey</code>.<br><br> <b>Only</b> <code>Message</code> and <code>IsDraft</code> properties can be updated using this endpoint.\n",
                "operationId": "patchClientTaskCommentByClientTaskCommentKey",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Update_Data"
                                    },
                                    "Invalid Patch Property": {
                                        "$ref": "#/components/examples/Invalid_Patch_Property"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "Message": {
                                        "type": "string",
                                        "description": "The comment message",
                                        "example": "I have edited the section as shown in the screenshot"
                                    },
                                    "IsDraft": {
                                        "type": "boolean",
                                        "description": "The value of this property is set to true, if you don't want to publish the comment.",
                                        "example": false
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Client Task Comments"
                ],
                "summary": "Deletes a Client Task comment",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "CommentItemKey",
                        "schema": {
                            "type": "string",
                            "example": "35XZhGpm17r7"
                        },
                        "description": "The Karbon-generated Comment Item key"
                    }
                ],
                "description": "Use the <code>DELETE</code> method to delete a Client Task comment specified using the <code>CommentItemKey</code>.",
                "operationId": "deleteClientTaskCommentByClientTaskCommentKey",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/Comment_Not_Found"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/ClientTasks/{ClientTaskKey}": {
            "get": {
                "tags": [
                    "Client Tasks"
                ],
                "summary": "Gets the details of a Client Task",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "ClientTaskKey",
                        "schema": {
                            "type": "string",
                            "example": "35XZhGpm17r7"
                        },
                        "description": "The Karbon-generated Client Task key"
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "LastCommentItem"
                            ],
                            "example": "LastCommentItem"
                        }
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Client Task using the <code>ClientTaskKey</code>.<br><br> Using the query parameter available to this endpoint, you can also include LastCommentItem associated with the Client task in the response.\n",
                "operationId": "getClientTaskCommentsByClientTaskKey",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@odata.context": {
                                                    "type": "string",
                                                    "description": "The information about Karbon controllers generating this response.",
                                                    "example": "https://api.karbonhq.com/v3/$metadata#ClientTasks(LastCommentItem())/$entity"
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#components/schemas/ClientTaskSummary"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "LastCommentItem": {
                                                    "$ref": "#components/schemas/LastCommentItemForClientRequest"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ClientRequestKey_Not_Found"
                                    },
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    },
                                    "HTTP Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Client Tasks"
                ],
                "summary": "Updates a Client Task (Partial)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "ClientTaskKey",
                        "schema": {
                            "type": "string",
                            "example": "35XZhGpm17r7"
                        },
                        "description": "The Karbon-generated Client Task key"
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "LastCommentItem"
                            ],
                            "example": "LastCommentItem"
                        }
                    }
                ],
                "description": "Use the <code>PATCH</code> method on this endpoint to update partial details of a Client Task specified using the <code>ClientTaskKey</code>.<br><br> <b>Only</b> <code>DateCompleted</code> property can be updated using this endpoint.<br><br> Using the query parameter available to this endpoint, you can also include LastCommentItem associated with the Client task in the response.\n",
                "operationId": "patchClientTaskByClientTaskKey",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@odata.context": {
                                                    "type": "string",
                                                    "description": "The information about Karbon controllers generating this response.",
                                                    "example": "https://api.karbonhq.com/v3/$metadata#ClientTasks(LastCommentItem())/$entity"
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#components/schemas/ClientTaskSummary"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "LastCommentItem": {
                                                    "$ref": "#components/schemas/LastCommentItemForClientRequest"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    },
                                    "Invalid Patch Property": {
                                        "$ref": "#/components/examples/Invalid_Patch_Property"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ClientRequestKey_Not_Found"
                                    },
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    },
                                    "HTTP Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "DateCompleted": {
                                        "type": "string",
                                        "format": "UTC",
                                        "description": "The date at which this Client Task was completed",
                                        "example": "2022-07-25T00:03:22Z"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Comments('{Commentkey}')": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "Gets a Comment using CommentKey",
                "description": "This endpoint can be used to get the comment attached to any Karbon entity (e.g., Work Item, Timesheet, Notes, Contacts).<br><br>\nTo place a call using this endpoint, you will need the unique <code>Commentkey</code> that is used to identify a particular comment in Karbon.",
                "operationId": "getComment",
                "parameters": [
                    {
                        "name": "Commentkey",
                        "in": "path",
                        "description": "A Karbon-generated unique value that is used to identify the comment",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Xn2r5u7xZe"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetComment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Update_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/CommentKey_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Contacts": {
            "get": {
                "tags": [
                    "Contacts"
                ],
                "summary": "Gets a list of Contacts",
                "parameters": [
                    {
                        "in": "query",
                        "name": "$filter",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FullName",
                                "EmailAddress",
                                "PhoneNumber"
                            ],
                            "example": "FullName eq 'Sample Management Team'"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a subset of the Contacts that satisfy the <code>$filter</code> expression. \n"
                    },
                    {
                        "in": "query",
                        "name": "$orderby",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FullName",
                                "LastModifiedDateTime"
                            ],
                            "default": "ClientGroupKey",
                            "example": [
                                "FullName",
                                "FullName desc"
                            ]
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a list of Contacts, sorted by the available properties.\n"
                    },
                    {
                        "in": "query",
                        "name": "$top",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 100,
                            "example": 50
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return only the first N Contacts.\n"
                    },
                    {
                        "in": "query",
                        "name": "$skip",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return all but the first N Contacts.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive a paginated list of Contacts from your tenant.   Using the query parameters available to this endpoint,  you can also filter the list of Contacts by their full name, email address, or phone number.  <br><br>  <div style = \"border-block: 1px solid #fc7f03;\">  <b>Notes</b>  <ul>  <li>This endpoint returns a maximum of 100 Contacts at once.</li>  <li>If the query results in more than 100 Contacts, a link to the next set of the results will be given in the <code>@odata.nextLink</code> field of the response.</li>  <li>The <code>$filter</code> query parameter supports 3 logical operators (<code>eq</code>, <code>contains</code>, and <code>and</code>) and 3 properties to help you form an expression. Usage examples below</li> <table> <thead> <tr>\n    <th>Logical Operators</th>\n    <th>Purpose</th>\n    <th>FullName</th>\n    <th>EmailAddress</th>\n    <th>PhoneNumber</th>\n</tr> </thead> <tbody>\n    <tr>\n        <td>eq</td>\n        <td>Full-text search</td>\n        <td>/v3/Contacts?$filter=FullName eq 'Sample Management\nTeam'</td>\n        <td>/v3/Contacts?$filter=EmailAddress eq\n'sample@company.com'</td>\n        <td>/v3/Contacts?$filter=PhoneNumber eq\n'1234567890'</td>\n    </tr>\n    <tr>\n        <td>contains</td>\n        <td>Partial-text search</td>\n        <td>/v3/Contacts?$filter=(contains(FullName, 'Management\nTeam'))</td>\n        <td>/v3/Contacts?$filter=(contains(EmailAddress,\n'sample@'))</td>\n        <td>/v3/Contacts?$filter=(contains(PhoneNumber,\n'45678'))</td>\n    </tr>\n    <tr>\n        <td>and</td>\n        <td>Combines properties</td>\n        <td colspan = \"2\">/v3/Contacts?$filter=PhoneNumber eq\n'1234567890' and (contains(FullName, 'Management Team'))</td>\n    </tr>\n</tbody> </table> </div>\n",
                "operationId": "getAllContacts",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetContacts"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    },
                                    "Unsupported Orderby Property": {
                                        "$ref": "#/components/examples/$Orderby_Unsupported_Property"
                                    },
                                    "$top limit exceeded": {
                                        "$ref": "#/components/examples/Limit_Exceeded_Top"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Contacts"
                ],
                "summary": "Creates a new Contact",
                "description": "Use the <code>POST</code> method on this endpoint to create a new Contact in your tenant.\n",
                "operationId": "createContact",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseCreateContact"
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#Contacts/KarbonService.ContactDTO/$entity",
                                    "@odata.type": "#KarbonService.ContactDTO",
                                    "ContactKey": "67zlxNyJSr8e",
                                    "FirstName": "William",
                                    "MiddleName": "John",
                                    "LastName": "Connor",
                                    "PreferredName": "Bill",
                                    "Salutation": "Mr",
                                    "Suffix": "Jr.",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Client",
                                    "UserDefinedIdentifier": "BILLJR",
                                    "RestrictionLevel": "Public",
                                    "AvatarUrl": "https://az.karbonemail.com/images/e4ae96c1-8d17-4c6e-af8a-8040482176fc",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "EntityDescription": {
                                        "Text": "Birthday on June 23."
                                    },
                                    "AccountingDetails": {
                                        "ContactPermaKey": "4XHEn8T3J4Y6",
                                        "OrganizationPermaKey": null,
                                        "BirthDate": "1969-08-05T00:00:00Z",
                                        "DeathDate": null,
                                        "Salutation": "Mr",
                                        "Sex": "M",
                                        "FinancialYearEndDay": 8,
                                        "FinancialYearEndMonth": 30,
                                        "IncorporationDate": null,
                                        "IncorporationState": null,
                                        "LegalName": null,
                                        "LineOfBusiness": null,
                                        "EntityType": null,
                                        "TaxCountryCode": "US",
                                        "TradingName": null,
                                        "AnnualRevenue": null,
                                        "BaseCurrency": null,
                                        "GstBasis": null,
                                        "GstPeriod": null,
                                        "IncomeTaxInstallmentPeriod": "Yearly",
                                        "IsVATRegistered": null,
                                        "OrganizationValuation": null,
                                        "PaysTax": null,
                                        "PrepareGST": null,
                                        "ProvisionaTaxBasic": null,
                                        "ProvisionalTaxRatio": null,
                                        "RevenueModel": null,
                                        "SalesTaxBasis": null,
                                        "SalesTaxPeriod": null,
                                        "Sells": null,
                                        "RegistrationNumbers": {
                                            "RegistrationNumber": "12-3456789",
                                            "Type": "Social Security Number (SSN)"
                                        },
                                        "Notes": {
                                            "Body": "This is a sample note text.",
                                            "Type": "Basic"
                                        }
                                    },
                                    "BusinessCards": {
                                        "BusinessCardKey": "2tBHyXtJBxBy",
                                        "IsPrimaryCard": true,
                                        "WebSites": [
                                            "www.website.one",
                                            "www.website.two"
                                        ],
                                        "EmailAddresses": [
                                            "sample@example.com",
                                            "sample.two@example.com"
                                        ],
                                        "OrganizationKey": "ZGNmtYyLm4z",
                                        "RoleOrTitle": "COO",
                                        "FacebookLink": "facebook.com/sampleName",
                                        "LinkedInLink": "linkedin.com/sampleName",
                                        "TwitterLink": "twitter.com/sampleName",
                                        "SkypeLink": "skype.com/sampleName",
                                        "Addresses": {
                                            "AddressKey": "e150a05a-2dea-4292-8bc8-03398c9384e4",
                                            "AddressLines": "45 Sample Street",
                                            "City": "Alexandria",
                                            "StateProvinceCounty": "NSW",
                                            "ZipCode": "2015",
                                            "CountryCode": "AU",
                                            "Label": "Physical"
                                        },
                                        "PhoneNumbers": {
                                            "PhoneNumberKey": "6e0b9ace-24b1-4328-a922-3b8be5ef5052",
                                            "Number": 1234567890,
                                            "CountryCode": 61,
                                            "Label": "Work"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "The endpoint URL to the newly created Contact.",
                                "schema": {
                                    "type": "string",
                                    "example": "https://api.karbonhq.com/v3/Contacts('9zgh8pk1dfL')/KarbonService.ContactDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Create_Data"
                                    },
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Update_Unsupported_Property"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Duplicate UDI": {
                                        "$ref": "#/components/examples/Duplicate_UDI"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateContact"
                            }
                        }
                    }
                }
            }
        },
        "/v3/Contacts/GetContactByUserDefinedIdentifier(UserDefinedIdentifier='{UserDefinedIdentifier}')": {
            "get": {
                "tags": [
                    "Contacts"
                ],
                "summary": "Gets a Contact using UserDefinedIdentifier",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "UserDefinedIdentifier",
                        "schema": {
                            "type": "string",
                            "example": "BILLJR"
                        },
                        "description": "A unique identifier that you had created to identify this Contact. This parameter is <b>not</b> case sensitive."
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BusinessCards"
                            ],
                            "example": "BusinessCards"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will also return the Business Cards of the Contact.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Contact specified using the UserDefinedIdentifier.  <br><br>Using the query parameter available to this endpoint, you can also include Business Card details of the Contact in the response.\n",
                "operationId": "getClientGroupByUDI",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseCreateContact"
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#Contacts/KarbonService.ContactDTO/$entity",
                                    "@odata.type": "#KarbonService.ContactDTO",
                                    "ContactKey": "67zlxNyJSr8e",
                                    "FirstName": "William",
                                    "MiddleName": "John",
                                    "LastName": "Connor",
                                    "PreferredName": "Bill",
                                    "Salutation": "Mr",
                                    "Suffix": "Jr.",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Client",
                                    "UserDefinedIdentifier": "BILLJR",
                                    "RestrictionLevel": "Public",
                                    "AvatarUrl": "https://az.karbonemail.com/images/e4ae96c1-8d17-4c6e-af8a-8040482176fc",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "EntityDescription": {
                                        "Text": "Birthday on June 23."
                                    },
                                    "AccountingDetails": {
                                        "ContactPermaKey": "4XHEn8T3J4Y6",
                                        "OrganizationPermaKey": null,
                                        "BirthDate": "1969-08-05T00:00:00Z",
                                        "DeathDate": null,
                                        "Salutation": "Mr",
                                        "Sex": "M",
                                        "FinancialYearEndDay": 8,
                                        "FinancialYearEndMonth": 30,
                                        "IncorporationDate": null,
                                        "IncorporationState": null,
                                        "LegalName": null,
                                        "LineOfBusiness": null,
                                        "EntityType": null,
                                        "TaxCountryCode": "US",
                                        "TradingName": null,
                                        "AnnualRevenue": null,
                                        "BaseCurrency": null,
                                        "GstBasis": null,
                                        "GstPeriod": null,
                                        "IncomeTaxInstallmentPeriod": "Quaterly",
                                        "IsVATRegistered": null,
                                        "OrganizationValuation": null,
                                        "PaysTax": null,
                                        "PrepareGST": null,
                                        "ProvisionaTaxBasic": null,
                                        "ProvisionalTaxRatio": null,
                                        "RevenueModel": null,
                                        "SalesTaxBasis": null,
                                        "SalesTaxPeriod": null,
                                        "Sells": null,
                                        "RegistrationNumbers": {
                                            "RegistrationNumber": "12-3456789",
                                            "Type": "Social Security Number (SSN)"
                                        },
                                        "Notes": {
                                            "Body": "This is a sample note text.",
                                            "Type": "Basic"
                                        }
                                    },
                                    "BusinessCards": {
                                        "BusinessCardKey": "2tBHyXtJBxBy",
                                        "IsPrimaryCard": true,
                                        "WebSites": [
                                            "www.website.one",
                                            "www.website.two"
                                        ],
                                        "EmailAddresses": [
                                            "sample@example.com",
                                            "sample.two@example.com"
                                        ],
                                        "OrganizationKey": "ZGNmtYyLm4z",
                                        "RoleOrTitle": "COO",
                                        "FacebookLink": "facebook.com/sampleName",
                                        "LinkedInLink": "linkedin.com/sampleName",
                                        "TwitterLink": "twitter.com/sampleName",
                                        "SkypeLink": "skype.com/sampleName",
                                        "Addresses": {
                                            "AddressKey": "e150a05a-2dea-4292-8bc8-03398c9384e4",
                                            "AddressLines": "45 Sample Street",
                                            "City": "Alexandria",
                                            "StateProvinceCounty": "NSW",
                                            "ZipCode": "2015",
                                            "CountryCode": "AU",
                                            "Label": "Physical"
                                        },
                                        "PhoneNumbers": {
                                            "PhoneNumberKey": "6e0b9ace-24b1-4328-a922-3b8be5ef5052",
                                            "Number": 1234567890,
                                            "CountryCode": 61,
                                            "Label": "Work"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "UDI Is Empty": {
                                        "$ref": "#/components/examples/UDI_Is_Empty"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "UDI Not Found": {
                                        "$ref": "#/components/examples/UDI_Not_Found_Contact"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Contacts/{Contactkey}": {
            "get": {
                "tags": [
                    "Contacts"
                ],
                "summary": "Gets a Contact using Contactkey",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "Contactkey",
                        "schema": {
                            "type": "string",
                            "example": "4jgPTtcXxwC2"
                        },
                        "description": "The Karbon-generated Contact key"
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BusinessCards"
                            ],
                            "example": "BusinessCards"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will also return Business Card of the Contact.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Contact specified using the <code>Contactkey</code>.  <br><br>Using the query parameter available to this endpoint,  you can also include the Business Card details of the Contacts in the response.\n",
                "operationId": "getContactByID",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseCreateContact"
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#Contacts/KarbonService.ContactDTO/$entity",
                                    "@odata.type": "#KarbonService.ContactDTO",
                                    "ContactKey": "67zlxNyJSr8e",
                                    "FirstName": "William",
                                    "MiddleName": "John",
                                    "LastName": "Connor",
                                    "PreferredName": "Bill",
                                    "Salutation": "Mr",
                                    "Suffix": "Jr.",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Client",
                                    "UserDefinedIdentifier": "BILLJR",
                                    "RestrictionLevel": "Public",
                                    "AvatarUrl": "https://az.karbonemail.com/images/e4ae96c1-8d17-4c6e-af8a-8040482176fc",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "EntityDescription": {
                                        "Text": "Birthday on June 23."
                                    },
                                    "AccountingDetails": {
                                        "ContactPermaKey": "4XHEn8T3J4Y6",
                                        "OrganizationPermaKey": null,
                                        "BirthDate": "1969-08-05T00:00:00Z",
                                        "DeathDate": null,
                                        "Salutation": "Mr",
                                        "Sex": "M",
                                        "FinancialYearEndDay": 8,
                                        "FinancialYearEndMonth": 30,
                                        "IncorporationDate": null,
                                        "IncorporationState": null,
                                        "LegalName": null,
                                        "LineOfBusiness": null,
                                        "EntityType": null,
                                        "TaxCountryCode": "US",
                                        "TradingName": null,
                                        "AnnualRevenue": null,
                                        "BaseCurrency": null,
                                        "GstBasis": null,
                                        "GstPeriod": null,
                                        "IncomeTaxInstallmentPeriod": "Quaterly",
                                        "IsVATRegistered": null,
                                        "OrganizationValuation": null,
                                        "PaysTax": null,
                                        "PrepareGST": null,
                                        "ProvisionaTaxBasic": null,
                                        "ProvisionalTaxRatio": null,
                                        "RevenueModel": null,
                                        "SalesTaxBasis": null,
                                        "SalesTaxPeriod": null,
                                        "Sells": null,
                                        "RegistrationNumbers": {
                                            "RegistrationNumber": "12-3456789",
                                            "Type": "Social Security Number (SSN)"
                                        },
                                        "Notes": {
                                            "Body": "This is a sample note text.",
                                            "Type": "Basic"
                                        }
                                    },
                                    "BusinessCards": {
                                        "BusinessCardKey": "2tBHyXtJBxBy",
                                        "IsPrimaryCard": true,
                                        "WebSites": [
                                            "www.website.one",
                                            "www.website.two"
                                        ],
                                        "EmailAddresses": [
                                            "sample@example.com",
                                            "sample.two@example.com"
                                        ],
                                        "OrganizationKey": "ZGNmtYyLm4z",
                                        "RoleOrTitle": "COO",
                                        "FacebookLink": "facebook.com/sampleName",
                                        "LinkedInLink": "linkedin.com/sampleName",
                                        "TwitterLink": "twitter.com/sampleName",
                                        "SkypeLink": "skype.com/sampleName",
                                        "Addresses": {
                                            "AddressKey": "e150a05a-2dea-4292-8bc8-03398c9384e4",
                                            "AddressLines": "45 Sample Street",
                                            "City": "Alexandria",
                                            "StateProvinceCounty": "NSW",
                                            "ZipCode": "2015",
                                            "CountryCode": "AU",
                                            "Label": "Physical"
                                        },
                                        "PhoneNumbers": {
                                            "PhoneNumberKey": "6e0b9ace-24b1-4328-a922-3b8be5ef5052",
                                            "Number": 1234567890,
                                            "CountryCode": 61,
                                            "Label": "Work"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Update_Unsupported_Property"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ContactKey_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Contacts"
                ],
                "summary": "Updates a Contact (Full)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "Contactkey",
                        "schema": {
                            "type": "string",
                            "example": "4t8LbR1QcbGS"
                        },
                        "description": "The Karbon-generated Contact key"
                    }
                ],
                "description": "Use the <code>PUT</code> method on this endpoint to update full details of a Contact specified using the <code>Contactkey</code>.  <br><br>Using the query parameter available to this endpoint, you can also update the Business Card details of the Contact.\n",
                "operationId": "putContactByID",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Update_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Non existent Key": {
                                        "$ref": "#/components/examples/Shortened_5001"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateContact"
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Contacts"
                ],
                "summary": "Updates a Contact (Partial)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "Contactkey",
                        "schema": {
                            "type": "string",
                            "example": "4t8LbR1QcbGS"
                        },
                        "description": "The Karbon-generated Contact key"
                    }
                ],
                "description": "Use the <code>PATCH</code> method on this endpoint to update partial details of a Contact specified using the <code>Contactkey</code>.  <br><br>This method <b>only supports</b> editing the <code>FirstName</code>, <code>MiddleName</code>, <code>LastName</code>, <code>PreferredName</code>, <code>Salutation</code> and <code>Suffix</code> properties. \n",
                "operationId": "patchContactsByID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "@odata.context": {
                                            "type": "string",
                                            "description": "The information about Karbon controllers generating this response."
                                        },
                                        "@odata.type": {
                                            "type": "string",
                                            "description": "The information about Karbon Objects generating this reponse."
                                        },
                                        "ContactKey": {
                                            "type": "string",
                                            "description": "A Karbon-generated value that is used to identify the Contact"
                                        },
                                        "FirstName": {
                                            "type": "string",
                                            "description": "The first name of the Contact"
                                        },
                                        "MiddleName": {
                                            "type": "string",
                                            "description": "The middle name of the Contact"
                                        },
                                        "LastName": {
                                            "type": "string",
                                            "description": "The last name of the Contact"
                                        },
                                        "PreferredName": {
                                            "type": "string",
                                            "description": "The preferred name of the Contact"
                                        },
                                        "Salutation": {
                                            "type": "string",
                                            "description": "The title to address the Contact"
                                        },
                                        "Suffix": {
                                            "type": "string",
                                            "description": "The suffix of the Contact"
                                        },
                                        "ClientOwner": {
                                            "type": "string",
                                            "description": "The team member in your firm who looks after client relationship or is responsible for the vast majority of the work of the Contact. You can only use the UserKey or the email address of an existing team member."
                                        },
                                        "ClientManager": {
                                            "type": "string",
                                            "description": "The team member in your firm who manages the work for Contact. You can only use the UserKey or the email address of an existing team member.",
                                            "example": "jessica.tse@samplecompany.com"
                                        },
                                        "ContactType": {
                                            "type": "string",
                                            "description": "The Contact Type for this Contact. You can only use existing Contact Type."
                                        },
                                        "UserDefinedIdentifier": {
                                            "type": "string",
                                            "description": "A unique key that you can create to identify this Contact."
                                        },
                                        "RestrictionLevel": {
                                            "type": "string",
                                            "description": "The privacy level for this Client Group. <br> <ul><li>Public Client Groups can be managed by anyone in the firm</li> <li>Private Client Groups can only be managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team). Basic details (name of the Contacts and the Work Items) related to such Client Groups are visible to anyone in the firm.</li> <li>Hidden Client Groups are only be visible to and managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team).</li>\n",
                                            "example": "Public",
                                            "default": "Public",
                                            "enum": [
                                                "Public",
                                                "Private",
                                                "Hidden"
                                            ]
                                        },
                                        "AvatarUrl": {
                                            "type": "string",
                                            "description": "The URL to the Contact's avatar"
                                        },
                                        "LastModifiedDateTime": {
                                            "type": "string",
                                            "format": "UTC",
                                            "description": "The date and time at which this Contact was last modified."
                                        },
                                        "EntityDescription": {
                                            "type": "object",
                                            "properties": {
                                                "Text": {
                                                    "type": "string",
                                                    "description": "Free-form text that can be used to add more information about the Client Group"
                                                }
                                            }
                                        },
                                        "AccountingDetails": {
                                            "nullable": true,
                                            "type": "string",
                                            "description": "The accounting details associated with the Client Group. This property will be <code>null</code>."
                                        }
                                    }
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#Contacts/KarbonService.ContactDTO/$entity",
                                    "@odata.type": "#KarbonService.ContactDTO",
                                    "ContactKey": "67zlxNyJSr8e",
                                    "FirstName": "William",
                                    "MiddleName": "John",
                                    "LastName": "Connor",
                                    "PreferredName": "Bill",
                                    "Salutation": "Mr",
                                    "Suffix": "Jr.",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Client",
                                    "UserDefinedIdentifier": "BILLJR",
                                    "RestrictionLevel": "Public",
                                    "AvatarUrl": "https://az.karbonemail.com/images/e4ae96c1-8d17-4c6e-af8a-8040482176fc",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "EntityDescription": {
                                        "Text": "Birthday on June 23."
                                    },
                                    "AccountingDetails": null
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Update_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Invalid Property": {
                                        "$ref": "#/components/examples/Invalid_Property"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Non existent Key": {
                                        "$ref": "#/components/examples/Shortened_5001"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "FirstName": {
                                        "type": "string",
                                        "description": "The first name of the Contact",
                                        "example": "William"
                                    },
                                    "MiddleName": {
                                        "type": "string",
                                        "description": "The middle name of the Contact",
                                        "example": "John"
                                    },
                                    "LastName": {
                                        "type": "string",
                                        "description": "The last name of the Contact",
                                        "example": "Connor"
                                    },
                                    "PreferredName": {
                                        "type": "string",
                                        "description": "The preferred name of the Contact",
                                        "example": "Bill"
                                    },
                                    "Salutation": {
                                        "type": "string",
                                        "description": "The title to address the Contact",
                                        "example": "Mr"
                                    },
                                    "Suffix": {
                                        "type": "string",
                                        "description": "The suffix of the Contact",
                                        "example": "Jr."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/EstimateSummaries/{WorkItemkey}": {
            "get": {
                "tags": [
                    "Estimate Summaries"
                ],
                "summary": "Gets estimate summaries using WorkItemkey",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "WorkItemkey",
                        "schema": {
                            "type": "string",
                            "example": "4jgPTtcXxwC2"
                        },
                        "description": "The Karbon-generated Work Item key"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the estimate summaries of a Work Item specified using the <code>WorkItemkey</code>. \n",
                "operationId": "getEstimateSummariesByWorkItemKey",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "@odata.context": {
                                            "type": "string",
                                            "description": "The information about Karbon controllers generating this response.",
                                            "example": "https://api.karbonhq.com/v3/$metadata#EstimateSummaries"
                                        },
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "EstimateSummaryKey": {
                                                        "type": "string",
                                                        "description": "A randomly generated GUID",
                                                        "example": "160F79F6-E650-40C3-8BD9-F70C287B7476-0"
                                                    },
                                                    "UserKey": {
                                                        "type": "string",
                                                        "description": "A Karbon-generated unique identifier for the Karbon user",
                                                        "example": "RXq4mB32PXg"
                                                    },
                                                    "RoleKey": {
                                                        "type": "string",
                                                        "description": "A Karbon-generated unique identifier for the user's role",
                                                        "example": "qTLmJpG85Ng"
                                                    },
                                                    "RoleName": {
                                                        "type": "string",
                                                        "description": "The Role of the user",
                                                        "example": "Accountant"
                                                    },
                                                    "TaskTypeKey": {
                                                        "type": "string",
                                                        "description": "A Karbon-generated unique identifier for the task",
                                                        "example": "3h5Tbh9GgLs7"
                                                    },
                                                    "TaskTypeName": {
                                                        "type": "string",
                                                        "description": "The name of the task",
                                                        "example": "Admin"
                                                    },
                                                    "EstimateMinutes": {
                                                        "type": "integer",
                                                        "description": "The total estimated time (in minutes) for the task to be completed",
                                                        "example": 15
                                                    },
                                                    "HourlyRate": {
                                                        "type": "number",
                                                        "format": "decimal",
                                                        "description": "The hourly rate of the user",
                                                        "example": 150
                                                    },
                                                    "ActualMinutes": {
                                                        "type": "integer",
                                                        "description": "The actual time (in minutes) spent on the task",
                                                        "example": 14
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Files": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Uploads and links a file",
                "description": "Use the <code>POST</code> method on this endpoint to upload and link a file to an entity in your tenant. <br><br><div style = \"border-block: 1px solid #fc7f03; padding:5px;\"> Note that this endpoint <b>only supports uploading files from the local network</b> but not from the web. </div>\n",
                "operationId": "createFile",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "@odata.context": {
                                            "type": "string",
                                            "description": "The information about Karbon controllers generating this response.",
                                            "example": "https://api.karbonhq.com/v3/$metadata#Files/$entity"
                                        },
                                        "Id": {
                                            "type": "string",
                                            "description": "A Karbon-generated unique identifier for the file",
                                            "example": "3pBQbds529RW"
                                        },
                                        "Name": {
                                            "type": "string",
                                            "description": "The name of the file",
                                            "example": "ProposalName.pdf"
                                        },
                                        "MimeType": {
                                            "type": "string",
                                            "description": "The MIME type of valid media file as per RFC 6838. See a list of common MIME types [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types).",
                                            "example": "application/pdf"
                                        },
                                        "Size": {
                                            "type": "string",
                                            "description": "The size of the file (in bytes)",
                                            "example": 334565
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "The endpoint URL to the newly created file.",
                                "schema": {
                                    "type": "string",
                                    "example": "https://api.karbonhq.com/v3/Files('2S3RNjkR66Ln')"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported File Type": {
                                        "$ref": "#/components/examples/Unsupported_File_Type"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body. <br><br> In addition to the `file` property, at least one of the following properties is required. <ul> <li><code>contact_keys</code></li> <li><code>organization_keys</code></li> <li><code>client_group_keys</code></li> <li><code>workitem_keys</code></li> </ul>\n",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "file"
                                ],
                                "minProperties": 2,
                                "properties": {
                                    "FileName": {
                                        "type": "string",
                                        "description": "The name of the file",
                                        "example": "ProposalName.pdf"
                                    },
                                    "MimeType": {
                                        "type": "string",
                                        "description": "The MIME type of valid media file as per RFC 6838. See a list of common MIME types [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types).",
                                        "example": "application/pdf"
                                    },
                                    "contact_keys": {
                                        "type": "string",
                                        "description": "A Karbon-generated unique identifier for the Contact, which this file will be associated with",
                                        "example": "RXq4dB32PXg"
                                    },
                                    "organization_keys": {
                                        "type": "string",
                                        "description": "A Karbon-generated unique identifier for the Organization, which this file will be associated with",
                                        "example": "qTLmTpG85Ng"
                                    },
                                    "client_group_keys": {
                                        "type": "string",
                                        "description": "A Karbon-generated unique identifier for the Client Group, which this file will be associated with",
                                        "example": "3h5Tbh9RgLs7"
                                    },
                                    "Workitem_keys": {
                                        "type": "string",
                                        "description": "A Karbon-generated unique identifier for the Work Item, which this file will be associated with",
                                        "example": "RXq4mD62PXg"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The path of the file. Only works for file in your local computer."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Notes/{NoteID}": {
            "get": {
                "tags": [
                    "Notes"
                ],
                "summary": "Gets a Note using NoteID",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "NoteID",
                        "schema": {
                            "type": "string",
                            "example": "Tz3lJgXMPdy"
                        },
                        "description": "The Karbon-generated Note key"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the Note specified using the <code>NoteID</code>. \n",
                "operationId": "getNoteByNoteKey",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoteResponse"
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#Notes/$entity",
                                    "Id": "Tz3lJgXMPdy",
                                    "Subject": "Regarding New Proposal",
                                    "Body": "Amy, could you please submit the new Proposal for Acme Corp by this weekend?",
                                    "CreatedDate": "2022-07-11T02:16:06Z",
                                    "AuthorEmailAddress": "jessica@samplecompany.com",
                                    "AssigneeEmailAddress": "amy@samplecompany.com",
                                    "DueDate": "2022-07-16T02:16:06Z",
                                    "TodoDate": "2022-07-16T02:16:06Z",
                                    "Timelines": [
                                        {
                                            "EntityType": "WorkItem",
                                            "EntityKey": "2m6pSFxRzcF2"
                                        }
                                    ],
                                    "Comments": [
                                        {
                                            "CommentKey": "22145nBb4tLP",
                                            "CommentBody": "Hi Jess, Could you please share the template to the last proposal you created?",
                                            "CreatedDate": "2022-07-11T07:16:32Z",
                                            "AuthorEmailAddress": "jessica@samplecompany.com"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    },
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/Generic_Key_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Notes": {
            "post": {
                "tags": [
                    "Notes"
                ],
                "summary": "Creates a new Note",
                "description": "Use the <code>POST</code> method on this endpoint to create a new Note and associate it with a Karbon entity (e.g., WorkItem, Contact, Organization, or ClientGroup) in your tenant.\n",
                "operationId": "createNote",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoteResponse"
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#Notes/$entity",
                                    "Id": "Tz3lJgXMPdy",
                                    "Subject": "Regarding New Proposal",
                                    "Body": "Amy, could you please submit the new Proposal for Acme Corp by this weekend?",
                                    "CreatedDate": "2022-07-11T02:16:06Z",
                                    "AuthorEmailAddress": "jessica@samplecompany.com",
                                    "AssigneeEmailAddress": "amy@samplecompany.com",
                                    "DueDate": "2022-07-16T02:16:06Z",
                                    "TodoDate": "2022-07-16T02:16:06Z",
                                    "Timelines": [
                                        {
                                            "EntityType": "WorkItem",
                                            "EntityKey": "2m6pSFxRzcF2"
                                        }
                                    ],
                                    "Comments": []
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "The endpoint URL to the newly created Note.",
                                "schema": {
                                    "type": "string",
                                    "example": "https://api.karbonhq.com/v3/Notes('Tz3lJgXMPdy')"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    },
                                    "Payload Mising": {
                                        "$ref": "#/components/examples/Note_Payload_Mising"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Invalid Assignee Email Address": {
                                        "$ref": "#/components/examples/Missing_Assignee_Email_Address"
                                    },
                                    "Invalid Author Email Address": {
                                        "$ref": "#/components/examples/Invalid_Author_Email_Address"
                                    },
                                    "Missing Author Email Address": {
                                        "$ref": "#/components/examples/Missing_Author_Email_Address"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NoteRequest"
                            },
                            "example": {
                                "Subject": "Regarding New Proposal",
                                "Body": "Amy, could you please submit the new Proposal for Acme Corp by this weekend?",
                                "AuthorEmailAddress": "jessica@samplecompany.com",
                                "AssigneeEmailAddress": "amy@samplecompany.com",
                                "DueDate": "2022-07-16T02:16:06Z",
                                "TodoDate": "2022-07-16T02:16:06Z",
                                "Timelines": [
                                    {
                                        "EntityType": "WorkItem",
                                        "EntityKey": "2m6pSFxRzcF2"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/v3/Organizations": {
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Gets a list of Organizations",
                "parameters": [
                    {
                        "in": "query",
                        "name": "$filter",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FullName",
                                "EmailAddress"
                            ],
                            "example": "FullName eq 'Sample Company'"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a subset of the Organizations that satisfy the <code>$filter</code> expression. \n"
                    },
                    {
                        "in": "query",
                        "name": "$orderby",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FullName",
                                "LastModifiedDateTime"
                            ],
                            "default": "OrganizationKey",
                            "example": [
                                "FullName",
                                "FullName desc"
                            ]
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a list of Organizations, sorted by the available properties.\n"
                    },
                    {
                        "in": "query",
                        "name": "$top",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 100,
                            "example": 50
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return only the first N Organizations.\n"
                    },
                    {
                        "in": "query",
                        "name": "$skip",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return all but the first N Organizations.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive a paginated list of Organizations from your tenant.   Using the query parameters available to this endpoint,  you can also filter the list of Organizations by their full name, or email address.  <br><br>  <div style = \"border-block: 1px solid #fc7f03;\">  <b>Notes</b>  <ul>  <li>This endpoint returns a maximum of 100 Organizations at once.</li>  <li>If the query results in more than 100 Organizations, a link to the next set of the results will be given in the <code>@odata.nextLink</code> field of the response.</li>  <li>The <code>$filter</code> query parameter supports 2 logical operators - <code>eq</code> and <code>and</code> - and 2 properties to help you form an expression. Usage examples below</li> <table>\n    <thead>\n        <tr>\n            <th>Logical Operators</th>\n            <th>Purpose</th>\n            <th>FullName</th>\n            <th>EmailAddress</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>eq</td>\n            <td>Full-text search</td>\n            <td>/v3/Organizations?$filter=FullName eq 'Sample Company'</td>\n            <td>/v3/Organizations?$filter=EmailAddress eq 'info@samplecompany.com'</td>\n        </tr>\n        <tr>\n            <td>and</td>\n            <td>Combines properties</td>\n            <td colspan = \"2\">/v3/Organizations?$filter=FullName eq 'Sample Company' and EmailAddress eq 'info@samplecompany.com'</td>\n        </tr>                        \n    </tbody>\n</table> </div>\n",
                "operationId": "getAllOrganizations",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOrganizations"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    },
                                    "Unsupported Orderby Property": {
                                        "$ref": "#/components/examples/$Orderby_Unsupported_Property"
                                    },
                                    "$top limit exceeded": {
                                        "$ref": "#/components/examples/Limit_Exceeded_Top"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Creates a new Organization",
                "description": "Use the <code>POST</code> method on this endpoint to create a new Organization in your tenant.\n",
                "operationId": "createOrganization",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateOrganizationResponse"
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#Organizations/KarbonService.OrganizationDTO/$entity",
                                    "@odata.type": "#KarbonService.OrganizationDTO",
                                    "OrganizationKey": "2Nw8tnxwQCVf",
                                    "FullName": "Sample Company",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Prospect",
                                    "UserDefinedIdentifier": "SAMPLECO",
                                    "RestrictionLevel": "Public",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "EntityDescription": {
                                        "Text": "John Doe is the Managing Director of this organization."
                                    },
                                    "AccountingDetails": {
                                        "ContactPermaKey": null,
                                        "OrganizationPermaKey": "2Nw8tnxwQCVf",
                                        "BirthDate": null,
                                        "DeathDate": null,
                                        "Salutation": null,
                                        "Sex": null,
                                        "FinancialYearEndDay": 11,
                                        "FinancialYearEndMonth": 2,
                                        "IncorporationDate": "2021-05-16T00:00:00Z",
                                        "IncorporationState": "New South Wales",
                                        "LegalName": "Sample Company Pty. Ltd.",
                                        "LineOfBusiness": "Fast Fashion",
                                        "EntityType": "Partnership",
                                        "TaxCountryCode": "AU",
                                        "TradingName": null,
                                        "AnnualRevenue": 6000000.5,
                                        "BaseCurrency": null,
                                        "GstBasis": "Invoice",
                                        "GstPeriod": "Monthly",
                                        "IncomeTaxInstallmentPeriod": "Quarterly",
                                        "IsVATRegistered": null,
                                        "OrganizationValuation": null,
                                        "PaysTax": null,
                                        "PrepareGST": null,
                                        "ProvisionaTaxBasic": null,
                                        "ProvisionalTaxRatio": null,
                                        "RevenueModel": "Markup",
                                        "SalesTaxBasis": null,
                                        "SalesTaxPeriod": null,
                                        "Sells": "Products",
                                        "RegistrationNumbers": [
                                            {
                                                "RegistrationNumber": "444 333 222",
                                                "Type": "Australian Company Number (ACN)"
                                            },
                                            {
                                                "RegistrationNumber": "444 353 222",
                                                "Type": "Australian Business Number (ABN)"
                                            }
                                        ],
                                        "Notes": {
                                            "Body": "This is a sample note text.",
                                            "Type": "Basic"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "The endpoint URL to the newly created Organization.",
                                "schema": {
                                    "type": "string",
                                    "example": "https://api.karbonhq.com/v3/Organizations('2Nw8tnxwQCVf')/KarbonService.OrganizationDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Duplicate UDI": {
                                        "$ref": "#/components/examples/Duplicate_UDI"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrganization"
                            },
                            "example": {
                                "FullName": "Sample Company",
                                "ClientOwner": "rodney.muller@samplecompany.com",
                                "ClientManager": "jessica.tse@samplecompany.com",
                                "ContactType": "Prospect",
                                "UserDefinedIdentifier": "SAMPLECO",
                                "EntityDescription": {
                                    "Text": "John Doe is the Managing Director of this organization."
                                },
                                "AccountingDetails": {
                                    "ContactPermaKey": null,
                                    "OrganizationPermaKey": "2Nw8tnxwQCVf",
                                    "BirthDate": null,
                                    "DeathDate": null,
                                    "Salutation": null,
                                    "Sex": null,
                                    "FinancialYearEndDay": 11,
                                    "FinancialYearEndMonth": 2,
                                    "IncorporationDate": "2021-05-16T00:00:00Z",
                                    "IncorporationState": "New South Wales",
                                    "LegalName": "Sample Company Pty. Ltd.",
                                    "LineOfBusiness": "Fast Fashion",
                                    "EntityType": "Partnership",
                                    "TaxCountryCode": "AU",
                                    "TradingName": null,
                                    "AnnualRevenue": 6000000.5,
                                    "BaseCurrency": null,
                                    "GstBasis": "Invoice",
                                    "GstPeriod": "Monthly",
                                    "IncomeTaxInstallmentPeriod": "Quarterly",
                                    "IsVATRegistered": null,
                                    "OrganizationValuation": null,
                                    "PaysTax": null,
                                    "PrepareGST": null,
                                    "ProvisionaTaxBasic": null,
                                    "ProvisionalTaxRatio": null,
                                    "RevenueModel": "Markup",
                                    "SalesTaxBasis": null,
                                    "SalesTaxPeriod": null,
                                    "Sells": "Products",
                                    "RegistrationNumbers": [
                                        {
                                            "RegistrationNumber": "444 333 222",
                                            "Type": "Australian Company Number (ACN)"
                                        },
                                        {
                                            "RegistrationNumber": "444 353 222",
                                            "Type": "Australian Business Number (ABN)"
                                        }
                                    ],
                                    "Notes": {
                                        "Body": "This is a sample note text.",
                                        "Type": "Basic"
                                    }
                                },
                                "BusinessCards": [
                                    {
                                        "BusinessCardKey": "2tBHyXtJBxBy",
                                        "IsPrimaryCard": true,
                                        "WebSites": [
                                            "www.website.one",
                                            "www.website.two"
                                        ],
                                        "EmailAddresses": [
                                            "sample@example.com",
                                            "sample.two@example.com"
                                        ],
                                        "OrganizationKey": "ZGNmtYyLm4z",
                                        "RoleOrTitle": "COO",
                                        "FacebookLink": "facebook.com/sampleName",
                                        "LinkedInLink": "linkedin.com/sampleName",
                                        "TwitterLink": "twitter.com/sampleName",
                                        "SkypeLink": "skype.com/sampleName",
                                        "Addresses": {
                                            "AddressKey": "e150a05a-2dea-4292-8bc8-03398c9384e4",
                                            "AddressLines": "45 Sample Street",
                                            "City": "Alexandria",
                                            "StateProvinceCounty": "NSW",
                                            "ZipCode": "2015",
                                            "CountryCode": "AU",
                                            "Label": "Physical"
                                        },
                                        "PhoneNumbers": {
                                            "PhoneNumberKey": "6e0b9ace-24b1-4328-a922-3b8be5ef5052",
                                            "Number": "1234567890",
                                            "CountryCode": "61",
                                            "Label": "Work"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/v3/Organizations/GetOrganizationByUserDefinedIdentifier(UserDefinedIdentifier='{UserDefinedIdentifier}')": {
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Gets an Organization using UserDefinedIdentifier",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "UserDefinedIdentifier",
                        "schema": {
                            "type": "string",
                            "example": "SAMPLECO"
                        },
                        "description": "A unique identifier that you had created to identify this Organization. This parameter is <b>not</b> case sensitive."
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BusinessCards"
                            ],
                            "example": "BusinessCards"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will also return the Business Cards of the Contact Organization.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Organization specified using the UserDefinedIdentifier.  <br><br>Using the query parameter available to this endpoint, you can also include Business Card details of the Organization in the response.\n",
                "operationId": "getOrganizationByUDI",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WithBusinessCardsCreateOrganizationResponse"
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#Organizations/KarbonService.OrganizationDTO/$entity",
                                    "@odata.type": "#KarbonService.OrganizationDTO",
                                    "OrganizationKey": "2Nw8tnxwQCVf",
                                    "FullName": "Sample Company",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Prospect",
                                    "UserDefinedIdentifier": "SAMPLECO",
                                    "RestrictionLevel": "Public",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "EntityDescription": {
                                        "Text": "John Doe is the Managing Director of this organization."
                                    },
                                    "AccountingDetails": {
                                        "ContactPermaKey": null,
                                        "OrganizationPermaKey": "2Nw8tnxwQCVf",
                                        "BirthDate": null,
                                        "DeathDate": null,
                                        "Salutation": null,
                                        "Sex": null,
                                        "FinancialYearEndDay": 11,
                                        "FinancialYearEndMonth": 2,
                                        "IncorporationDate": "2021-05-16T00:00:00Z",
                                        "IncorporationState": "New South Wales",
                                        "LegalName": "Sample Company Pty. Ltd.",
                                        "LineOfBusiness": "Fast Fashion",
                                        "EntityType": "Partnership",
                                        "TaxCountryCode": "AU",
                                        "TradingName": null,
                                        "AnnualRevenue": 6000000.5,
                                        "BaseCurrency": null,
                                        "GstBasis": "Invoice",
                                        "GstPeriod": "Monthly",
                                        "IncomeTaxInstallmentPeriod": "Quarterly",
                                        "IsVATRegistered": null,
                                        "OrganizationValuation": null,
                                        "PaysTax": null,
                                        "PrepareGST": null,
                                        "ProvisionaTaxBasic": null,
                                        "ProvisionalTaxRatio": null,
                                        "RevenueModel": "Markup",
                                        "SalesTaxBasis": null,
                                        "SalesTaxPeriod": null,
                                        "Sells": "Products",
                                        "RegistrationNumbers": [
                                            {
                                                "RegistrationNumber": "444 333 222",
                                                "Type": "Australian Company Number (ACN)"
                                            },
                                            {
                                                "RegistrationNumber": "444 353 222",
                                                "Type": "Australian Business Number (ABN)"
                                            }
                                        ],
                                        "Notes": {
                                            "Body": "This is a sample note text.",
                                            "Type": "Basic"
                                        }
                                    },
                                    "BusinessCards": [
                                        {
                                            "BusinessCardKey": "PVvnQdX1RCH",
                                            "IsPrimaryCard": true,
                                            "WebSites": [
                                                "www.website.one",
                                                "www.website.two"
                                            ],
                                            "EmailAddresses": [
                                                "sample@example.com",
                                                "sample.two@example.com"
                                            ],
                                            "OrganizationKey": null,
                                            "RoleOrTitle": null,
                                            "FacebookLink": "facebook.com/samplecompany",
                                            "LinkedInLink": "linkedin.com/samplecompany",
                                            "TwitterLink": "twitter.com/samplecompany",
                                            "SkypeLink": "skype.com/samplecompany",
                                            "Addresses": {
                                                "AddressKey": "e150a05a-2dea-4292-8bc8-03398c9384e4",
                                                "AddressLines": "45 Sample Street",
                                                "City": "Alexandria",
                                                "StateProvinceCounty": "NSW",
                                                "ZipCode": "2015",
                                                "CountryCode": "AU",
                                                "Label": "Physical"
                                            },
                                            "PhoneNumbers": {
                                                "PhoneNumberKey": "6e0b9ace-24b1-4328-a922-3b8be5ef5052",
                                                "Number": 1234567890,
                                                "CountryCode": 61,
                                                "Label": "Work"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "UDI Is Empty": {
                                        "$ref": "#/components/examples/UDI_Is_Empty"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "UDI Not Found": {
                                        "$ref": "#/components/examples/UDI_Not_Found_Organization"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Organizations/{Organizationkey}": {
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Gets an Organization using Organizationkey",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "Organizationkey",
                        "schema": {
                            "type": "string",
                            "example": "2Nw8tnxwQCVf"
                        },
                        "description": "The Karbon-generated Organization key"
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "BusinessCards",
                                "Contacts"
                            ],
                            "example": "BusinessCards,Contacts"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will also return Business Cards and Contacts associated with the Organization.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Organization specified using the <code>Organizationkey</code>.<br><br>Using the query parameter available to this endpoint,  you can also include the Business Card details of the Organization in the response.\n",
                "operationId": "getOrganizationByID",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/WithBusinessCardsCreateOrganizationResponse"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "Contacts": {
                                                    "$ref": "#/components/schemas/ContactsCardOrganization"
                                                }
                                            }
                                        }
                                    ]
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#Organizations/KarbonService.OrganizationDTO/$entity",
                                    "@odata.type": "#KarbonService.OrganizationDTO",
                                    "OrganizationKey": "2Nw8tnxwQCVf",
                                    "FullName": "Sample Company",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Prospect",
                                    "UserDefinedIdentifier": "SAMPLECO",
                                    "RestrictionLevel": "Public",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "EntityDescription": {
                                        "Text": "John Doe is the Managing Director of this organization."
                                    },
                                    "AccountingDetails": {
                                        "ContactPermaKey": null,
                                        "OrganizationPermaKey": "2Nw8tnxwQCVf",
                                        "BirthDate": null,
                                        "DeathDate": null,
                                        "Salutation": null,
                                        "Sex": null,
                                        "FinancialYearEndDay": 11,
                                        "FinancialYearEndMonth": 2,
                                        "IncorporationDate": "2021-05-16T00:00:00Z",
                                        "IncorporationState": "New South Wales",
                                        "LegalName": "Sample Company Pty. Ltd.",
                                        "LineOfBusiness": "Fast Fashion",
                                        "EntityType": "Partnership",
                                        "TaxCountryCode": "AU",
                                        "TradingName": null,
                                        "AnnualRevenue": 6000000.5,
                                        "BaseCurrency": null,
                                        "GstBasis": "Invoice",
                                        "GstPeriod": "Monthly",
                                        "IncomeTaxInstallmentPeriod": "Quarterly",
                                        "IsVATRegistered": null,
                                        "OrganizationValuation": null,
                                        "PaysTax": null,
                                        "PrepareGST": null,
                                        "ProvisionaTaxBasic": null,
                                        "ProvisionalTaxRatio": null,
                                        "RevenueModel": "Markup",
                                        "SalesTaxBasis": null,
                                        "SalesTaxPeriod": null,
                                        "Sells": "Products",
                                        "RegistrationNumbers": [
                                            {
                                                "RegistrationNumber": "444 333 222",
                                                "Type": "Australian Company Number (ACN)"
                                            },
                                            {
                                                "RegistrationNumber": "444 353 222",
                                                "Type": "Australian Business Number (ABN)"
                                            }
                                        ],
                                        "Notes": {
                                            "Body": "This is a sample note text.",
                                            "Type": "Basic"
                                        }
                                    },
                                    "BusinessCards": [
                                        {
                                            "BusinessCardKey": "PVvnQdX1RCH",
                                            "IsPrimaryCard": true,
                                            "WebSites": [
                                                "www.website.one",
                                                "www.website.two"
                                            ],
                                            "EmailAddresses": [
                                                "sample@example.com",
                                                "sample.two@example.com"
                                            ],
                                            "OrganizationKey": null,
                                            "RoleOrTitle": null,
                                            "FacebookLink": "facebook.com/samplecompany",
                                            "LinkedInLink": "linkedin.com/samplecompany",
                                            "TwitterLink": "twitter.com/samplecompany",
                                            "SkypeLink": "skype.com/samplecompany",
                                            "Addresses": {
                                                "AddressKey": "e150a05a-2dea-4292-8bc8-03398c9384e4",
                                                "AddressLines": "45 Sample Street",
                                                "City": "Alexandria",
                                                "StateProvinceCounty": "NSW",
                                                "ZipCode": "2015",
                                                "CountryCode": "AU",
                                                "Label": "Physical"
                                            },
                                            "PhoneNumbers": {
                                                "PhoneNumberKey": "6e0b9ace-24b1-4328-a922-3b8be5ef5052",
                                                "Number": 1234567890,
                                                "CountryCode": 61,
                                                "Label": "Work"
                                            }
                                        }
                                    ],
                                    "Contacts": [
                                        {
                                            "ContactKey": "443pbkv8Vx3Y",
                                            "FullName": "Qutubuddin Musekhan",
                                            "PreferredName": "Qutub",
                                            "Salutation": "Dr",
                                            "ClientOwner": null,
                                            "ClientManager": null,
                                            "Address": null,
                                            "EmailAddress": "qutub@company.com",
                                            "PhoneNumber": "123-456-7890",
                                            "RoleOrTitle": "CIO",
                                            "UserDefinedIdentifier": "HD567",
                                            "LastModifiedDateTime": "2022-02-03T03:34:11Z"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    },
                                    "Unsupported Orderby Property": {
                                        "$ref": "#/components/examples/$Orderby_Unsupported_Property"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/Organization_Key_Not_Found_404"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Updates an Organization (Full)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "Organizationkey",
                        "schema": {
                            "type": "string",
                            "example": "2Nw8tnxwQCVf"
                        },
                        "description": "The Karbon-generated Organization key"
                    }
                ],
                "description": "Use the <code>PUT</code> method on this endpoint to update full details of a Organization specified using the <code>Organizationkey</code>. \n",
                "operationId": "putOrganizationByID",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Update_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/Organization_Key_Not_Found_400"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Non existent Key": {
                                        "$ref": "#/components/examples/Shortened_5001"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrganization"
                            },
                            "example": {
                                "FullName": "Sample Company",
                                "ClientOwner": "rodney.muller@samplecompany.com",
                                "ClientManager": "jessica.tse@samplecompany.com",
                                "ContactType": "Client",
                                "UserDefinedIdentifier": "SAMPLECO",
                                "EntityDescription": {
                                    "Text": "John Doe is the Managing Director of this organization."
                                },
                                "BusinessCards": {
                                    "BusinessCardKey": "2tBHyXtJBxBy",
                                    "IsPrimaryCard": true,
                                    "WebSites": [
                                        "www.website.one",
                                        "www.website.two"
                                    ],
                                    "EmailAddresses": [
                                        "sample@example.com",
                                        "sample.two@example.com"
                                    ],
                                    "OrganizationKey": "ZGNmtYyLm4z",
                                    "RoleOrTitle": null,
                                    "FacebookLink": "facebook.com/sampleName",
                                    "LinkedInLink": "linkedin.com/sampleName",
                                    "TwitterLink": "twitter.com/sampleName",
                                    "SkypeLink": "skype.com/sampleName",
                                    "Addresses": {
                                        "AddressKey": "e150a05a-2dea-4292-8bc8-03398c9384e4",
                                        "AddressLines": "45 Sample Street",
                                        "City": "Alexandria",
                                        "StateProvinceCounty": "NSW",
                                        "ZipCode": "2015",
                                        "CountryCode": "AU",
                                        "Label": "Physical"
                                    },
                                    "PhoneNumbers": {
                                        "PhoneNumberKey": "6e0b9ace-24b1-4328-a922-3b8be5ef5052",
                                        "Number": 1234567890,
                                        "CountryCode": 61,
                                        "Label": "Work"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Updates an Organization (Partial)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "Organizationkey",
                        "schema": {
                            "type": "string",
                            "example": "2Nw8tnxwQCVf"
                        },
                        "description": "The Karbon-generated Organization key"
                    }
                ],
                "description": "Use the <code>PATCH</code> method on this endpoint to update partial details of a Organization specified using the <code>Organizationkey</code>.  <br><br>This method <b>only supports</b> editing the <code>FullName</code> property. \n",
                "operationId": "patchOrganizationByID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "@odata.context": {
                                            "type": "string",
                                            "description": "The information about Karbon controllers generating this response."
                                        },
                                        "@odata.type": {
                                            "type": "string",
                                            "description": "The information about Karbon Objects generating this reponse."
                                        },
                                        "OrganizationKey": {
                                            "type": "string",
                                            "description": "A Karbon-generated value that is used to identify the Organization"
                                        },
                                        "FullName": {
                                            "type": "string",
                                            "description": "The full name of the Organization"
                                        },
                                        "ClientOwner": {
                                            "type": "string",
                                            "description": "The team member in your firm who looks after client relationship or is responsible for the vast majority of the work of the clients in this Organization. You can only use the UserKey or the email address of an existing team member."
                                        },
                                        "ClientManager": {
                                            "type": "string",
                                            "description": "The team member in your firm who manages the work for the clients in this Organization. You can only use the UserKey or the email address of an existing team member."
                                        },
                                        "ContactType": {
                                            "type": "string",
                                            "description": "The Contact Type for this Organization. You can only use existing Contact Type."
                                        },
                                        "UserDefinedIdentifier": {
                                            "type": "string",
                                            "description": "A unique key that you can create to identify this Organization."
                                        },
                                        "RestrictionLevel": {
                                            "type": "string",
                                            "description": "The privacy level for this Organization. <br> <ul><li>Public Organization can be managed by anyone in the firm</li> <li>Private Organization can only be managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team). Basic details (name of the Organization and the Work Items) related to such Organization are visible to anyone in the firm.</li> <li>Hidden Organization are only be visible to and managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team).</li>\n",
                                            "default": "Public",
                                            "enum": [
                                                "Public",
                                                "Private",
                                                "Hidden"
                                            ]
                                        },
                                        "LastModifiedDateTime": {
                                            "type": "string",
                                            "format": "UTC",
                                            "description": "The date and time at which this Contact was last modified.",
                                            "example": "2022-07-05T07:30:13.7188114Z"
                                        },
                                        "EntityDescription": {
                                            "type": "object",
                                            "properties": {
                                                "Text": {
                                                    "type": "string",
                                                    "description": "Free-form text that can be used to add more information about the Organization",
                                                    "example": "Birthday on June 23."
                                                }
                                            }
                                        },
                                        "AccountingDetails": {
                                            "type": "string",
                                            "nullable": true,
                                            "description": "The accounting details associated with the Client Group. This property will be <code>null</code>."
                                        }
                                    }
                                },
                                "example": {
                                    "@odata.context": "https://api.karbonhq.com/v3/$metadata#Organizations/KarbonService.OrganizationDTO/$entity",
                                    "@odata.type": "#KarbonService.OrganizationDTO",
                                    "OrganizationKey": "2Nw8tnxwQCVf",
                                    "FullName": "Sample Company",
                                    "ClientOwner": "rodney.muller@samplecompany.com",
                                    "ClientManager": "jessica.tse@samplecompany.com",
                                    "ContactType": "Prospect",
                                    "UserDefinedIdentifier": "SAMPLECO",
                                    "RestrictionLevel": "Public",
                                    "LastModifiedDateTime": "2022-07-05T07:30:13.7188114Z",
                                    "EntityDescription": {
                                        "Text": "John Doe is the Managing Director of this organization."
                                    },
                                    "AccountingDetails": null
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Update_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Invalid Property": {
                                        "$ref": "#/components/examples/Invalid_Property"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/ResourceNotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Non existent Key": {
                                        "$ref": "#/components/examples/Shortened_5001"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "FullName": {
                                        "type": "string",
                                        "description": "The full name of the Organization",
                                        "example": "Sample Company Pty. Ltd."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Timesheets": {
            "get": {
                "tags": [
                    "Timesheets"
                ],
                "summary": "Gets a list of Timesheets",
                "parameters": [
                    {
                        "in": "query",
                        "name": "$filter",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "StartDate",
                                "EndDate",
                                "UserKey",
                                "WorkItemKeys",
                                "Status"
                            ],
                            "example": "Status eq 'Draft'"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a subset of the Timesheets that satisfy the <code>$filter</code> expression. \n"
                    },
                    {
                        "in": "query",
                        "name": "$orderby",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "StartDate",
                                "EndDate"
                            ],
                            "default": "TimesheetKey",
                            "example": [
                                "StartDate",
                                "StartDate desc"
                            ]
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a list of Timesheets, sorted by the available properties.\n"
                    },
                    {
                        "in": "query",
                        "name": "$top",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 100,
                            "example": 50
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return only the first N Timesheets.\n"
                    },
                    {
                        "in": "query",
                        "name": "$skip",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return all but the first N Timesheets.\n"
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TimeEntries"
                            ],
                            "example": "TimeEntries"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will also return the Time Entries associated with the Timesheets.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive a paginated list of Timesheets from your tenant.  Using the query parameters available to this endpoint,  you can also filter the list of Timesheets by their StartDate,  EndDate, UserKey, WorkItemKeys, and Status.  <br><br>   <div style = \"border-block: 1px solid #fc7f03;\">   <b>Notes</b>   <ul>   <li>This endpoint returns a maximum of 100 Timesheets at once.</li>   <li>If the query results in more than 100 Timesheets, a link to the next set of the results will be given in the <code>@odata.nextLink</code> field of the response.</li>   <li>The <code>$filter</code> query parameter supports 8 logical operators, 3 functions and 6 properties to help you  form an expression. They are listed below with examples of usage.    <ul> <br>  <li> <b>Operators for DateTime properties</b> <table> <thead> <tr> <th>Logical Operators</th> <th>Purpose</th> <th>StartDate</th> <th>EndDate</th> </tr> </thead> <tbody> <tr> <td>eq</td> <td>Full-text search</td> <td>/v3/Timesheets?$filter=StartDate eq 2022-07-04T00:00:00Z</td> <td>/v3/Timesheets?$filter=EndDate eq 2022-07-17T00:00:00Z</td> </tr> <tr> <td>gt</td> <td>Greater than</td> <td>/v3/Timesheets?$filter=StartDate gt 2021-04-27T00:00:00Z</td> <td>/v3/Timesheets?$filter=EndDate gt 2021-06-21T00:00:00Z</td> </tr> <tr> <td>ge</td> <td>Greater than and equals</td> <td>/v3/Timesheets?$filter=StartDate ge 2021-04-27T00:00:00Z</td> <td>/v3/Timesheets?$filter=EndDate ge 2021-06-21T00:00:00Z</td> </tr> <tr> <td>lt</td> <td>Lesser than</td> <td>/v3/Timesheets?$filter=StartDate lt 2021-04-27T00:00:00Z</td> <td>/v3/Timesheets?$filter=EndDate lt 2021-06-21T00:00:00Z</td> </tr> <tr> <td>le</td> <td>Lesser than and equals</td> <td>/v3/Timesheets?$filter=StartDate le 2021-04-27T00:00:00Z</td> <td>/v3/Timesheets?$filter=EndDate le 2021-06-21T00:00:00Z</td> </tr> <tr> <td>and</td> <td>Combines properties</td> <td>/v3/Timesheets?$filter=StartDate gt 2021-04-27T00:00:00Z and StartDate lt 2021-06-27T00:00:00Z</td> <td>/v3/Timesheets?$filter=EndDate gt 2021-04-27T00:00:00Z and EndDate lt 2021-06-21T00:00:00Z</td> </tr> </tbody> </table> </li> <br> <li><b>Functions for DateTime properties</b><br><br> <table> <thead> <tr> <th>Functions</th> <th>StartDate</th> <th>EndDate</th> </tr> </thead> <tbody> <tr> <td>day</td> <td>/v3/Timesheets?$filter= day(StartDate) eq 4</td> <td>/v3/Timesheets?$filter=day(EndDate) eq 17</td> </tr> <tr> <td>month</td> <td>/v3/Timesheets?$filter= month(StartDate) eq 4</td> <td>/v3/Timesheets?$filter=month(EndDate) eq 8</td> </tr> <tr> <td>year</td> <td>/v3/Timesheets?$filter= year(StartDate) eq 2021</td> <td>/v3/Timesheets?$filter=year(EndDate) eq 2022</td> </tr> </tbody> </table> </li>  <br> <li><b>Operators for the rest of the properties</b><br><br> <table> <thead> <tr> <th>Logical Operators</th> <th>Purpose</th> <th>UserKey</th> <th>WorkItemKeys</th>\n <th>Status</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>eq</td>\n <td>Full-text search</td>\n <td>/v3/Timesheets?$filter=UserKey eq '2mYzTtly89Lq'</td>\n <td>/v3/Timesheets?$filter=WorkItemKeys/any(x: x eq '5mGnTfly34Rf')</td>\n <td>/v3/Timesheets?$filter=Status eq 'Draft'</td>\n </tr>\n <tr>\n <td>in</td>\n <td>Combines multiple ORs</td>\n <td>/v3/Timesheets?$filter=UserKey in ('2mYzTtly89Lq',  '2Qy48WVCRBcP' )</td>\n <td>/v3/Timesheets?$filter=WorkItemKeys/any(x: x in ('2m6pSFxRzcF2', '2y7H6dhQL7mD'))</td>\n <td>/v3/Timesheets?$filter=Status in ('Draft', 'Approved')</td>\n </tr>\n </tbody>\n </table>\n </li> \n </ul> \n </li> \n </ul> \n </div>\n",
                "operationId": "getAllTimesheets",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTimeSheets"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    },
                                    "Unsupported Orderby Property": {
                                        "$ref": "#/components/examples/$Orderby_Unsupported_Property"
                                    },
                                    "Unsupported Logical Operator": {
                                        "$ref": "#/components/examples/Unsupported_Logical_Operator"
                                    },
                                    "$top limit exceeded": {
                                        "$ref": "#/components/examples/Limit_Exceeded_Top"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Timesheets/{Timesheetkey}": {
            "get": {
                "tags": [
                    "Timesheets"
                ],
                "summary": "Gets a Timesheets using Timesheetkey",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "Timesheetkey",
                        "schema": {
                            "type": "string",
                            "example": "QbQFGnqPDDs"
                        },
                        "description": "The Karbon-generated Timesheet key"
                    },
                    {
                        "in": "query",
                        "name": "$expand",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TimeEntries"
                            ],
                            "example": "TimeEntries"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will also return the Time Entries associated with the Timesheets.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Timesheet specified using the <code>Timesheetkey</code>.  <br><br>Using the query parameter available to this endpoint,  you can also include the Time Entries associated with the Timesheet in the response.\n",
                "operationId": "getTimesheetByID",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@odata.context": {
                                                    "type": "string",
                                                    "description": "The information about Karbon controllers generating this response.",
                                                    "example": "https://api.karbonhq.com/v3/$metadata#Timesheets(TimeEntries())/$entity"
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/GetSingleTimeSheet"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/Timesheet_Key_Not_Found_404"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets a list of Users",
                "parameters": [
                    {
                        "in": "query",
                        "name": "$filter",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Name",
                                "EmailAddress"
                            ],
                            "example": "EmailAddress eq 'joe@samplecompany.com'"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a subset of the Users that satisfy the <code>$filter</code> expression. \n"
                    },
                    {
                        "in": "query",
                        "name": "$top",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 100,
                            "example": 50
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return only the first N Users.\n"
                    },
                    {
                        "in": "query",
                        "name": "$skip",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return all but the first N Users.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive a paginated list of Users from your tenant.   Using the query parameters available to this endpoint, you can also filter the list of Users by their Name, and EmailAddress.<br><br>  <div style = \"border-block: 1px solid #fc7f03;\">  <b>Notes</b>  <ul>  <li>This endpoint returns a maximum of 100 Users at once.</li>  <li>If the query results in more than 100 Users, a link to the next set of the results will be given in the <code>@odata.nextLink</code> field of the response.</li>  <li>The <code>$filter</code> query parameter supports 3 logical operators (<code>eq</code>, <code>contains</code>, and <code>and</code>), and 2 properties to help you  form an expression. They are listed below with examples of usage.</li> <table>\n    <thead>\n        <tr>\n            <th>Logical Operators</th>\n            <th>Purpose</th>\n            <th>Name</th>\n            <th>EmailAddress</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>eq</td>\n            <td>Full-text search</td>\n            <td>/v3/Users?$filter=Name eq 'Joe Min'</td>\n            <td>/v3/Users?$filter=EmailAddress eq 'joe@samplecompany.com'</td>\n        </tr>\n        <tr>\n            <td>contains</td>\n            <td>Partial-text search</td>\n            <td>/v3/Users?$filter=(contains(Name, 'Min'))</td>\n            <td>/v3/Users?$filter=(contains(EmailAddress, 'joe'))</td>\n        </tr>                        \n        <tr>\n            <td>and</td>\n            <td>Combines properties</td>\n            <td colspan = \"2\">/v3/Users?$filter=Name eq 'Joe Min' and (contains(EmailAddress, 'joe'))</td>\n        </tr>\n    </tbody>\n</table> </ul> </div>\n",
                "operationId": "getAllUsers",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUsers"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Logical Operator": {
                                        "$ref": "#/components/examples/Unsupported_Logical_Operator"
                                    },
                                    "$top limit exceeded": {
                                        "$ref": "#/components/examples/Limit_Exceeded_Top"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Creates a new User",
                "description": "Use the <code>POST</code> method on this endpoint to create a new User in your tenant.",
                "operationId": "createUser",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@odata.context": {
                                                    "type": "string",
                                                    "description": "The information about Karbon controllers generating this response.",
                                                    "example": "https://api.karbonhq.com/v3/$metadata#Users/$entity"
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/GetSingleUser"
                                        }
                                    ]
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "The endpoint URL to the newly created User.",
                                "schema": {
                                    "type": "string",
                                    "example": "https://api.karbonhq.com/v3/Users('4LR9qmR5NQ6T')"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Create_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Name or Email Is Empty": {
                                        "$ref": "#/components/examples/Name_or_Email_Is_Empty"
                                    },
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "Name",
                                    "EmailAddress"
                                ],
                                "properties": {
                                    "Name": {
                                        "type": "string",
                                        "description": "The name of the User",
                                        "example": "Joe Min"
                                    },
                                    "EmailAddress": {
                                        "type": "string",
                                        "description": "The email address of the User",
                                        "example": "joe@samplecompany.com"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/Users/{UserId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets the details of a single User",
                "parameters": [
                    {
                        "in": "path",
                        "name": "{UserId}",
                        "schema": {
                            "type": "string",
                            "example": "2bYxtn94ZSdY",
                            "required": true
                        },
                        "description": "The unique ID of the User to get"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a single User from your tenant.",
                "operationId": "getUserById",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserById"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/WebhookSubscriptions/{WebhookType}": {
            "get": {
                "tags": [
                    "Webhook Subscriptions"
                ],
                "summary": "Gets a Webhook Subscription",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "WebhookType",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Contact",
                                "Work",
                                "Note"
                            ],
                            "example": "Contact"
                        },
                        "description": "The type of Karbon entity, which the Webhook Subscription must be associated with"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Webhook Subscriptions associated with the Karbon entity specified using the <code>WebhookType</code>.<br> <b>Only one</b> Webhook Subcription can exist per entity.\n",
                "operationId": "getWebhookSubscriptionsByWebhookType",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetWebhookSubscriptions"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "No existing Subscriptions": {
                                        "$ref": "#/components/examples/Webhook_Subscription_Key_Not_Found_404"
                                    },
                                    "Invalid Subscription Type": {
                                        "$ref": "#/components/examples/Webhook_Subscription_Type_Not_Found_404"
                                    },
                                    "HTTP Resource Not Found": {
                                        "$ref": "#/components/examples/HTTP_Resource_Not_Found"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Webhook Subscriptions"
                ],
                "summary": "Deletes a Webhook Subscription",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "WebhookType",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Contact",
                                "Work",
                                "Note"
                            ],
                            "example": "Contact"
                        },
                        "description": "The type of Karbon entity, which the Webhook Subscription must be associated with"
                    }
                ],
                "description": "Use the <code>DELETE</code> method on this endpoint to delete a Webhook Subscription associated with the Karbon entity specified using the <code>WebhookType</code>.<br>\n",
                "operationId": "delWebhookSubscriptionsByWebhookType",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Invalid Subscription Type": {
                                        "$ref": "#/components/examples/Webhook_Subscription_Type_Not_Found_404"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/WebhookSubscriptions": {
            "post": {
                "tags": [
                    "Webhook Subscriptions"
                ],
                "summary": "Creates a new Webhook Subscription",
                "description": "<p>Use the <code>POST</code> method on create and associate a Webhook Subscriptions with a Karbon entity.<br> You can create <b>only one</b> Webhook Subcription per entity.</p><p>Payload delivery for a webhook subscription will be retried 10 times, with increasing delays. If unsuccessful after 10 tries (no 2xx HTTP response), the subscription ends and needs to be recreated to receive further updates.</p>\n",
                "operationId": "createUser",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetWebhookSubscriptions"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "The endpoint URL to the newly created Webhook Subscription.",
                                "schema": {
                                    "type": "string",
                                    "example": "https://api.karbonhq.com/v3/WebhookSubscriptions('https://evelyn.info/hooks/catch/3550924/ovsbqn4/')"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Create_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Bad Model": {
                                        "$ref": "#/components/examples/Bad_Model"
                                    },
                                    "Invalid Subscription Type": {
                                        "$ref": "#/components/examples/Webhook_Subscription_Type_Not_Found_404"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "TargetUrl": {
                                        "type": "string",
                                        "description": "The URL to your server that is waiting to receive information about the <code>WebhookType</code> from Karbon",
                                        "example": "https://evelyn.info/hooks/catch/3550924/ovsbqn4/"
                                    },
                                    "WebhookType": {
                                        "type": "string",
                                        "enum": [
                                            "Contact",
                                            "Work",
                                            "Note"
                                        ],
                                        "description": "The type of Karbon entity which the Webhook Subscription is associated with. To receive ClientGroup, Contact and Organization updates, pass WebhookType as <code>Contact</code>. To receive WorkItem updates, pass WebhookType as <code>Work</code>. To receive Note and NoteComment updates, pass WebhookType as <code>Note</code>",
                                        "example": "Contact"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Webhook Subscriptions"
                ],
                "summary": "Deletes all Webhook Subscriptions",
                "description": "Use the <code>DELETE</code> method on this endpoint to delete all Webhook Subscriptions associated with Contact, Work, and Note.<br>\n",
                "operationId": "delAllWebhookSubscriptions",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/WorkItems": {
            "get": {
                "tags": [
                    "Work Items"
                ],
                "summary": "Gets a list of Work Items",
                "parameters": [
                    {
                        "in": "query",
                        "name": "$filter",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "AssigneeEmailAddress",
                                "ClientKey",
                                "PrimaryStatus",
                                "StartDate",
                                "Title",
                                "WorkStatus",
                                "WorkType"
                            ],
                            "example": "WorkType eq 'Payroll'"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a subset of the Work Items that satisfy the <code>$filter</code> expression. \n"
                    },
                    {
                        "in": "query",
                        "name": "$orderby",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "StartDate"
                            ],
                            "default": "WorkItemKey",
                            "example": [
                                "StartDate",
                                "StartDate desc"
                            ]
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a list of Work Items, sorted by the available properties.\n"
                    },
                    {
                        "in": "query",
                        "name": "$top",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1000,
                            "example": 50
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return only the first N Work Items.\n"
                    },
                    {
                        "in": "query",
                        "name": "$skip",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return all but the first N Work Items.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive a paginated list of Work Items from your tenant.   Using the query parameters available to this endpoint, you can also filter the list of Work Items by their AssigneeEmailAddress, ClientKey, PrimaryStatus StartDate, Title, WorkStatus, and WorkType. <br><br> <div style = \"border-block: 1px solid #fc7f03;\">  <b>Notes</b>  <ul>  <li>This endpoint returns a maximum of 100 Work Items at once.</li>  <li>If the query results in more than 100 Work Items, a link to the next set of the results will be given in the <code>@odata.nextLink</code> field of the response.</li>  <li>The <code>$filter</code> query parameter supports multiple logical operators and 7 properties to help you form an expression. They are listed below with examples of usage.  <ul> <br> <li><b>Operators for StartDate property</b>\n    <table>\n        <thead>\n            <tr>\n                <th>Operators</th>\n                <th>Purpose</th>\n                <th>StartDate</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>ge</td>\n                <td>Greater than and equals</td>\n                <td>/v3/WorkItems?$filter=StartDate ge 2021-04-27T00:00:00Z</td>\n            </tr>\n            <tr>\n                <td>le</td>\n                <td>Lesser than and equals</td>\n                <td>/v3/WorkItems?$filter=StartDate le 2021-04-27T00:00:00Z</td>\n            </tr>\n            <tr>\n                <td>and</td>\n                <td>Combines properties</td>\n                <td>/v3/WorkItems?$filter=StartDate ge 2021-04-27T00:00:00Z and PrimaryStatus eq 'Planned'</td>\n            </tr>    \n        </tbody>\n    </table>\n</li> <li><b>Operators for rest of the properties</b>\n    <table>\n        <thead>\n            <tr>\n                <th>Property</th>\n                <th>eq<br>[For full-text search]</th>\n                <th>and<br>[For combined-property search]</th>\n                <th>contains<br>[For partial-text search]</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>AssigneeEmailAddress</td>\n                <td>/v3/WorkItems?$filter=AssigneeEmailAddress eq 'joe@samplecompany.com'</td>\n                <td>/v3/WorkItems?$filter=AssigneeEmailAddress eq 'joe@samplecompany.com' and PrimaryStatus eq 'Planned'</td>\n                <td>/v3/WorkItems?$filter=(contains(AssigneeEmailAddress , 'joe'))</td>\n            </tr>\n            <tr>\n                <td>ClientKey</td>\n                <td>/v3/WorkItems?$filter=ClientKey eq '2nvhdM1TmZk3'</td>\n                <td>/v3/WorkItems?$filter=ClientKey eq '2nvhdM1TmZk3' and (contains(AssigneeEmailAddress , 'joe'))</td>\n                <td>N/A</td>\n            </tr>\n            <tr>\n                <td>PrimaryStatus</td>\n                <td>/v3/WorkItems?$filter=PrimaryStatus eq 'Planned'</td>\n                <td>/v3/WorkItems?$filter=AssigneeEmailAddress eq 'joe@samplecompany.com' and PrimaryStatus eq 'Planned'</td>\n                <td>N/A</td>\n            </tr>\n            <tr>\n                <td>Title</td>\n                <td>/v3/WorkItems?$filter=Title eq 'Payroll 31 Aug - 15 Sep 2022'</td>\n                <td>/v3/WorkItems?$filter=Title eq 'Payroll 31 Aug - 15 Sep 2022' and PrimaryStatus eq 'Planned'</td>\n                <td>/v3/WorkItems?$filter=(contains(Title, 'pay'))</td>\n            </tr>\n            <tr>\n                <td>WorkStatus</td>\n                <td>/v3/WorkItems?$filter=WorkStatus eq 'Ready To Start'</td>\n                <td>/v3/WorkItems?$filter=WorkStatus eq 'Ready To Start' and $filter=(contains(Title, 'Pay'))</td>\n                <td>/v3/WorkItems?$filter=(contains(WorkStatus , 'joe'))</td>\n            </tr>\n            <tr>\n                <td>WorkType</td>\n                <td>/v3/WorkItems?$filter=WorkType eq 'Payroll'</td>\n                <td>/v3/WorkItems?$filter=AssigneeEmailAddress eq 'Payroll' and PrimaryStatus eq 'Planned'</td>\n                <td>/v3/WorkItems?$filter=(contains(WorkType , 'pay'))</td>\n            </tr> \n        </tbody>\n    </table>\n</li> </ul> </div>\n",
                "operationId": "getAllWorkItems",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetWorkItems"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    },
                                    "Unsupported Orderby Property": {
                                        "$ref": "#/components/examples/$Orderby_Unsupported_Property"
                                    },
                                    "$top limit exceeded": {
                                        "$ref": "#/components/examples/Limit_Exceeded_Top"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Work Items"
                ],
                "summary": "Creates a new Work Item",
                "description": "Use the <code>POST</code> method on this endpoint to create a new Work Item in your tenant.\n",
                "operationId": "createWorkItem",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@odata.context": {
                                                    "type": "string",
                                                    "description": "The information about Karbon controllers generating this response.",
                                                    "example": "https://api.karbonhq.com/v3/$metadata#WorkItems/KarbonService.WorkItemDTO/$entity"
                                                },
                                                "@odata.type": {
                                                    "type": "string",
                                                    "description": "The information about Karbon Objects generating this reponse.",
                                                    "example": "#KarbonService.WorkItemDTO"
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/GetSingleWorkItem"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "Description": {
                                                    "type": "string",
                                                    "description": "A free form text field to add more information about the Work Item",
                                                    "example": "Send to Jo for review"
                                                },
                                                "ClientTaskRecipient": {
                                                    "type": "string",
                                                    "description": "The details about the recipient of the Client Tasks related to this Work Item. This property will always return <code>null</code>.",
                                                    "example": null
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "The endpoint URL to the newly created Work Item.",
                                "schema": {
                                    "type": "string",
                                    "example": "https://api.karbonhq.com/v3/WorkItems('2VfHzHkJZPVV')/KarbonService.WorkItemDTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/EnhancedErrorMessages"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ErrorMessages"
                                        }
                                    ]
                                },
                                "examples": {
                                    "Client Not a member of ClientGroup": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Client_Not_a_member_of_ClientGroup"
                                    },
                                    "Incorrect Assignee Email Address": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Incorrect_EmailAddress"
                                    },
                                    "Incorrect Client Key": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Incorrect_ClientKey"
                                    },
                                    "Incorrect Client Type": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Incorrect_ClientType"
                                    },
                                    "Incorrect Work Template Key": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Incorrect_WorkTemplate_Key"
                                    },
                                    "Incorrect Work Type": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Incorrect_WorkType"
                                    },
                                    "Missing Create Data": {
                                        "$ref": "#/components/examples/Missing_Create_Data"
                                    },
                                    "Required Property is empty": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Empty_Property"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestCreateWorkItem"
                            }
                        }
                    }
                }
            }
        },
        "/v3/WorkItems/{WorkItemkey}": {
            "get": {
                "tags": [
                    "Work Items"
                ],
                "summary": "Gets a Work Item using WorkItemkey",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "WorkItemkey",
                        "schema": {
                            "type": "string",
                            "example": "2LPSrkzbYrn4"
                        },
                        "description": "The Karbon-generated Work Item key"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Work Item specified using the WorkItemkey.\n",
                "operationId": "getWorkItemByID",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@odata.context": {
                                                    "type": "string",
                                                    "description": "The information about Karbon controllers generating this response.",
                                                    "example": "https://api.karbonhq.com/v3/$metadata#WorkItems/KarbonService.WorkItemDTO/$entity"
                                                },
                                                "@odata.type": {
                                                    "type": "string",
                                                    "description": "The information about Karbon Objects generating this reponse.",
                                                    "example": "#KarbonService.WorkItemDTO"
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/GetSingleWorkItem"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "Description": {
                                                    "type": "string",
                                                    "description": "A free form text field to add more information about the Work Item",
                                                    "example": "Send to Jo for review"
                                                },
                                                "ClientTaskRecipient": {
                                                    "type": "string",
                                                    "description": "The details about the recipient of the Client Tasks related to this Work Item. This property will always return <code>null</code>.",
                                                    "example": null
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/WorkItem_Key_Not_Found_404"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Work Items"
                ],
                "summary": "Updates a Work Item (Full)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "WorkItemkey",
                        "schema": {
                            "type": "string",
                            "example": "2LPSrkzbYrn4"
                        },
                        "description": "The Karbon-generated Work Item key"
                    }
                ],
                "description": "Use the <code>PUT</code> method on this endpoint to update full details of a Work Item (specified using the WorkItemkey). \n",
                "operationId": "putWorkItemByID",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/EnhancedErrorMessages"
                                        },
                                        {
                                            "$ref": "#/components/schemas/ErrorMessages"
                                        }
                                    ]
                                },
                                "examples": {
                                    "Client Not a member of ClientGroup": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Client_Not_a_member_of_ClientGroup"
                                    },
                                    "Incorrect Assignee Email Address": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Incorrect_EmailAddress"
                                    },
                                    "Incorrect Client Key": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Incorrect_ClientKey"
                                    },
                                    "Incorrect Client Type": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Incorrect_ClientType"
                                    },
                                    "Incorrect Work Template Key": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Incorrect_WorkTemplate_Key"
                                    },
                                    "Incorrect Work Type": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Incorrect_WorkType"
                                    },
                                    "Missing Create Data": {
                                        "$ref": "#/components/examples/Missing_Create_Data"
                                    },
                                    "Required Property is empty": {
                                        "$ref": "#/components/examples/Bad_Model_WorkItem_Empty_Property"
                                    },
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Update_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Work Item Key Not Found": {
                                        "$ref": "#/components/examples/WorkItem_Key_Not_Found_404"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestCreateWorkItem"
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Work Items"
                ],
                "summary": "Updates a Work Item (Partial)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "WorkItemkey",
                        "schema": {
                            "type": "string",
                            "example": "2LPSrkzbYrn4"
                        },
                        "description": "The Karbon-generated Work Item key"
                    }
                ],
                "description": "Use the <code>PATCH</code> method on this endpoint to update partial details of a Work Item (specified using the WorkItemkey).   <br><br>This method <b>only supports</b> editing the <code>Description</code> property.\n",
                "operationId": "patchWorkItemByID",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Incorrect or Missing Data": {
                                        "$ref": "#/components/examples/Missing_Update_Data"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    },
                                    "Invalid Property": {
                                        "$ref": "#/components/examples/Invalid_Property"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Work Item Key Not Found": {
                                        "$ref": "#/components/examples/WorkItem_Key_Not_Found_404"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "Description": {
                                        "type": "string",
                                        "description": "A free form text field to add more information about the Work Item",
                                        "example": "Reviewed and approved by Jo."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/WorkSchedules": {
            "post": {
                "tags": [
                    "Work Schedules"
                ],
                "summary": "Creates a new Work Schedule",
                "description": "Use the <code>POST</code> method on this endpoint to create a new Work Schedule in your tenant.\n",
                "operationId": "createWorkSchedule",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetWorkSchedule"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "description": "The endpoint URL to the newly created Work Schedule.",
                                "schema": {
                                    "type": "string",
                                    "example": "https://api.karbonhq.com/v3/WorkSchedules('4yRJNlPnjgtL')"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Missing CreatedFromWorkItemKey": {
                                        "$ref": "#/components/examples/Missing_CreatedFromWorkItemKey"
                                    },
                                    "Incorrect CustomFrequencyMultiple": {
                                        "$ref": "#/components/examples/Incorrect_CustomFrequencyMultiple"
                                    },
                                    "Missing Create Data": {
                                        "$ref": "#/components/examples/Missing_Create_Data"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkScheduleRequest"
                            }
                        }
                    }
                }
            }
        },
        "/v3/WorkSchedules/{WorkSchedulekey}": {
            "get": {
                "tags": [
                    "Work Schedules"
                ],
                "summary": "Gets a Work Schedule using WorkSchedulekey",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "WorkSchedulekey",
                        "schema": {
                            "type": "string",
                            "example": "Bm6CGxrWp8W"
                        },
                        "description": "The Karbon-generated Work Schedule key"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Work Schedule specified using the WorkSchedulekey.\n",
                "operationId": "getWorkScheduleByID",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetWorkSchedule"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/WorkSchedule_Key_Not_Found_404"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Work Schedules"
                ],
                "summary": "Updates a Work Schedule (Full)",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "WorkSchedulekey",
                        "schema": {
                            "type": "string",
                            "example": "Bm6CGxrWp8W"
                        },
                        "description": "The Karbon-generated Work Schedule key"
                    }
                ],
                "description": "Use the <code>PUT</code> method on this endpoint to update full details of a Work Schedule specified using the WorkSchedulekey.",
                "operationId": "putWorkScheduleByID",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Missing Create Data": {
                                        "$ref": "#/components/examples/Missing_Create_Data"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "description": "Refer to the table below for more information on each field in the request body.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkSchedulePUTRequest"
                            }
                        }
                    }
                }
            }
        },
        "/v3/WorkTemplates": {
            "get": {
                "tags": [
                    "Work Templates"
                ],
                "summary": "Gets a list of Work Templates",
                "parameters": [
                    {
                        "in": "query",
                        "name": "$filter",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Title",
                                "WorkTypeKey",
                                "HasScheduledClientTaskGroups",
                                "DraftHasChanges",
                                "PublishedDate",
                                "NumberOfWorkItemsCreated",
                                "DateLastWorkItemCreated",
                                "DateModified"
                            ],
                            "example": "Title eq 'Payroll processing'"
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a subset of the Work Templates that satisfy the <code>$filter</code> expression.\n"
                    },
                    {
                        "in": "query",
                        "name": "$orderby",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "WorkTypeKey",
                                "PublishedDate",
                                "NumberOfWorkItemsCreated",
                                "DateLastWorkItemCreated",
                                "DateModified"
                            ],
                            "default": "WorkTypeKey",
                            "example": [
                                "PublishedDate",
                                "PublishedDate desc"
                            ]
                        },
                        "description": "When this parameter is combined with the URI, this endpoint will return a list of Work Templates, sorted by the available properties.\n"
                    },
                    {
                        "in": "query",
                        "name": "$top",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 10,
                            "example": 10
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return only the first N Work Templates.\n"
                    },
                    {
                        "in": "query",
                        "name": "$skip",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "example": 100
                        },
                        "description": "When this parameter is combined with the URI and a value N is assigned to it, this endpoint will return all but the first N Work Templates.\n"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive a paginated list of Work Templates from your tenant.    Using the query parameters available to this endpoint,  you can also filter the list of Work Templates by their  Title, WorkTypeKey, HasScheduledClientTaskGroups, DraftHasChanges, PublishedDate, NumberOfWorkItemsCreated, DateLastWorkItemCreated, or DateModified.  <br><br>   <div style = \"border-block: 1px solid #fc7f03;\">   <b>Notes</b>   <ul>   <li>This endpoint returns a maximum of 100 Work Templates at once.</li>   <li>If the query results in more than 100 Work Templates, a link to the next set of the results will be given in the <code>@odata.nextLink</code> field of the response.</li>   <li>The <code>$filter</code> query parameter supports 3 logical operators (<code>eq</code>, <code>startswith</code> and <code>and</code>) and  8 properties to help you form an expression. Usage examples below  <table> <thead> <tr> <th>Properties</th> <th>eq<br>[For full-text search]</th> <th>startswith<br>[For searching text that starts with specified characters]</th> <th>and<br>[For combined property search]</th> </tr> </thead> <tbody> <tr> <td>Title</td> <td>/v3/WorkTemplates?$filter=Title eq 'Payroll processing'</td> <td>/v3/WorkTemplates?$filter=startswith(Title,'Payroll')</td> <td rowspan = \"8\">/v3/WorkTemplates?$filter=startswith(Title,'Payroll') and WorkTypeKey eq '2Wj3ZqNzWtnQ'</td> </tr> <tr> <td>WorkTypeKey</td> <td>/v3/WorkTemplates?$filter=WorkTypeKey eq '2Wj3ZqNzWtnQ'</td> <td>/v3/WorkTemplates?$filter=startswith(WorkTypeKey,'2W')</td> </tr> <tr> <td>HasScheduledClientTaskGroups</td> <td>/v3/WorkTemplates?$filter=HasScheduledClientTaskGroups eq false</td> <td>N/A</td> </tr> <tr> <td>DraftHasChanges</td> <td>/v3/WorkTemplates?$filter=DraftHasChanges eq false</td> <td>N/A</td> </tr> <tr> <td>PublishedDate</td> <td>/v3/WorkTemplates?$filter=PublishedDate eq 2021-12-17T01:02:25Z</td> <td>N/A</td> </tr> <tr> <td>NumberOfWorkItemsCreated</td> <td>/v3/WorkTemplates?$filter=NumberOfWorkItemsCreated eq 24</td> <td>N/A</td> </tr> <tr> <td>DateLastWorkItemCreated</td> <td>/v3/WorkTemplates?$filter=PublishedDate eq 2022-01-09T01:02:25Z</td> <td>N/A</td> </tr> <tr> <td>DateModified</td> <td>/v3/WorkTemplates?$filter=PublishedDate eq 2022-01-09T01:02:25Z</td> <td>N/A</td> </tr> </tbody> </table></li>  </div>\n",
                "operationId": "getAllWorkTemplates",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetWorkTemplates"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Property": {
                                        "$ref": "#/components/examples/Unsupported_Property_Filter"
                                    },
                                    "Unsupported Orderby Property": {
                                        "$ref": "#/components/examples/$Orderby_Unsupported_Property"
                                    },
                                    "$top limit exceeded": {
                                        "$ref": "#/components/examples/WorkTemplates_Limit_Exceeded_Top"
                                    },
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v3/WorkTemplates/{WorkTemplatekey}": {
            "get": {
                "tags": [
                    "Work Templates"
                ],
                "summary": "Gets a Work Template using WorkTemplatekey",
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "WorkTemplatekey",
                        "schema": {
                            "type": "string",
                            "example": "4ckcnqp5rQYW"
                        },
                        "description": "The Karbon-generated Work Template key"
                    }
                ],
                "description": "Use the <code>GET</code> method on this endpoint to receive the details of a Work Template specified using the WorkTemplatekey.\n",
                "operationId": "getWorkTemplateByID",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@odata.context": {
                                                    "type": "string",
                                                    "description": "The information about Karbon controllers generating this response.",
                                                    "example": "https://api.karbonhq.com/v3/$metadata#WorkTemplates/$entity"
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/GetSingleWorkTemplate"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Unsupported Option": {
                                        "$ref": "#/components/examples/Unsupported_option"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceNotFound"
                                },
                                "examples": {
                                    "Unauthorized Access": {
                                        "$ref": "#/components/examples/UnauthorizedAccess"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Key Not Found": {
                                        "$ref": "#/components/examples/WorkTemplate_Key_Not_Found_404"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorMessages"
                                },
                                "examples": {
                                    "Undefined Error": {
                                        "$ref": "#/components/examples/elongated_5001"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    },
    "components": {
        "schemas": {
            "User": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10
                    },
                    "username": {
                        "type": "string",
                        "example": "theUser"
                    },
                    "firstName": {
                        "type": "string",
                        "example": "John"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "James"
                    },
                    "email": {
                        "type": "string",
                        "example": "john@example.com"
                    },
                    "password": {
                        "type": "string",
                        "example": 12345
                    },
                    "phone": {
                        "type": "string",
                        "example": 12345
                    },
                    "userStatus": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1,
                        "description": "User Status"
                    }
                },
                "xml": {
                    "name": "user"
                },
                "type": "object"
            },
            "BusinessCardRequest": {
                "type": "object",
                "properties": {
                    "IsPrimaryCard": {
                        "type": "boolean",
                        "description": "Set to true, if this business card is also the primary business card for this entity.",
                        "example": true
                    },
                    "WebSites": {
                        "description": "The websites associated with this Business card.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "www.website.one",
                            "www.website.two"
                        ]
                    },
                    "EmailAddresses": {
                        "description": "The email addresses associated with this Business card.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "sample@example.com",
                            "sample.two@example.com"
                        ]
                    },
                    "RoleOrTitle": {
                        "type": "string",
                        "description": "The business role or title of the contact this Business Cards belongs to",
                        "example": "COO"
                    },
                    "FacebookLink": {
                        "type": "string",
                        "description": "The URL to the entity's Facebook profile",
                        "example": "facebook.com/sampleName"
                    },
                    "LinkedInLink": {
                        "type": "string",
                        "description": "The URL to the entity's LinkedIn profile",
                        "example": "linkedin.com/sampleName"
                    },
                    "TwitterLink": {
                        "type": "string",
                        "description": "The URL to the entity's Twitter profile",
                        "example": "twitter.com/sampleName"
                    },
                    "SkypeLink": {
                        "type": "string",
                        "description": "The URL to the entity's Skype profile",
                        "example": "skype.com/sampleName"
                    },
                    "Addresses": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "AddressLines": {
                                    "type": "string",
                                    "description": "Street Address",
                                    "example": "45 Sample Street"
                                },
                                "City": {
                                    "type": "string",
                                    "description": "City",
                                    "example": "Alexandria"
                                },
                                "StateProvinceCounty": {
                                    "type": "string",
                                    "description": "State / Province / County",
                                    "example": "NSW"
                                },
                                "ZipCode": {
                                    "type": "string",
                                    "description": "ZipCode / PostCode",
                                    "example": 2015
                                },
                                "CountryCode": {
                                    "type": "string",
                                    "format": "ISO 3166-1 alpha-2",
                                    "description": "Two letter Country Code",
                                    "example": "AU"
                                },
                                "Label": {
                                    "type": "string",
                                    "description": "The tag to indicate the type of Address",
                                    "example": "Physical",
                                    "enum": [
                                        "Physical",
                                        "Mailing",
                                        "Legal",
                                        "Home"
                                    ]
                                }
                            }
                        }
                    },
                    "PhoneNumbers": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "Number": {
                                    "type": "string",
                                    "description": "The phone number of the entity",
                                    "example": 1234567890
                                },
                                "CountryCode": {
                                    "type": "string",
                                    "description": "The phone number country code",
                                    "example": 61
                                },
                                "Label": {
                                    "type": "string",
                                    "description": "The tag to indicate the type of phone number",
                                    "example": "Work",
                                    "enum": [
                                        "Work",
                                        "Mobile",
                                        "Office",
                                        "Fax",
                                        "Home",
                                        "Other"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "BusinessCard": {
                "type": "object",
                "properties": {
                    "BusinessCardKey": {
                        "type": "string",
                        "description": "A Karbon-generated unique identifier for the Business Card",
                        "example": "2tBHyXtJBxBy"
                    },
                    "IsPrimaryCard": {
                        "type": "boolean",
                        "description": "Set to true, if this business card is also the primary business card for this entity.",
                        "example": true
                    },
                    "WebSites": {
                        "description": "The websites associated with this Business card.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "www.website.one",
                            "www.website.two"
                        ]
                    },
                    "EmailAddresses": {
                        "description": "The email addresses associated with this Business card.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "sample@example.com",
                            "sample.two@example.com"
                        ]
                    },
                    "OrganizationKey": {
                        "type": "string",
                        "description": "A Karbon-generated key to indicate the organization this Business Card belongs to",
                        "example": "ZGNmtYyLm4z"
                    },
                    "RoleOrTitle": {
                        "type": "string",
                        "description": "The business role or title of the contact this Business Cards belongs to",
                        "example": "COO"
                    },
                    "FacebookLink": {
                        "type": "string",
                        "description": "The URL to the entity's Facebook profile",
                        "example": "facebook.com/sampleName"
                    },
                    "LinkedInLink": {
                        "type": "string",
                        "description": "The URL to the entity's LinkedIn profile",
                        "example": "linkedin.com/sampleName"
                    },
                    "TwitterLink": {
                        "type": "string",
                        "description": "The URL to the entity's Twitter profile",
                        "example": "twitter.com/sampleName"
                    },
                    "SkypeLink": {
                        "type": "string",
                        "description": "The URL to the entity's Skype profile",
                        "example": "skype.com/sampleName"
                    },
                    "Addresses": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "AddressKey": {
                                    "type": "string",
                                    "description": "A randomly generated GUID to indicate the address details",
                                    "example": "e150a05a-2dea-4292-8bc8-03398c9384e4"
                                },
                                "AddressLines": {
                                    "type": "string",
                                    "description": "Street Address",
                                    "example": "45 Sample Street"
                                },
                                "City": {
                                    "type": "string",
                                    "description": "City",
                                    "example": "Alexandria"
                                },
                                "StateProvinceCounty": {
                                    "type": "string",
                                    "description": "State / Province / County",
                                    "example": "NSW"
                                },
                                "ZipCode": {
                                    "type": "string",
                                    "description": "ZipCode / PostCode",
                                    "example": 2015
                                },
                                "CountryCode": {
                                    "type": "string",
                                    "format": "ISO 3166-1 alpha-2",
                                    "description": "Two letter Country Code",
                                    "example": "AU"
                                },
                                "Label": {
                                    "type": "string",
                                    "description": "The tag to indicate the type of Address",
                                    "example": "Physical",
                                    "enum": [
                                        "Physical",
                                        "Mailing",
                                        "Legal",
                                        "Home"
                                    ]
                                }
                            }
                        }
                    },
                    "PhoneNumbers": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "PhoneNumberKey": {
                                    "type": "string",
                                    "description": "A randomly generated GUID to indicate the phone details",
                                    "example": "6e0b9ace-24b1-4328-a922-3b8be5ef5052"
                                },
                                "Number": {
                                    "type": "string",
                                    "description": "The phone number of the entity",
                                    "example": 1234567890
                                },
                                "CountryCode": {
                                    "type": "string",
                                    "description": "The phone number country code",
                                    "example": 61
                                },
                                "Label": {
                                    "type": "string",
                                    "description": "The tag to indicate the type of phone number",
                                    "example": "Work",
                                    "enum": [
                                        "Work",
                                        "Mobile",
                                        "Office",
                                        "Fax",
                                        "Home",
                                        "Other"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "BusinessCardsRequestAsArray": {
                "type": "object",
                "properties": {
                    "BusinessCards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessCardRequest"
                        }
                    }
                }
            },
            "DetailsOfAccounting": {
                "type": "object",
                "description": "The details specific to the Accounting firm related to this entity",
                "properties": {
                    "ContactPermaKey": {
                        "type": "string",
                        "description": "A Karbon-generated key that is used to identify the Contact (if a person)."
                    },
                    "OrganizationPermaKey": {
                        "type": "string",
                        "description": "A Karbon-generated key that is used to identify the Contact (if a business or an organization)."
                    },
                    "BirthDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The day at which the contact (if a person) was born."
                    },
                    "DeathDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "UTC",
                        "description": "The day at which the contact (if a person) died."
                    },
                    "Salutation": {
                        "type": "string",
                        "description": "The title of the contact (if a person)",
                        "enum": [
                            "Mr",
                            "Mrs",
                            "Ms",
                            "Miss",
                            "Dr",
                            "Prof",
                            "Rev"
                        ]
                    },
                    "Sex": {
                        "type": "string",
                        "description": "The gender of the contact (if a person)",
                        "enum": [
                            "M",
                            "F"
                        ]
                    },
                    "FinancialYearEndDay": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The day of month in which the fiscal year ends for the contact"
                    },
                    "FinancialYearEndMonth": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The month in which the fiscal year ends for the contact"
                    },
                    "IncorporationDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date at which the contact (if a business or an organization) was incorporated."
                    },
                    "IncorporationState": {
                        "type": "integer",
                        "description": "The state in which the contact (if a business or an organization) was incorporated."
                    },
                    "LegalName": {
                        "type": "string",
                        "description": "The legal name of the contact"
                    },
                    "LineOfBusiness": {
                        "type": "string",
                        "description": "The industry this contact is associated with."
                    },
                    "EntityType": {
                        "type": "string",
                        "description": "The entity type of the contact (if a business or an organization)",
                        "enum": [
                            "Corporation",
                            "Club or Society",
                            "Estate or Trust",
                            "Exempt Organization",
                            "Partnership",
                            "Private Foundation",
                            "S Corporation",
                            "Person",
                            "Sole Proprietor",
                            "Limited Liability",
                            "Other/None"
                        ]
                    },
                    "TaxCountryCode": {
                        "type": "string",
                        "description": "The code of the country where the contact pays their tax.",
                        "enum": [
                            "US",
                            "AU",
                            "UK",
                            "NZ",
                            "CA",
                            "SA",
                            "HK",
                            "FR",
                            "SG",
                            "IE",
                            "SE",
                            "FI",
                            "DK",
                            "NO",
                            "IN",
                            "CH"
                        ]
                    },
                    "TradingName": {
                        "nullable": true,
                        "type": "string",
                        "description": "The trading name of the contact (if a business or an organization)"
                    },
                    "AnnualRevenue": {
                        "type": "number",
                        "format": "decimal",
                        "description": "The total annual revenue generated by the contact"
                    },
                    "BaseCurrency": {
                        "type": "string",
                        "description": "The 3-letter code, denoting the currency of annual revenue"
                    },
                    "GstBasis": {
                        "type": "string",
                        "description": "The method of accounting for GST/BAS",
                        "enum": [
                            "Cash",
                            "Accruals",
                            "None",
                            "Close"
                        ]
                    },
                    "GstPeriod": {
                        "nullable": true,
                        "type": "string",
                        "description": "The GST period"
                    },
                    "IncomeTaxInstallmentPeriod": {
                        "type": "string",
                        "description": "The income tax installment period",
                        "enum": [
                            "Monthly",
                            "Quarterly",
                            "Yearly"
                        ]
                    },
                    "IsVATRegistered": {
                        "type": "boolean",
                        "description": "Set to true if the business or organization is registered for VAT"
                    },
                    "OrganizationValuation": {
                        "type": "number",
                        "format": "decimal",
                        "description": "The present value of the company"
                    },
                    "PaysTax": {
                        "type": "boolean",
                        "description": "Set to true, if the contact has to pay tax"
                    },
                    "PrepareGST": {
                        "type": "boolean",
                        "description": "<>"
                    },
                    "ProvisionaTaxBasic": {
                        "type": "string",
                        "description": "<>"
                    },
                    "ProvisionalTaxRatio": {
                        "type": "string",
                        "description": "<>"
                    },
                    "RevenueModel": {
                        "type": "string",
                        "description": "The revenue model of the business or organization",
                        "enum": [
                            "Advertising",
                            "Commission",
                            "E-Commerce",
                            "Fee for Service",
                            "Licensing",
                            "Markup",
                            "Production",
                            "Subscription"
                        ]
                    },
                    "SalesTaxBasis": {
                        "type": "string",
                        "description": "The tax method",
                        "enum": [
                            "Cash",
                            "Accruals",
                            "None",
                            "Close"
                        ]
                    },
                    "SalesTaxPeriod": {
                        "type": "string",
                        "description": "The tax period"
                    },
                    "Sells": {
                        "type": "string",
                        "description": "The item that is primarily supplied by the company",
                        "enum": [
                            "Services",
                            "Products",
                            "Products and Services",
                            "Other"
                        ]
                    },
                    "RegistrationNumbers": {
                        "type": "array",
                        "description": "The registration numbers associated with the contact.",
                        "items": {
                            "required": [
                                "RegistrationNumber",
                                "Type"
                            ],
                            "type": "object",
                            "properties": {
                                "RegistrationNumber": {
                                    "type": "string",
                                    "description": "The registration number"
                                },
                                "Type": {
                                    "type": "string",
                                    "description": "The type of registration",
                                    "enum": [
                                        "Australian Business Number (ABN)",
                                        "Australian Company Number (ACN)",
                                        "Tax File Number (TFN)",
                                        "Social Security Number (SSN)",
                                        "Tax ID",
                                        "VAT Number",
                                        "Company Registration Number",
                                        "PAYE Reference Number",
                                        "PAYE Accounts Office Reference",
                                        "CT Reference",
                                        "Unique Taxpayer Reference (UTR)",
                                        "NZ Business Number",
                                        "GST Number",
                                        "IRD Number",
                                        "Business Number",
                                        "Social Insurance Number (SIN)",
                                        "Registration Number",
                                        "Income Tax Number",
                                        "PAYE Number",
                                        "DOL UIF Number",
                                        "SDL Number",
                                        "DOL Workman Compensation",
                                        "VAT Number",
                                        "Company Number",
                                        "Business Registration Number",
                                        "Charity Number",
                                        "MPF provider",
                                        "RCS",
                                        "SIRET",
                                        "UEN",
                                        "RCT Reference",
                                        "Companies Office Number",
                                        "KUND ID",
                                        "Organisation Number",
                                        "Finnish Business ID",
                                        "CVR Number",
                                        "GST Identification Number (GSTIN)",
                                        "Permanent Account Number (PAN)"
                                    ]
                                }
                            }
                        }
                    },
                    "Notes": {
                        "type": "array",
                        "items": {
                            "required": [
                                "Body",
                                "Type"
                            ],
                            "type": "object",
                            "properties": {
                                "Body": {
                                    "type": "string",
                                    "description": "The free-form text in the note"
                                },
                                "Type": {
                                    "type": "string",
                                    "description": "The section (within the accounting details) where the note resides",
                                    "enum": [
                                        "Basic",
                                        "Tax",
                                        "System",
                                        "Owner",
                                        "Officer"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Attachments": {
                "type": "object",
                "properties": {
                    "ClientTaskCommentAttachmentKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Attachment on the comment of the Client Task",
                        "example": "DPpXf7kbjbv"
                    },
                    "ClientTaskCommentKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the comment on the Client Task",
                        "example": "4x6xD7GnPXGL"
                    },
                    "FileUrl": {
                        "type": "string",
                        "description": "The URL of the attachment",
                        "example": "/ClientTaskCommentAttachments?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJGaWxlQ29udGV4dFBlcm1hS2V5IjoiRFBwWGY3a2JqYnYiLCJpYXQiOjE2NTg3MDg0NjEuMCwiZXhwIjoxNjU4OTY3NjYxLjB9.VsETUnJd47qQFtj102o5dIm5PbJQ8pVKcgrJ6v_Rs84"
                    },
                    "MimeType": {
                        "type": "string",
                        "description": "The MIME type of valid media file as per RFC 6838. See a list of common MIME types [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types).",
                        "example": "image/png"
                    },
                    "FileName": {
                        "type": "string",
                        "description": "The name of the file",
                        "example": "Screenshot(1).png"
                    },
                    "FileSize": {
                        "type": "string",
                        "description": "The size of the file (in bytes)",
                        "example": 1446
                    },
                    "DateCreated": {
                        "type": "string",
                        "description": "The date at which the attachment was recorded",
                        "example": "2022-03-23T00:03:22Z"
                    },
                    "UploadedByKarbonUser": {
                        "type": "boolean",
                        "description": "The value of this property is set to <code>true</code>, if the attachment was uploaded by an existing Karbon user.",
                        "example": false
                    }
                }
            },
            "CreateCommentItem": {
                "type": "object",
                "required": [
                    "ClientTaskKey",
                    "AuthorKey",
                    "AuthorType"
                ],
                "properties": {
                    "ClientTaskKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Client Task",
                        "example": "35XZhGpm17r7"
                    },
                    "Message": {
                        "type": "string",
                        "description": "The comment message",
                        "example": "I have edited the section as shown in the screenshot"
                    },
                    "AuthorKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the author of the comment",
                        "example": "yD8Rw3DxksW"
                    },
                    "AuthorType": {
                        "type": "string",
                        "enum": [
                            "Contact",
                            "Organization"
                        ],
                        "description": "The contact type of the author. You can only use existing contact type.",
                        "example": "Contact"
                    },
                    "IsDraft": {
                        "default": false,
                        "type": "boolean",
                        "description": "The value of this property is set to <code>true</code>, if you don't want to publish the comment.",
                        "example": false
                    }
                }
            },
            "ResponseCommentItem": {
                "type": "object",
                "properties": {
                    "CommentItemKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the comment of the Client Task",
                        "example": "Jj2hzZn1vqm"
                    },
                    "ClientTaskKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Client Task",
                        "example": "35XZhGpm17r7"
                    },
                    "Message": {
                        "type": "string",
                        "description": "The comment message",
                        "example": "Please see the screenshot to find the section that you need to fill."
                    },
                    "PostDateTime": {
                        "type": "string",
                        "description": "The date and time at which the comment was created",
                        "example": "2022-03-23T00:03:22Z"
                    },
                    "AuthorKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the author of the comment",
                        "example": "yD8Rw3DxksW"
                    },
                    "AuthorType": {
                        "type": "string",
                        "enum": [
                            "Contact",
                            "Organization"
                        ],
                        "description": "The contact type of the author. You can only use existing contact type.",
                        "example": "Contact"
                    },
                    "AuthorFullName": {
                        "type": "string",
                        "description": "The full name of the author",
                        "example": "John Smith"
                    },
                    "AuthorAvatarUrl": {
                        "type": "string",
                        "description": "The URL to the author's avatar",
                        "example": "https://api.az.karbonemail.com/images/e546f2bc-e48f-4c2a-9384-a1036c28c081"
                    },
                    "AvatarIndex": {
                        "type": "string",
                        "description": "The background color index number of the author's avatar",
                        "example": 25
                    },
                    "IsEdited": {
                        "type": "boolean",
                        "description": "The value of this property is set to <code>true</code>, if the original comment was edited.",
                        "example": false
                    },
                    "IsDraft": {
                        "type": "boolean",
                        "description": "The value of this property is set to <code>true</code>, if the comment is yet to be published.",
                        "example": false
                    },
                    "DateModified": {
                        "type": "string",
                        "description": "The date and time at which the comment was the most recently edited",
                        "example": "2022-03-23T00:03:22Z"
                    },
                    "HasAttachments": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "The value of this property is set to <code>true</code>, if the comment has attachments. When creating a new Client Task comment, this field will be <code>null</code>.",
                        "example": null
                    },
                    "Attachments": {
                        "type": "array",
                        "nullable": true,
                        "description": "The details of the Client Task Attachments. When creating a new Client Task comment, this property will be an empty array",
                        "items": {
                            "type": "object",
                            "nullable": true
                        },
                        "example": []
                    }
                }
            },
            "CommentItemForClientRequest": {
                "type": "object",
                "properties": {
                    "CommentItemKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the comment of the Client Task",
                        "example": "Jj2hzZn1vqm"
                    },
                    "ClientTaskKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Client Task",
                        "example": "35XZhGpm17r7"
                    },
                    "Message": {
                        "type": "string",
                        "description": "The comment message",
                        "example": "I have edited the section as shown in the screenshot"
                    },
                    "PostDateTime": {
                        "type": "string",
                        "description": "The date and time at which the comment was created",
                        "example": "2022-03-23T00:03:22Z"
                    },
                    "AuthorKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the author of the comment",
                        "example": "yD8Rw3DxksW"
                    },
                    "AuthorType": {
                        "type": "string",
                        "enum": [
                            "Contact",
                            "Organization"
                        ],
                        "description": "The contact type of the author. You can only use existing contact type.",
                        "example": "Contact"
                    },
                    "AuthorFullName": {
                        "type": "string",
                        "description": "The full name of the author",
                        "example": "John Smith"
                    },
                    "AuthorAvatarUrl": {
                        "type": "string",
                        "description": "The URL to the author's avatar",
                        "example": "https://api.az.karbonemail.com/images/e546f2bc-e48f-4c2a-9384-a1036c28c081"
                    },
                    "AvatarIndex": {
                        "type": "string",
                        "description": "The background color index number of the author's avatar",
                        "example": 25
                    },
                    "IsEdited": {
                        "type": "boolean",
                        "description": "The value of this property is set to <code>true</code>, if the original comment was edited.",
                        "example": false
                    },
                    "IsDraft": {
                        "type": "boolean",
                        "description": "The value of this property is set to <code>true</code>, if the comment is yet to be published.",
                        "example": false
                    },
                    "DateModified": {
                        "type": "string",
                        "description": "The date and time at which the comment was the most recently edited",
                        "example": "2022-06-17T06:20:01Z"
                    },
                    "HasAttachments": {
                        "type": "boolean",
                        "description": "The value of this property is set to <code>true</code>, if the comment has attachments.",
                        "example": true
                    },
                    "Attachments": {
                        "type": "array",
                        "description": "The details of the Client Task Attachments",
                        "items": {
                            "$ref": "#components/schemas/Attachments"
                        }
                    }
                }
            },
            "LastCommentItemForClientRequest": {
                "type": "object",
                "properties": {
                    "CommentItemKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the comment of the Client Task",
                        "example": "Jj2hzZn1vqm"
                    },
                    "ClientTaskKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Client Task",
                        "example": "35XZhGpm17r7"
                    },
                    "Message": {
                        "type": "string",
                        "description": "The comment message",
                        "example": "I have edited the section as shown in the screenshot"
                    },
                    "PostDateTime": {
                        "type": "string",
                        "description": "The date and time at which the comment was created",
                        "example": "2022-03-23T00:03:22Z"
                    },
                    "AuthorKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the author of the comment",
                        "example": "yD8Rw3DxksW"
                    },
                    "AuthorType": {
                        "type": "string",
                        "enum": [
                            "Contact",
                            "Organization"
                        ],
                        "description": "The contact type of the author. You can only use existing contact type.",
                        "example": "Contact"
                    },
                    "AuthorFullName": {
                        "type": "string",
                        "description": "The full name of the author",
                        "example": "John Smith"
                    },
                    "AuthorAvatarUrl": {
                        "type": "string",
                        "description": "The URL to the author's avatar",
                        "example": "https://api.az.karbonemail.com/images/e546f2bc-e48f-4c2a-9384-a1036c28c081"
                    },
                    "AvatarIndex": {
                        "type": "string",
                        "description": "The background color index number of the author's avatar",
                        "example": 25
                    },
                    "IsEdited": {
                        "type": "boolean",
                        "description": "The value of this property is set to <code>true</code>, if the original comment was edited.",
                        "example": false
                    },
                    "IsDraft": {
                        "type": "boolean",
                        "description": "The value of this property is set to <code>true</code>, if the comment is yet to be published.",
                        "example": false
                    },
                    "DateModified": {
                        "type": "string",
                        "description": "The date and time at which the comment was the most recently edited",
                        "example": "2022-06-17T06:20:01Z"
                    },
                    "HasAttachments": {
                        "type": "boolean",
                        "description": "The value of this property is set to <code>true</code>, if the comment has attachments.",
                        "example": true
                    },
                    "Attachments": {
                        "type": "array",
                        "nullable": true,
                        "description": "The details of the Client Task Attachments. This property will be an empty array",
                        "items": {
                            "type": "object",
                            "nullable": true
                        },
                        "example": []
                    }
                }
            },
            "ClientTaskSummary": {
                "type": "object",
                "properties": {
                    "ClientTaskKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Client Task",
                        "example": "4x6xD7GnPXGL"
                    },
                    "CommentCount": {
                        "type": "number",
                        "description": "The number of comments on the Client Task",
                        "example": 15
                    },
                    "AttachmentCount": {
                        "type": "number",
                        "description": "The number of attachments on the Client Task",
                        "example": 4
                    },
                    "ClientRequestKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Client Request",
                        "example": "2cmnl9fy6mj3"
                    },
                    "Title": {
                        "type": "string",
                        "description": "The title of the Client Task",
                        "example": "Upload this period's payroll timesheets, note any changes, and check-off to provide your approval"
                    },
                    "Description": {
                        "type": "string",
                        "description": "A free form text to add more information about the Client Task",
                        "example": "Please complete the following:  1) Upload this period's payroll timesheets or confirm your time tracking application is up-to-date. 2) Provide comments on any changes, additions and/or time-off requests. 3) Check complete to mark your approval to process the payroll."
                    },
                    "DateCompleted": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date time at which the Client Task was completed",
                        "example": "2022-07-25T00:03:22Z"
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date time at which the Client Task was created",
                        "example": "2021-12-19T20:50:54Z"
                    },
                    "DateModified": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date time at which the Client Task was the most recently modified",
                        "example": "2022-07-25T00:03:22Z"
                    },
                    "DueDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date time at which the Client Task should be completed",
                        "example": "2022-07-27T00:03:22Z"
                    },
                    "Attachments": {
                        "type": "array",
                        "description": "The details of the Client Task Attachments",
                        "items": {
                            "$ref": "#components/schemas/Attachments"
                        }
                    }
                }
            },
            "ClientRequestExpandOptionsWLastCommentItem": {
                "type": "object",
                "properties": {
                    "Recipient": {
                        "type": "object",
                        "description": "The information about Karbon controllers generating this response.",
                        "properties": {
                            "ClientRequestRecipientKey": {
                                "type": "string",
                                "example": "yD8Rw3DxksW",
                                "description": "A Karbon-generated unique identifier for the Client Request Recipient"
                            },
                            "ClientType": {
                                "type": "string",
                                "example": "Contact",
                                "enum": [
                                    "Contact",
                                    "Organization"
                                ],
                                "description": "The client type of the Client Request Recipient. You can only use existing Client Type."
                            },
                            "Name": {
                                "type": "string",
                                "example": "Joe Smith",
                                "description": "The name of the Recipient receiving the Client Task"
                            },
                            "EmailAddress": {
                                "type": "string",
                                "example": "joe.smith@acme.corp",
                                "description": "The email address of the Client Task recipient"
                            },
                            "AuthorAvatarUrl": {
                                "type": "string",
                                "example": "https://stage.az.karbonemail.com/images/e546f2bc-e48f-4c2a-9384-a1036c28c081",
                                "description": "The information about Karbon controllers generating this response."
                            },
                            "AvatarIndex": {
                                "type": "integer",
                                "example": 25,
                                "description": "The background color index number of the Client avatar"
                            }
                        }
                    },
                    "ClientTaskSummaries": {
                        "type": "array",
                        "description": "The summary of all the Client Tasks",
                        "items": {
                            "allOf": [
                                {
                                    "$ref": "#components/schemas/ClientTaskSummary"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "LastCommentItem": {
                                            "$ref": "#components/schemas/LastCommentItemForClientRequest"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "ClientRequestExpandOptionsWOLastCommentItem": {
                "type": "object",
                "properties": {
                    "Recipient": {
                        "type": "object",
                        "description": "The information about Karbon controllers generating this response.",
                        "properties": {
                            "ClientRequestRecipientKey": {
                                "type": "string",
                                "example": "yD8Rw3DxksW",
                                "description": "A Karbon-generated unique identifier for the Client Request Recipient"
                            },
                            "ClientType": {
                                "type": "string",
                                "example": "Contact",
                                "enum": [
                                    "Contact",
                                    "Organization"
                                ],
                                "description": "The client type of the Client Request Recipient. You can only use existing Client Type."
                            },
                            "Name": {
                                "type": "string",
                                "example": "Joe Smith",
                                "description": "The name of the Recipient receiving the Client Task"
                            },
                            "EmailAddress": {
                                "type": "string",
                                "example": "joe.smith@acme.corp",
                                "description": "The email address of the Client Task recipient"
                            },
                            "AuthorAvatarUrl": {
                                "type": "string",
                                "example": "https://stage.az.karbonemail.com/images/e546f2bc-e48f-4c2a-9384-a1036c28c081",
                                "description": "The information about Karbon controllers generating this response."
                            },
                            "AvatarIndex": {
                                "type": "integer",
                                "example": 25,
                                "description": "The background color index number of the Client avatar"
                            }
                        }
                    },
                    "ClientTaskSummaries": {
                        "type": "array",
                        "description": "The summary of all the Client Tasks",
                        "items": {
                            "$ref": "#components/schemas/ClientTaskSummary"
                        }
                    }
                }
            },
            "GetCollapsedClientRequest": {
                "type": "object",
                "required": [
                    "ClientRequestKey"
                ],
                "properties": {
                    "ClientRequestKey": {
                        "type": "string",
                        "example": "2cmnl9fy6mj3",
                        "description": "A Karbon-generated unique identifier for the Client Request"
                    },
                    "RequestTitle": {
                        "type": "string",
                        "example": "Payroll Update Needed",
                        "description": "The title of the Client Task section"
                    },
                    "WorkItemKey": {
                        "type": "string",
                        "description": "A Karbon-generated unique identifier for the Work Item",
                        "example": "3jtk81v2Xtw7"
                    },
                    "WorkItemTitle": {
                        "type": "string",
                        "description": "The title of the Work Item",
                        "example": "Payroll 31 Aug - 15 Sep 2022"
                    },
                    "WorkItemDueDate": {
                        "type": "string",
                        "description": "The date and time by which the Work Item should be complete",
                        "example": "2022-01-29T00:00:00Z"
                    },
                    "WorkItemCompletedDate": {
                        "type": "string",
                        "description": "The date and time at which the Work Item was completed",
                        "example": "2022-02-01T00:00:00Z"
                    },
                    "SentDate": {
                        "type": "string",
                        "description": "The date and time at which the Client Task was sent to the Client",
                        "example": "2022-01-29T00:00:00Z"
                    },
                    "WorkItemStatus": {
                        "type": "string",
                        "description": "Ready To Start",
                        "example": "The current status of the Work Item"
                    },
                    "WorkItemStartDate": {
                        "type": "string",
                        "description": "The date and time at which the Work Item should start",
                        "example": "2021-12-29T00:00:00Z"
                    },
                    "RequestedBy": {
                        "type": "string",
                        "description": "The name of the person who requested the Client Task",
                        "example": "Joe Min"
                    }
                }
            },
            "GetExpandedClientRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "@odata.context": {
                                "type": "string",
                                "example": "https://api.karbonhq.com/v3/$metadata#ClientRequests(Recipient(),ClientTaskSummaries(LastCommentItem()))/$entity",
                                "description": "The information about Karbon controllers generating this response."
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/GetCollapsedClientRequest"
                    },
                    {
                        "$ref": "#/components/schemas/ClientRequestExpandOptionsWLastCommentItem"
                    }
                ]
            },
            "GetExpandedClientRequestWOLastCommentItem": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "@odata.context": {
                                "type": "string",
                                "example": "https://api.karbonhq.com/v3/$metadata#ClientRequests(Recipient(),ClientTaskSummaries(LastCommentItem()))/$entity",
                                "description": "The information about Karbon controllers generating this response."
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/GetCollapsedClientRequest"
                    },
                    {
                        "$ref": "#/components/schemas/ClientRequestExpandOptionsWOLastCommentItem"
                    }
                ]
            },
            "GetComment": {
                "required": [
                    "CommentBody",
                    "AuthorKey",
                    "CreatedDate"
                ],
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "example": "https://api.karbonhq.com/v3/$metadata#Comments/$entity",
                        "description": "The information about Karbon controllers generating this response."
                    },
                    "CommentKey": {
                        "type": "string",
                        "example": "Xn2r5u7xZe",
                        "description": "A Karbon-generated unique identifier for the comment\n"
                    },
                    "CommentTypeKey": {
                        "type": "string",
                        "example": "wF8D81TVZPu",
                        "description": "A Karbon-generated value that is used to identify the Karbon entity (e.g., Work Item, Notes, Contacts) associated with the comment. \n"
                    },
                    "CommentBody": {
                        "type": "string",
                        "example": "Looks good! Lets go ahead with this.",
                        "description": "The comment left behind by a Karbon user.\n"
                    },
                    "CreatedDate": {
                        "type": "string",
                        "example": "2022-06-21T05:38:10.0608412+00:00",
                        "description": "The date and time at which the comment was created in Karbon. This value is automatically generated by Karbon. <br><br>The datetime format is UTC.\n"
                    },
                    "AuthorKey": {
                        "type": "string",
                        "example": "OgCjeo4gwu",
                        "description": "A random value that indicates the email address of the Karbon user who created the comment."
                    }
                }
            },
            "GetBusinessCard": {
                "required": [
                    "value"
                ],
                "type": "object",
                "properties": {
                    "BusinessCardKey": {
                        "type": "string",
                        "example": "2xfLMq5PFqb7",
                        "description": "The unique key for the business card requested."
                    },
                    "IsPrimaryCard": {
                        "type": "bool",
                        "example": true,
                        "description": "Whether this business card is the primary card for a contact."
                    },
                    "Addresses": {
                        "AddressKey": {
                            "type": "string",
                            "example": "3f855e2e-4a1a-4af7-837d-38b0be3ebf90",
                            "description": "A unique identifier for the address"
                        },
                        "AddressLines": {
                            "type": "string",
                            "example": "2400 Bridgeway, Ste 280",
                            "description": "The address lines of an address, typically the street or PO Box "
                        },
                        "City": {
                            "type": "string",
                            "example": "Sausalito",
                            "description": "The town or city portion of an address"
                        },
                        "StateProvinceCounty": {
                            "type": "string",
                            "example": "CA",
                            "description": "The state or region portion of an address"
                        },
                        "ZipCode": {
                            "type": "string",
                            "example": "94965",
                            "description": "The Zip or Post code portion of an address"
                        },
                        "CountryCode": {
                            "type": "string",
                            "example": "US",
                            "description": "The two letter country code of an address"
                        },
                        "Label": {
                            "type": "string",
                            "example": "Work",
                            "description": "A label for the address"
                        }
                    },
                    "PhoneNumbers": {
                        "type": "array",
                        "example": [],
                        "description": "An array of phone number objects."
                    },
                    "WebSites": {
                        "type": "array",
                        "example": [],
                        "description": "An array of website hostnames."
                    },
                    "EmailAddresses": {
                        "type": "array",
                        "example": [],
                        "description": "An array of email addresses."
                    },
                    "OrganizationKey": {
                        "type": "string",
                        "example": "ZGNmtYyLm4z",
                        "description": "The key for the associated organisation."
                    },
                    "RoleOrTitle": {
                        "type": "string",
                        "example": "",
                        "description": "An optional role for the contact."
                    },
                    "FacebookLink": {
                        "type": "string",
                        "example": "",
                        "description": "An optional role for the contact."
                    },
                    "LinkedInLink": {
                        "type": "string",
                        "example": "",
                        "description": "An optional LinkedIn link for the associated contact or organisation."
                    },
                    "TwitterLink": {
                        "type": "string",
                        "example": "",
                        "description": "An optional Twitter link for the associated contact or organisation."
                    },
                    "SkypeLink": {
                        "type": "string",
                        "example": "",
                        "description": "An optional Skype link for the associated contact or organisation."
                    }
                }
            },
            "GetClientGroup": {
                "required": [
                    "value",
                    "@odata.context",
                    "@odata.count"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response.",
                        "example": "https://api.karbonhq.com/v3/$metadata#ClientGroups/KarbonService.ClientGroupSummaryDTO"
                    },
                    "@odata.count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 323,
                        "description": "The total number of Client Groups that satisfy the query criteria."
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "required": [
                                "FullName",
                                "LastModifiedDateTime",
                                "ClientGroupKey",
                                "@odata.type"
                            ],
                            "type": "object",
                            "properties": {
                                "@odata.type": {
                                    "type": "string",
                                    "example": "#KarbonService.ClientGroupSummaryDTO",
                                    "description": "The information about Karbon Objects generating this reponse."
                                },
                                "FullName": {
                                    "type": "string",
                                    "example": "Sample Management Team",
                                    "description": "The full name of the Client Group"
                                },
                                "PhoneNumber": {
                                    "nullable": true,
                                    "type": "string",
                                    "example": "0987888686",
                                    "description": "The phone number associated with the Client Group"
                                },
                                "Website": {
                                    "nullable": true,
                                    "type": "string",
                                    "example": "www.samplemanagement.com",
                                    "description": "The website associated with the Client Group"
                                },
                                "LastModifiedDateTime": {
                                    "type": "string",
                                    "format": "UTC",
                                    "description": "The date and time at which the Client Group was most recently modified.",
                                    "example": "2021-12-29T07:01:53Z"
                                },
                                "ClientGroupKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated unique identifier for the Client Group",
                                    "example": "4DHFn8T3J7N5"
                                }
                            }
                        }
                    },
                    "@odata.nextLink": {
                        "type": "string",
                        "example": "https://api.karbonhq.com/v3/ClientGroups?$skip=100",
                        "description": "The link to next set of Client Groups. @odata.nextLink field will only appear if you have more than 100 Client Groups."
                    }
                }
            },
            "GetContacts": {
                "required": [
                    "value",
                    "@odata.context",
                    "@odata.count"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response.",
                        "example": "https://api.karbonhq.com/v3/$metadata#Contacts/KarbonService.ContactSummaryDTO"
                    },
                    "@odata.count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 323,
                        "description": "The total number of Contacts that satisfy the query criteria."
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "required": [
                                "FullName",
                                "LastModifiedDateTime",
                                "ContactKey",
                                "@odata.type"
                            ],
                            "type": "object",
                            "properties": {
                                "@odata.type": {
                                    "type": "string",
                                    "example": "#KarbonService.ContactSummaryDTO",
                                    "description": "The information about Karbon Objects generating this reponse."
                                },
                                "ContactKey": {
                                    "type": "string",
                                    "example": "29YXnqWcqCf3",
                                    "description": "A Karbon-generated unique identifier for the Contact"
                                },
                                "FullName": {
                                    "type": "string",
                                    "example": "William John Connor",
                                    "description": "The full name of the Contact"
                                },
                                "PreferredName": {
                                    "type": "string",
                                    "example": "Bill",
                                    "description": "The preferred name of the Contact"
                                },
                                "Salutation": {
                                    "type": "string",
                                    "example": "Mr",
                                    "description": "The title to address the Contact"
                                },
                                "ClientOwner": {
                                    "type": "string",
                                    "example": "rodney.muller@samplecompany.com",
                                    "description": "The team member in your firm who looks after client relationship or is responsible for the vast majority of the work of the clients in this Client Group. You can only use the UserKey or the email address of an existing team member."
                                },
                                "ClientManager": {
                                    "type": "string",
                                    "example": "jessica.tse@samplecompany.com",
                                    "description": "The team member in your firm who manages the work for the clients in this Client Group. You can only use the UserKey or the email address of an existing team member"
                                },
                                "Address": {
                                    "nullable": true,
                                    "type": "string",
                                    "example": "42 Galaxy Way, London",
                                    "description": "The Address of the Contact"
                                },
                                "EmailAddress": {
                                    "type": "string",
                                    "example": "william.connor@samplecompany.com",
                                    "description": "The Email Address of the Contact"
                                },
                                "PhoneNumber": {
                                    "nullable": true,
                                    "type": "string",
                                    "example": "0987888686",
                                    "description": "The phone number associated with the Contact"
                                },
                                "RoleOrTitle": {
                                    "type": "string",
                                    "example": "COO",
                                    "description": "The business role or title of the Contact"
                                },
                                "UserDefinedIdentifier": {
                                    "type": "string",
                                    "example": "73YEnqFcqCf3",
                                    "description": "A unique key that you can create to identify this Contact."
                                },
                                "LastModifiedDateTime": {
                                    "type": "string",
                                    "format": "UTC",
                                    "description": "The date and time at which the Contact was most recently modified.",
                                    "example": "2021-12-29T07:01:53Z"
                                }
                            }
                        }
                    },
                    "@odata.nextLink": {
                        "type": "string",
                        "example": "https://api.karbonhq.com/v3/Contacts?$skip=100",
                        "description": "The link to next set of Contacts. @odata.nextLink field will only appear if you have more than 100 Contacts."
                    }
                }
            },
            "GetOrganizations": {
                "required": [
                    "value",
                    "@odata.context",
                    "@odata.count"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response.",
                        "example": "https://api.karbonhq.com/v3/$metadata#Organizations/KarbonService.OrganizationSummaryDTO"
                    },
                    "@odata.count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 323,
                        "description": "The total number of Organizations that satisfy the query criteria."
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "required": [
                                "FullName",
                                "LastModifiedDateTime",
                                "OrganizationKey",
                                "@odata.type"
                            ],
                            "type": "object",
                            "properties": {
                                "@odata.type": {
                                    "type": "string",
                                    "example": "#KarbonService.OrganizationSummaryDTO",
                                    "description": "The information about Karbon Objects generating this reponse."
                                },
                                "OrganizationKey": {
                                    "type": "string",
                                    "example": "29YXnqWcqCf3",
                                    "description": "A Karbon-generated unique identifier for the Organization"
                                },
                                "FullName": {
                                    "type": "string",
                                    "example": "Sample Company",
                                    "description": "The full name of the Organization"
                                },
                                "PhoneNumber": {
                                    "nullable": true,
                                    "type": "string",
                                    "example": "0987888686",
                                    "description": "The phone number associated with the Organization"
                                },
                                "EmailAddress": {
                                    "type": "string",
                                    "example": "info@samplecompany.com",
                                    "description": "The Email Address of the Organization"
                                },
                                "Website": {
                                    "type": "string",
                                    "example": "www.samplecompany.com",
                                    "description": "The website of the Organization"
                                },
                                "LastModifiedDateTime": {
                                    "type": "string",
                                    "format": "UTC",
                                    "description": "The date and time at which the Organization was most recently modified.",
                                    "example": "2021-12-29T07:01:53Z"
                                }
                            }
                        }
                    },
                    "@odata.nextLink": {
                        "type": "string",
                        "example": "https://api.karbonhq.com/v3/Organizations?$skip=100",
                        "description": "The link to next set of Organizations. @odata.nextLink field will only appear if you have more than 100 Organizations."
                    }
                }
            },
            "GetSingleWorkItem": {
                "required": [
                    "ClientKey",
                    "StartDate",
                    "Title",
                    "WorkItemKey",
                    "@odata.type"
                ],
                "type": "object",
                "properties": {
                    "WorkItemKey": {
                        "type": "string",
                        "example": "2LPSrkzbYrn4",
                        "description": "A Karbon-generated unique identifier for the Work Item"
                    },
                    "AssigneeEmailAddress": {
                        "type": "string",
                        "example": "joe@samplecompany.com",
                        "description": "The email address of the user to whom the Work Item has been assigned"
                    },
                    "AssigneeKey": {
                        "type": "string",
                        "example": "4gHCvnbFFqsq",
                        "description": "A Karbon-generated value used to identify the user to whom the Work Item has been assigned"
                    },
                    "AssigneeName": {
                        "type": "string",
                        "example": "Joe Min",
                        "description": "The name of the user to whom the Work Item has been assigned"
                    },
                    "Title": {
                        "type": "string",
                        "example": "Payroll 31 Aug - 15 Sep 2022",
                        "description": "The title of the Work Item"
                    },
                    "ClientKey": {
                        "type": "string",
                        "example": "4ncPZ7q96SGc",
                        "description": "A Karbon-generated value used to identify the Client for whom the Work Item is prepared"
                    },
                    "ClientName": {
                        "type": "string",
                        "example": "Acme Corporation",
                        "description": "The name of the Client for whom the Work Item is prepared"
                    },
                    "ClientType": {
                        "type": "string",
                        "enum": [
                            "Contact",
                            "Organization",
                            "ClientGroup"
                        ],
                        "example": "Organization",
                        "description": "The type of the Client"
                    },
                    "ClientUserDefinedIdentifier": {
                        "type": "string",
                        "example": "ACMECORP",
                        "description": "A unique identifier that you had created to identify the Client. This parameter is not case sensitive."
                    },
                    "RelatedClientGroupKey": {
                        "type": "string",
                        "example": "3LCPr987gNrc",
                        "description": "A Karbon-generated value used to identify the Client Group of the Client"
                    },
                    "ClientGroupKey": {
                        "type": "string",
                        "example": "3LCPr987gNrc",
                        "description": "A Karbon-generated value used to identify the Client Group of the Client"
                    },
                    "RelatedClientGroupName": {
                        "type": "string",
                        "example": "Smith Family Group",
                        "description": "The name of the related Client Group"
                    },
                    "StartDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date and time at which the Work Item should start",
                        "example": "2021-12-29T00:00:00Z"
                    },
                    "DueDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date and time by which the Work Item should be complete",
                        "example": "2022-01-29T00:00:00Z"
                    },
                    "CompletedDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date and time at which the Work Item was completed",
                        "example": "2022-02-01T00:00:00Z"
                    },
                    "ToDoPeriod": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The period, in which the Work Item should start.",
                        "example": "2021-12-29T00:00:00Z"
                    },
                    "WorkType": {
                        "type": "string",
                        "description": "The type of work related to the Work Item",
                        "example": "Payroll"
                    },
                    "WorkStatus": {
                        "type": "string",
                        "description": "The current status of the Work Item",
                        "example": "Ready To Start - Send client requests"
                    },
                    "PrimaryStatus": {
                        "type": "string",
                        "description": "The current parent-level Status of the Work Item. If <code>WorkStatus</code> and <code>PrimaryStatus</code> have different values, <code>PrimaryStatus</code> will be the source of truth for Work Item status.\n",
                        "example": "Ready To Start"
                    },
                    "SecondaryStatus": {
                        "type": "string",
                        "description": "The current child-level Status of the Work Item",
                        "example": "Send client requests"
                    },
                    "WorkTemplateKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Template that generated this Work Item",
                        "example": "p56mtcBhwb9"
                    },
                    "WorkTemplateTile": {
                        "type": "string",
                        "description": "The title of the Work Template",
                        "example": "Payroll processing"
                    },
                    "WorkScheduleKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Work Schedule for this Work Item",
                        "example": "4f3gHnLC323"
                    },
                    "EstimatedBudget": {
                        "deprecated": true,
                        "type": "number",
                        "format": "decimal",
                        "description": "The estimated budget for the Work Item",
                        "example": 1200.05
                    }
                }
            },
            "GetWorkItems": {
                "required": [
                    "value",
                    "@odata.context",
                    "@odata.count"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response.",
                        "example": "https://api.karbonhq.com/v3/$metadata#WorkItems/KarbonService.WorkItemSummaryDTO"
                    },
                    "@odata.count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 323,
                        "description": "The total number of Work Items that satisfy the query criteria."
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "allOf": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "@odata.type": {
                                            "type": "string",
                                            "example": "#KarbonService.WorkItemSummaryDTO",
                                            "description": "The information about Karbon Objects generating this reponse."
                                        }
                                    }
                                },
                                {
                                    "$ref": "#/components/schemas/GetSingleWorkItem"
                                }
                            ]
                        }
                    },
                    "@odata.nextLink": {
                        "type": "string",
                        "example": "https://api.karbonhq.com/v3/WorkItems?$skip=100",
                        "description": "The link to next set of Work Items. @odata.nextLink field will only appear if you have more than 100 Work Items."
                    }
                }
            },
            "RequestCreateWorkItem": {
                "type": "object",
                "required": [
                    "AssigneeEmailAddress",
                    "Title",
                    "ClientKey",
                    "ClientType",
                    "StartDate"
                ],
                "properties": {
                    "AssigneeEmailAddress": {
                        "type": "string",
                        "example": "joe@samplecompany.com",
                        "description": "The email address of the user to whom the Work Item has been assigned"
                    },
                    "Title": {
                        "type": "string",
                        "example": "Payroll 31 Aug - 15 Sep 2022",
                        "description": "The title of the Work Item"
                    },
                    "ClientKey": {
                        "type": "string",
                        "example": "4ncPZ7q96SGc",
                        "description": "A Karbon-generated value used to identify the Client for whom the Work Item is prepared"
                    },
                    "ClientType": {
                        "type": "string",
                        "enum": [
                            "Contact",
                            "Organization",
                            "ClientGroup"
                        ],
                        "example": "Organization",
                        "description": "The type of the Client"
                    },
                    "RelatedClientGroupKey": {
                        "type": "string",
                        "example": "3LCPr987gNrc",
                        "description": "A Karbon-generated value used to identify the Client Group of the Client"
                    },
                    "StartDate": {
                        "type": "string",
                        "format": "ISO 8601",
                        "description": "The date and time at which the Work Item should start",
                        "example": "2021-12-29"
                    },
                    "DueDate": {
                        "type": "string",
                        "format": "ISO 8601",
                        "description": "The date and time by which the Work Item should be complete",
                        "example": "2022-01-29"
                    },
                    "WorkType": {
                        "type": "string",
                        "description": "The type of work related to the Work Item. Enter an existing Work Type.",
                        "example": "Payroll"
                    },
                    "WorkStatus": {
                        "type": "string",
                        "description": "The current status of the Work Item",
                        "example": "Ready To Start - Send client requests"
                    },
                    "WorkTemplateKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Template that will be used to generate this Work Item",
                        "example": "p56mtcBhwb9"
                    },
                    "WorkScheduleKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Work Schedule for this Work Item",
                        "example": "4f3gHnLC323"
                    },
                    "EstimatedBudget": {
                        "deprecated": true,
                        "type": "number",
                        "format": "decimal",
                        "description": "The estimated budget for the Work Item",
                        "example": 1200.05
                    },
                    "Description": {
                        "type": "string",
                        "description": "A free form text field to add more information about the Work Item",
                        "example": "Send to Jo for review"
                    },
                    "UserRoleAssignments": {
                        "type": "array",
                        "description": "The array that describes the roles of the users associated with this Work Item.",
                        "items": {
                            "type": "object",
                            "required": [
                                "RoleKey",
                                "UserProfileKey"
                            ],
                            "properties": {
                                "RoleKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated value used to identify the role of the user",
                                    "example": "2mYzTtly89Lq"
                                },
                                "UserProfileKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated value used to identify the user",
                                    "example": "2Qy48WVCRBcP"
                                }
                            }
                        }
                    },
                    "ClientTaskRecipient": {
                        "type": "object",
                        "required": [
                            "RecipientKey",
                            "LinkType"
                        ],
                        "description": "The details about the recipient of the Client Tasks related to this Work Item.",
                        "properties": {
                            "RecipientKey": {
                                "type": "string",
                                "description": "A Karbon-generated value used to identify the Client",
                                "example": "4ncPZ7q96SGc"
                            },
                            "LinkType": {
                                "type": "string",
                                "enum": [
                                    "Contact",
                                    "Organization"
                                ],
                                "description": "The Karbon entity, from which to pull the email address in case the email address of the Client Task recipient is empty.",
                                "example": "Organization"
                            },
                            "EmailAddress": {
                                "type": "string",
                                "description": "The email address of the recipient.",
                                "example": "acme@corp.com"
                            }
                        }
                    }
                }
            },
            "ResponseCreateClientGroup": {
                "required": [
                    "@odata.context",
                    "ClientGroupKey",
                    "FullName",
                    "RestrictionLevel",
                    "UserDefinedIdentifier"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response.",
                        "example": "https://api.karbonhq.com/v3/$metadata#ClientGroups/$entity"
                    },
                    "@odata.type": {
                        "type": "string",
                        "description": "The information about Karbon Objects generating this reponse."
                    },
                    "ClientGroupKey": {
                        "type": "string",
                        "description": "A Karbon-generated value that is used to identify the Client Group",
                        "example": "38zlxNyJSr8y"
                    },
                    "FullName": {
                        "type": "string",
                        "description": "The full name of the Client Group",
                        "example": "Abigail Silvers"
                    },
                    "ClientOwner": {
                        "type": "string",
                        "description": "The team member in your firm who looks after client relationship or is responsible for the vast majority of the work of the clients in this Client Group. You can only use the UserKey or the email address of an existing team member.",
                        "example": "rodney.muller@samplecompany.com"
                    },
                    "ClientManager": {
                        "type": "string",
                        "description": "The team member in your firm who manages the work for the clients in this Client Group. You can only use the UserKey or the email address of an existing team member.",
                        "example": "jessica.tse@samplecompany.com"
                    },
                    "ContactType": {
                        "type": "string",
                        "description": "The Contact Type for this Client Group. You can only use existing Contact Type.",
                        "example": "Client"
                    },
                    "UserDefinedIdentifier": {
                        "type": "string",
                        "description": "A unique key that you can create to identify this Client Group.",
                        "example": "SILVERS"
                    },
                    "RestrictionLevel": {
                        "type": "string",
                        "description": "The privacy level for this Client Group. <br> <ul><li>Public Client Groups can be managed by anyone in the firm</li> <li>Private Client Groups can only be managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team). Basic details (name of the Contacts and the Work Items) related to such Client Groups are visible to anyone in the firm.</li> <li>Hidden Client Groups are only be visible to and managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team).</li>\n",
                        "example": "Public",
                        "default": "Public",
                        "enum": [
                            "Public",
                            "Private",
                            "Hidden"
                        ]
                    },
                    "PrimaryContact": {
                        "type": "string",
                        "description": "The main contact for a client with multiple contact details.",
                        "example": "Duncan Moore"
                    },
                    "LastModifiedDateTime": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date and time at which this Client Group was last modified.",
                        "example": "2022-07-05T07:30:13.7188114Z"
                    },
                    "Members": {
                        "description": "The members of the Client Group",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "ContactKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated value that is used to identify the Contact",
                                    "example": "34yxkY51knn7"
                                },
                                "OrganizationKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated value that is used to identify the Organization",
                                    "example": "4ncPZ7q96SGc"
                                }
                            }
                        }
                    },
                    "EntityDescription": {
                        "type": "object",
                        "properties": {
                            "Text": {
                                "type": "string",
                                "description": "Free-form text that can be used to add more information about the Client Group",
                                "example": "Bicycle rental service in the New jersey area."
                            }
                        }
                    }
                }
            },
            "CreateClientGroup": {
                "required": [
                    "FullName"
                ],
                "type": "object",
                "properties": {
                    "FullName": {
                        "type": "string",
                        "description": "The full name of the Client Group",
                        "example": "Abigail Silvers"
                    },
                    "ClientOwner": {
                        "type": "string",
                        "description": "The team member in your firm who looks after client relationship or is responsible for the vast majority of the work of the clients in this Client Group. You can only use the UserKey or the email address of an existing team member.",
                        "example": "rodney.muller@samplecompany.com"
                    },
                    "ClientManager": {
                        "type": "string",
                        "description": "The team member in your firm who manages the work for the clients in this Client Group. You can only use the UserKey or the email address of an existing team member.",
                        "example": "jessica.tse@samplecompany.com"
                    },
                    "ContactType": {
                        "type": "string",
                        "description": "The Contact Type for this Client Group. You can only use existing Contact Type.",
                        "example": "Client"
                    },
                    "UserDefinedIdentifier": {
                        "type": "string",
                        "description": "A unique key that you can create to identify this Client Group.",
                        "example": "SILV112"
                    },
                    "RestrictionLevel": {
                        "type": "string",
                        "description": "The privacy level for this Client Group. <br> <ul><li>Public Client Groups can be managed by anyone in the firm</li> <li>Private Client Groups can only be managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team). Basic details (name of the Contacts and the Work Items) related to such Client Groups are visible to anyone in the firm.</li> <li>Hidden Client Groups are only be visible to and managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team).</li>\n",
                        "example": "Public",
                        "default": "Public",
                        "enum": [
                            "Public",
                            "Private",
                            "Hidden"
                        ]
                    },
                    "PrimaryContact": {
                        "type": "string",
                        "description": "The main contact for a client with multiple contact details.",
                        "example": "Duncan Moore"
                    },
                    "EntityDescription": {
                        "type": "object",
                        "properties": {
                            "Text": {
                                "type": "string",
                                "description": "Free-form text that can be used to add more information about the Client Group",
                                "example": "Bicycle rental service in the New jersey area."
                            }
                        }
                    }
                }
            },
            "ResponseCreateContact": {
                "required": [
                    "@odata.context",
                    "@odata.type",
                    "ContactKey",
                    "FirstName",
                    "LastName",
                    "RestrictionLevel",
                    "UserDefinedIdentifier"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response."
                    },
                    "@odata.type": {
                        "type": "string",
                        "description": "The information about Karbon Objects generating this reponse."
                    },
                    "ContactKey": {
                        "type": "string",
                        "description": "A Karbon-generated value that is used to identify the Contact"
                    },
                    "FirstName": {
                        "type": "string",
                        "description": "The first name of the Contact"
                    },
                    "MiddleName": {
                        "type": "string",
                        "example": "John",
                        "description": "The middle name of the Contact"
                    },
                    "LastName": {
                        "type": "string",
                        "example": "Connor",
                        "description": "The last name of the Contact"
                    },
                    "PreferredName": {
                        "type": "string",
                        "example": "Bill",
                        "description": "The preferred name of the Contact"
                    },
                    "Salutation": {
                        "type": "string",
                        "example": "Mr",
                        "description": "The title to address the Contact"
                    },
                    "Suffix": {
                        "type": "string",
                        "example": "Jr.",
                        "description": "The suffix of the Contact"
                    },
                    "ClientOwner": {
                        "type": "string",
                        "description": "The team member in your firm who looks after client relationship or is responsible for the vast majority of the work of the Contact. You can only use the UserKey or the email address of an existing team member.",
                        "example": "rodney.muller@samplecompany.com"
                    },
                    "ClientManager": {
                        "type": "string",
                        "description": "The team member in your firm who manages the work for Contact. You can only use the UserKey or the email address of an existing team member.",
                        "example": "jessica.tse@samplecompany.com"
                    },
                    "ContactType": {
                        "type": "string",
                        "description": "The Contact Type for this Contact. You can only use existing Contact Type.",
                        "example": "Client"
                    },
                    "UserDefinedIdentifier": {
                        "type": "string",
                        "description": "A unique key that you can create to identify this Contact.",
                        "example": "BILLJR"
                    },
                    "RestrictionLevel": {
                        "type": "string",
                        "description": "The privacy level for this Client Group. <br> <ul><li>Public Client Groups can be managed by anyone in the firm</li> <li>Private Client Groups can only be managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team). Basic details (name of the Contacts and the Work Items) related to such Client Groups are visible to anyone in the firm.</li> <li>Hidden Client Groups are only be visible to and managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team).</li>\n",
                        "example": "Public",
                        "default": "Public",
                        "enum": [
                            "Public",
                            "Private",
                            "Hidden"
                        ]
                    },
                    "AvatarUrl": {
                        "type": "string",
                        "description": "The URL to the Contact's avatar",
                        "example": "https://az.karbonemail.com/images/e4ae96c1-8d17-4c6e-af8a-8040482176fc"
                    },
                    "LastModifiedDateTime": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date and time at which this Contact was last modified.",
                        "example": "2022-07-05T07:30:13.7188114Z"
                    },
                    "EntityDescription": {
                        "type": "object",
                        "properties": {
                            "Text": {
                                "type": "string",
                                "description": "Free-form text that can be used to add more information about the Client Group",
                                "example": "Birthday on June 23."
                            }
                        }
                    },
                    "AccountingDetails": {
                        "$ref": "#/components/schemas/DetailsOfAccounting"
                    },
                    "BusinessCards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessCard"
                        }
                    }
                }
            },
            "ContactsCardOrganization": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "ContactKey": {
                            "type": "string",
                            "description": "A Karbon-generated value that is used to identify the Contact"
                        },
                        "FullName": {
                            "type": "string",
                            "description": "The full name of the Contact"
                        },
                        "PreferredName": {
                            "type": "string",
                            "description": "The preferred name of the Contact"
                        },
                        "Salutation": {
                            "type": "string",
                            "description": "The title to address the Contact"
                        },
                        "ClientOwner": {
                            "type": "string",
                            "description": "The team member in your firm who looks after client relationship or is responsible for the vast majority of the work of the Contact. You can only use the UserKey or the email address of an existing team member."
                        },
                        "ClientManager": {
                            "type": "string",
                            "description": "The team member in your firm who manages the work for Contact. You can only use the UserKey or the email address of an existing team member."
                        },
                        "Address": {
                            "nullable": true,
                            "type": "string",
                            "description": "The Address of the Contact"
                        },
                        "EmailAddress": {
                            "type": "string",
                            "description": "The Email Address of the Contact"
                        },
                        "PhoneNumber": {
                            "nullable": true,
                            "type": "string",
                            "description": "The phone number associated with the Contact"
                        },
                        "RoleOrTitle": {
                            "type": "string",
                            "example": "COO",
                            "description": "The business role or title of the Contact"
                        },
                        "UserDefinedIdentifier": {
                            "type": "string",
                            "description": "A unique key that you can create to identify this Contact."
                        },
                        "LastModifiedDateTime": {
                            "type": "string",
                            "format": "UTC",
                            "description": "The date and time at which this Contact was last modified."
                        }
                    }
                }
            },
            "CreateContact": {
                "required": [
                    "FirstName",
                    "LastName"
                ],
                "type": "object",
                "properties": {
                    "FirstName": {
                        "type": "string",
                        "example": "William",
                        "description": "The first name of the Contact"
                    },
                    "MiddleName": {
                        "type": "string",
                        "example": "John",
                        "description": "The middle name of the Contact"
                    },
                    "LastName": {
                        "type": "string",
                        "example": "Connor",
                        "description": "The last name of the Contact"
                    },
                    "PreferredName": {
                        "type": "string",
                        "example": "Bill",
                        "description": "The preferred name of the Contact"
                    },
                    "Salutation": {
                        "type": "string",
                        "example": "Mr",
                        "description": "The title to address the Contact"
                    },
                    "Suffix": {
                        "type": "string",
                        "example": "Jr.",
                        "description": "The suffix of the Contact"
                    },
                    "RestrictionLevel": {
                        "type": "string",
                        "description": "The privacy level for this Contact. <br> <ul><li>Public Contacts can be managed by anyone in the firm</li> <li>Private Contacts can only be managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team). Basic details (name of the Contacts and the Work Items) related to such Contacts are visible to anyone in the firm.</li> <li>Hidden Contacts are only be visible to and managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team).</li>\n",
                        "example": "Public",
                        "default": "Public",
                        "enum": [
                            "Public",
                            "Private",
                            "Hidden"
                        ]
                    },
                    "UserDefinedIdentifier": {
                        "type": "string",
                        "description": "A unique key that you can create to identify this Contact.",
                        "example": "BILLJR"
                    },
                    "BusinessCards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessCardRequest"
                        }
                    },
                    "EntityDescription": {
                        "type": "object",
                        "properties": {
                            "Text": {
                                "type": "string",
                                "description": "Free-form text that can be used to add more information about the Client Group",
                                "example": "Birthday on June 23."
                            }
                        }
                    },
                    "AccountingDetails": {
                        "$ref": "#/components/schemas/DetailsOfAccounting"
                    }
                }
            },
            "NoteRequest": {
                "required": [
                    "AssigneeEmailAddress",
                    "AuthorEmailAddress",
                    "Subject",
                    "Body"
                ],
                "type": "object",
                "properties": {
                    "Subject": {
                        "type": "string",
                        "description": "The subject line of the Note"
                    },
                    "Body": {
                        "type": "string",
                        "description": "The body of the Note. This property supports HTML."
                    },
                    "AuthorEmailAddress": {
                        "type": "string",
                        "description": "The email address of the Note's author"
                    },
                    "AssigneeEmailAddress": {
                        "type": "string",
                        "description": "The email address of the Note's reader"
                    },
                    "DueDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date by which the actions on the note must be complete"
                    },
                    "TodoDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date for which the actions will be executed"
                    },
                    "Timelines": {
                        "type": "array",
                        "description": "The Timelines to which this note will be associated. If Notes are linked to a Work Item, the Timeline of the Client (associated with the Work Item) will show the Notes.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "EntityType": {
                                    "type": "string",
                                    "description": "The type of entity this note will be linked to",
                                    "enum": [
                                        "WorkItem",
                                        "Contact",
                                        "Organization",
                                        "ClientGroup"
                                    ]
                                },
                                "EntityKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated value to indicate the entity"
                                }
                            }
                        }
                    }
                }
            },
            "NoteResponse": {
                "required": [
                    "AssigneeEmailAddress",
                    "AuthorEmailAddress",
                    "Subject",
                    "Body"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response"
                    },
                    "Id": {
                        "type": "string",
                        "description": "A Karbon-generated value that is used to identify the Note"
                    },
                    "Subject": {
                        "type": "string",
                        "description": "The subject line of the Note"
                    },
                    "Body": {
                        "type": "string",
                        "description": "The body of the Note. This property supports HTML."
                    },
                    "CreatedDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date at which the note was created"
                    },
                    "AuthorEmailAddress": {
                        "type": "string",
                        "description": "The email address of the Note's author"
                    },
                    "AssigneeEmailAddress": {
                        "type": "string",
                        "description": "The email address of the Note's reader"
                    },
                    "DueDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date by which the actions on the note must be complete"
                    },
                    "TodoDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date for which the actions will be executed"
                    },
                    "Timelines": {
                        "type": "array",
                        "description": "The Timelines to which this note will be associated. If Notes are linked to a Work Item, the Timeline of the Client (associated with the Work Item) will show the Notes.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "EntityType": {
                                    "type": "string",
                                    "description": "The type of entity this note will be linked to",
                                    "enum": [
                                        "WorkItem",
                                        "Contact",
                                        "Organization",
                                        "ClientGroup"
                                    ]
                                },
                                "EntityKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated value to indicate the entity"
                                }
                            }
                        }
                    },
                    "Comments": {
                        "type": "array",
                        "description": "The comments for this note",
                        "items": {
                            "type": "object",
                            "properties": {
                                "CommentKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated value that is used to identify the Comment"
                                },
                                "CommentBody": {
                                    "type": "string",
                                    "description": "A Karbon-generated value that is used to identify the Comment"
                                },
                                "CreatedDate": {
                                    "type": "string",
                                    "format": "UTC",
                                    "description": "The date at which the Comment was created"
                                },
                                "AuthorEmailAddress": {
                                    "type": "string",
                                    "description": "The email address of the Comment's author"
                                }
                            }
                        }
                    }
                }
            },
            "CreateOrganizationResponse": {
                "required": [
                    "@odata.context",
                    "@odata.type",
                    "OrganizationKey",
                    "FullName",
                    "RestrictionLevel",
                    "UserDefinedIdentifier"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response."
                    },
                    "@odata.type": {
                        "type": "string",
                        "description": "The information about Karbon Objects generating this reponse."
                    },
                    "OrganizationKey": {
                        "type": "string",
                        "description": "A Karbon-generated value that is used to identify the Organization"
                    },
                    "FullName": {
                        "type": "string",
                        "description": "The full name of the Organization"
                    },
                    "ClientOwner": {
                        "type": "string",
                        "description": "The team member in your firm who looks after client relationship or is responsible for the vast majority of the work of the clients in this Organization. You can only use the UserKey or the email address of an existing team member."
                    },
                    "ClientManager": {
                        "type": "string",
                        "description": "The team member in your firm who manages the work for the clients in this Organization. You can only use the UserKey or the email address of an existing team member."
                    },
                    "ContactType": {
                        "type": "string",
                        "description": "The Contact Type for this Organization. You can only use existing Contact Type."
                    },
                    "UserDefinedIdentifier": {
                        "type": "string",
                        "description": "A unique key that you can create to identify this Organization."
                    },
                    "RestrictionLevel": {
                        "type": "string",
                        "description": "The privacy level for this Organization. <br> <ul><li>Public Organization can be managed by anyone in the firm</li> <li>Private Organization can only be managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team). Basic details (name of the Organization and the Work Items) related to such Organization are visible to anyone in the firm.</li> <li>Hidden Organization are only be visible to and managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team).</li>\n",
                        "default": "Public",
                        "enum": [
                            "Public",
                            "Private",
                            "Hidden"
                        ]
                    },
                    "LastModifiedDateTime": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date and time at which this Contact was last modified.",
                        "example": "2022-07-05T07:30:13.7188114Z"
                    },
                    "EntityDescription": {
                        "type": "object",
                        "properties": {
                            "Text": {
                                "type": "string",
                                "description": "Free-form text that can be used to add more information about the Organization",
                                "example": "Birthday on June 23."
                            }
                        }
                    },
                    "AccountingDetails": {
                        "$ref": "#/components/schemas/DetailsOfAccounting"
                    }
                }
            },
            "CreateOrganization": {
                "required": [
                    "FullName"
                ],
                "type": "object",
                "properties": {
                    "FullName": {
                        "type": "string",
                        "description": "The full name of the Organization"
                    },
                    "ClientOwner": {
                        "type": "string",
                        "description": "The team member in your firm who looks after client relationship or is responsible for the vast majority of the work of the clients in this Organization. You can only use the UserKey or the email address of an existing team member."
                    },
                    "ClientManager": {
                        "type": "string",
                        "description": "The team member in your firm who manages the work for the clients in this Organization. You can only use the UserKey or the email address of an existing team member."
                    },
                    "ContactType": {
                        "type": "string",
                        "description": "The Contact Type for this Organization. You can only use existing Contact Type."
                    },
                    "UserDefinedIdentifier": {
                        "type": "string",
                        "description": "A unique key that you can create to identify this Organization."
                    },
                    "RestrictionLevel": {
                        "type": "string",
                        "description": "The privacy level for this Organization. <br> <ul><li>Public Organization can be managed by anyone in the firm</li> <li>Private Organization can only be managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team). Basic details (name of the Organization and the Work Items) related to such Organization are visible to anyone in the firm.</li> <li>Hidden Organization are only be visible to and managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team).</li>\n",
                        "default": "Public",
                        "enum": [
                            "Public",
                            "Private",
                            "Hidden"
                        ]
                    },
                    "BusinessCards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessCardRequest"
                        }
                    },
                    "EntityDescription": {
                        "type": "object",
                        "properties": {
                            "Text": {
                                "type": "string",
                                "description": "Free-form text that can be used to add more information about the Organization"
                            }
                        }
                    },
                    "AccountingDetails": {
                        "$ref": "#/components/schemas/DetailsOfAccounting"
                    }
                }
            },
            "UpdateOrganization": {
                "required": [
                    "FullName"
                ],
                "type": "object",
                "properties": {
                    "FullName": {
                        "type": "string",
                        "description": "The full name of the Organization"
                    },
                    "ClientOwner": {
                        "type": "string",
                        "description": "The team member in your firm who looks after client relationship or is responsible for the vast majority of the work of the clients in this Organization. You can only use the UserKey or the email address of an existing team member."
                    },
                    "ClientManager": {
                        "type": "string",
                        "description": "The team member in your firm who manages the work for the clients in this Organization. You can only use the UserKey or the email address of an existing team member."
                    },
                    "ContactType": {
                        "type": "string",
                        "description": "The Contact Type for this Organization. You can only use existing Contact Type."
                    },
                    "UserDefinedIdentifier": {
                        "type": "string",
                        "description": "A unique key that you can create to identify this Organization."
                    },
                    "RestrictionLevel": {
                        "type": "string",
                        "description": "The privacy level for this Organization. <br> <ul><li>Public Organization can be managed by anyone in the firm</li> <li>Private Organization can only be managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team). Basic details (name of the Organization and the Work Items) related to such Organization are visible to anyone in the firm.</li> <li>Hidden Organization are only be visible to and managed by the [Client Team](https://help.karbonhq.com/en/articles/1524707-create-a-client-team).</li>\n",
                        "default": "Public",
                        "enum": [
                            "Public",
                            "Private",
                            "Hidden"
                        ]
                    },
                    "BusinessCards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessCardRequest"
                        }
                    },
                    "EntityDescription": {
                        "type": "object",
                        "properties": {
                            "Text": {
                                "type": "string",
                                "description": "Free-form text that can be used to add more information about the Organization"
                            }
                        }
                    }
                }
            },
            "WithBusinessCardsCreateOrganizationResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CreateOrganizationResponse"
                    },
                    {
                        "$ref": "#/components/schemas/BusinessCardsRequestAsArray"
                    }
                ]
            },
            "GetSingleTimeSheet": {
                "type": "object",
                "required": [
                    "TimesheetKey",
                    "StartDate",
                    "EndDate",
                    "UserKey",
                    "Status"
                ],
                "properties": {
                    "TimesheetKey": {
                        "type": "string",
                        "example": "3MslJsCcnnkm",
                        "description": "A Karbon-generated unique identifier for the Timesheet"
                    },
                    "StartDate": {
                        "type": "string",
                        "format": "UTC",
                        "example": "2022-07-04T00:00:00Z",
                        "description": "The start date for the TimeSheet"
                    },
                    "EndDate": {
                        "type": "string",
                        "format": "UTC",
                        "example": "2022-07-10T00:00:00Z",
                        "description": "The end date for the TimeSheet"
                    },
                    "UserKey": {
                        "type": "string",
                        "example": "2mYzTtly89Lq",
                        "description": "A Karbon-generated key used to identify the user, this Timesheet belongs to"
                    },
                    "Status": {
                        "type": "string",
                        "example": "Draft",
                        "enum": [
                            "Approved",
                            "Declined",
                            "Draft",
                            "Submitted"
                        ],
                        "description": "The approval status of the Timesheet"
                    },
                    "WorkItemKeys": {
                        "type": "array",
                        "description": "An array of WorkItem keys",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "2m6pSFxRzcF2"
                        ]
                    },
                    "TimeEntries": {
                        "type": "array",
                        "description": "An array of Time entries",
                        "items": {
                            "type": "object",
                            "properties": {
                                "TimeEntryKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated key used to identify the Time Entry",
                                    "example": "WYscpLQXR4J-2m6pSFxRzcF2-2mYzTtly89Lq-3j5ZpPT4RDbT-4kbT4BYLMLhv-QbQFGnqPDDs"
                                },
                                "EntityKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated key used to identify the entity this Time Entry is related to",
                                    "example": "2m6pSFxRzcF2"
                                },
                                "WorkItemKeys": {
                                    "type": "string",
                                    "description": "A Karbon-generated key used to identify the Work Item this Time Entry is related to",
                                    "example": "2m6pSFxRzcF2"
                                },
                                "ClientKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated key used to identify the Client this Time Entry is related to",
                                    "example": "2mYzTtly89Lq"
                                },
                                "ClientType": {
                                    "type": "string",
                                    "description": "The type of Client",
                                    "example": "Organization"
                                },
                                "RoleName": {
                                    "type": "string",
                                    "description": "The role of the user for whom the Time Entry was created",
                                    "example": "Accountant"
                                },
                                "TaskTypeName": {
                                    "type": "string",
                                    "description": "The type of task performed by the user",
                                    "example": "Auditing"
                                },
                                "Minutes": {
                                    "type": "integer",
                                    "description": "The total time (in minutes) spent on the task",
                                    "example": 360
                                },
                                "HourlyRate": {
                                    "type": "number",
                                    "format": "decimal",
                                    "description": "The hourly rate of the user who worked on the task",
                                    "example": 80
                                },
                                "Descriptions": {
                                    "type": "array",
                                    "description": "Free-form text that has more information about the Time Entry",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "Continued working on the end-year accounting"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "GetTimeSheets": {
                "required": [
                    "value",
                    "@odata.context",
                    "@odata.count"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response.",
                        "example": "https://api.karbonhq.com/v3/$metadata#Timesheets"
                    },
                    "@odata.count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 4,
                        "description": "The total number of Timesheets that satisfy the query criteria."
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#components/schemas/GetSingleTimeSheet"
                        }
                    },
                    "@odata.nextLink": {
                        "type": "string",
                        "example": "https://api.karbonhq.com/v3/Timesheets?$skip=100",
                        "description": "The link to next set of Timesheets. @odata.nextLink field will only appear if you have more than 100 Timesheets."
                    }
                }
            },
            "GetSingleUser": {
                "required": [
                    "Id",
                    "Name",
                    "EmailAddress"
                ],
                "type": "object",
                "properties": {
                    "Id": {
                        "type": "string",
                        "description": "A Karbon-generated key used to identify the User",
                        "example": "4LR9qmR5NQ6T"
                    },
                    "Name": {
                        "type": "string",
                        "example": "Joe Min",
                        "description": "The name of the User"
                    },
                    "EmailAddress": {
                        "type": "string",
                        "example": "joe@samplecompany.com",
                        "description": "The email address of the User"
                    }
                }
            },
            "GetUserById": {
                "required": [
                    "UserId"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response.",
                        "example": "https://api.karbonhq.com/v3/$metadata#Users/KarbonService.UserProfileDTO/$entity"
                    },
                    "@odata.type": {
                        "type": "string",
                        "description": "The information about Karbon data type in this response.",
                        "example": "#KarbonService.UserProfileDTO"
                    },
                    "Id": {
                            "type": "string",
                            "description": "The unique Id of the User, this should match the key used in the URL",
                            "example": "2bYxtn94ZSdY"
                    },
                    "Name": {
                        "type": "string",
                        "description": "The name of the User",
                        "example": "Janet Smith"
                    },
                    "EmailAddress": {
                        "type": "string",
                        "description": "The email address of the User",
                        "example": "janet@example.com"
                    },
                    "CapacityMinutesPerWeek": {
                        "type": "integer",
                        "description": "The number of billable minutes allocated to the user per week",
                        "example": 2400
                    },
                    "Permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the permissions allocated to the User",
                        "example": ["User"]
                    },
                    "Roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the roles allocated to the User",
                        "example": ["Accountant", "Bookkeeper"]
                    },
                    "Teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the teams the User is member of",
                        "example": ["Accountants", "Bookkeepers"]
                    }
                }
            },
            "GetUsers": {
                "required": [
                    "value",
                    "@odata.context",
                    "@odata.count"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response.",
                        "example": "https://api.karbonhq.com/v3/$metadata#Users"
                    },
                    "@odata.count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1,
                        "description": "The total number of Users that satisfy the query criteria."
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#components/schemas/GetSingleUser"
                        }
                    },
                    "@odata.nextLink": {
                        "type": "string",
                        "example": "https://api.karbonhq.com/v3/Users?$skip=100",
                        "description": "The link to next set of Users. @odata.nextLink field will only appear if you have more than 100 Users."
                    }
                }
            },
            "GetWebhookSubscriptions": {
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response",
                        "example": "https://api.karbonhq.com/v3/$metadata#WebhookSubscriptions/$entity"
                    },
                    "TargetUrl": {
                        "type": "string",
                        "description": "The URL to your server that is waiting to receive information about the <code>WebhookType</code> from Karbon",
                        "example": "https://evelyn.info/hooks/catch/3550924/ovsbqn4/"
                    },
                    "WebhookType": {
                        "type": "string",
                        "description": "The type of Karbon entity, which the Webhook Subscription is associated with",
                        "example": "Contact"
                    }
                }
            },
            "WorkSchedulePUTRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "required": [
                            "WorkScheduleKey"
                        ],
                        "properties": {
                            "WorkScheduleKey": {
                                "type": "string",
                                "description": "The key of the WorkSchedule, this should match the key used in the URL",
                                "example": "Bm6CGxrWp8W"
                            }
                        }
                    }, {
                        "$ref": "#/components/schemas/WorkScheduleRequest"
                    }
                ]
            },
            "WorkScheduleRequest": {
                "required": [
                    "CreatedFromWorkItemKey",
                    "RecurrenceFrequency",
                    "CustomFrequencyMultiple",
                    "ScheduleStartDate",
                    "ScheduleDueDateMethod",
                    "PreventStartEndOnWeekend",
                    "InitializeTasksBeforeStartDateUnits",
                    "InitializeTasksBeforeStartDateMultiple",
                    "WorkItemTitleDefinition"
                ],
                "type": "object",
                "properties": {
                    "CreatedFromWorkItemKey": {
                        "type": "string",
                        "description": "The key of the Work Item, which the Work Schedule will be assigned to. This value will be <code>null</code>.",
                        "example": null
                    },
                    "RecurrenceFrequency": {
                        "type": "string",
                        "description": "The unit of time at which this Work Schedule should repeat. Once set, the value of this property can not be changed.",
                        "enum": [
                            "Day",
                            "Week",
                            "SemiMonth",
                            "Fortnight",
                            "Month",
                            "Quarter",
                            "Year",
                            "Custom"
                        ],
                        "example": "Custom"
                    },
                    "CustomFrequencyUnits": {
                        "type": "string",
                        "nullable": true,
                        "description": "The unit of time at which this Work Schedule should repeat. Once set, the value of this property can not be changed.<br> This property is only applicable if <code>RecurrenceFrequency</code> is set to <code>Custom</code>.\n",
                        "enum": [
                            "Days",
                            "Weeks",
                            "Months",
                            "Years"
                        ],
                        "example": "Days"
                    },
                    "CustomFrequencyMultiple": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "description": "The multiple of time unit at which this Work Schedule should repeat.  This property is not applicable if <code>RecurrenceFrequency</code> is set to <code>SemiMonth</code>, <code>Fortnight</code>, or <code>Quarter</code>.\n",
                        "example": 3
                    },
                    "ScheduleStartDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date at which this Work Schedule should start running",
                        "example": "2021-07-01"
                    },
                    "ScheduleEndDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date at which this Work Schedule should stop running<br>To set the Work Schedule to run forever, set the value of this property to <code>0001-01-01</code>.",
                        "example": "2021-09-01"
                    },
                    "ScheduleDueDateMethod": {
                        "type": "string",
                        "description": "The method that should be used to count the Due Date for the Work Item",
                        "enum": [
                            "DaysFromStartDate",
                            "DayOfMonth",
                            "LastDayOfMonth",
                            "DayOfNextMonth",
                            "DayOfSubsequentMonth",
                            "NoDueDate"
                        ],
                        "example": "DaysFromStartDate"
                    },
                    "ScheduleDueDateDays": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The value of the count for the Due Date<br>This property is not applicable if <code>ScheduleDueDateMethod</code> is set to <code>LastDayOfMonth</code> or <code>NoDueDate</code>.<br><br>Example of usage: <table> <thead>\n    <th>ScheduleDueDateMethod</th>\n    <th>ScheduleDueDateDays</th>\n    <th>Read Due Date as</th>\n</thead> <tbody>\n    <tr>\n        <td>DaysFromStartDate</td>\n        <td>7</td>\n        <td>7 days after start date</td>\n    </tr>\n    <tr>\n        <td>DayOfMonth</td>\n        <td>7</td>\n        <td>7th day of the current month</td>\n    </tr>\n    <tr>\n        <td>LastDayOfMonth</td>\n        <td>N/A</td>\n        <td>Last day of the current month</td>\n    </tr>\n    <tr>\n        <td>DayOfNextMonth</td>\n        <td>7</td>\n        <td>7th day of the next month</td>\n    </tr>\n    <tr>\n        <td>NoDueDate</td>\n        <td>N/A</td>\n        <td>Work has no due date</td>\n    </tr>\n</tbody> </table>\n",
                        "example": 7
                    },
                    "ScheduleDueDateMonthMultiple": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The value to denote the number of the months, if the due date is after 2 months.<br>This property is only applicable if <code>ScheduleDueDateMethod</code> is set to <code>DayOfSubsequentMonth</code>.<br><br>Example of usage: <table> <thead>\n    <th>ScheduleDueDateMethod</th>\n    <th>ScheduleDueDateDays</th>\n    <th>ScheduleDueDateMonthMultiple</th>\n    <th>Read Due Date as</th>\n</thead> <tbody>\n    <tr>\n        <td>DaysFromStartDate</td>\n        <td>7</td>\n        <td>3</td>\n        <td>7th day of the 3rd month after start date</td>\n    </tr>\n</tbody> </table>\n",
                        "example": 3
                    },
                    "PreventStartEndOnWeekend": {
                        "type": "boolean",
                        "description": "If the value of this property is set to <code>true</code>, the Work Item will not start on Weekends.",
                        "example": true
                    },
                    "InitializeBeforeStartDateUnits": {
                        "type": "string",
                        "description": "You can automatically create a Work Item before its Start date. Use this property to set the unit of delay between Start date and Work Item creation date. \n",
                        "enum": [
                            "Days",
                            "Weeks",
                            "Months",
                            "Years"
                        ],
                        "example": "Days"
                    },
                    "InitializeBeforeStartDateMultiple": {
                        "type": "integer",
                        "format": "int32",
                        "description": "You can automatically create a Work Item before its Start date. Use this property to set the multiple of delay unit between Start date and Work Item creation date.",
                        "example": 3
                    },
                    "InitializeTasksBeforeStartDateUnits": {
                        "type": "string",
                        "description": "You can automatically create budget and tasks for a Work Item before its Start date. Use this property to set the unit of delay between Start date and task creation date.",
                        "enum": [
                            "Days",
                            "Weeks",
                            "Months",
                            "Years"
                        ],
                        "example": "Days"
                    },
                    "InitializeTasksBeforeStartDateMultiple": {
                        "type": "integer",
                        "format": "int32",
                        "description": "You can automatically create budget and tasks for a Work Item before its Start date. Use this property to set the multiple of delay unit between Start date and task creation date.",
                        "example": 3
                    },
                    "WorkItemTitleDefinition": {
                        "type": "string",
                        "description": "Use this property to define the format of the Work Item title. Karbon offers a series of object that you can use to construct Work Item Title. For more information, see Technical Guide to Work Item Title Definition.\n",
                        "example": "[{\"Text\":\"Payroll\",\"Variable\":null,\"Format\":null,\"Offset\":0},{\"Text\":null,\"Variable\":\"RepeatPeriod\",\"Format\":\"DD MMM, YYYY - DD MMM, YYYY\",\"Offset\":0}]"
                    }
                }
            },
            "GetWorkSchedule": {
                "required": [
                    "@odata.context",
                    "WorkScheduleKey",
                    "ClientKey",
                    "ClientType",
                    "CreatedFromWorkItemKey",
                    "RecurrenceFrequency",
                    "CustomFrequencyMultiple",
                    "ScheduleStartDate",
                    "ScheduleDueDateMethod",
                    "AssigneeUserKey",
                    "PreventStartEndOnWeekend",
                    "InitializeTasksBeforeStartDateUnits",
                    "InitializeTasksBeforeStartDateMultiple",
                    "WorkItemTitleDefinition"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response.",
                        "example": "https://api.karbonhq.com/v3/$metadata#WorkSchedules/$entity"
                    },
                    "WorkScheduleKey": {
                        "type": "string",
                        "description": "A Karbon-generated unique identifier for the Work Schedule",
                        "example": "4yRJNlPnjgtL"
                    },
                    "ClientKey": {
                        "type": "string",
                        "description": "A Karbon-generated value used to identify the Client for whom the Work Item is prepared",
                        "example": "3xhJX26hfsR8"
                    },
                    "ClientType": {
                        "type": "string",
                        "description": "The type of the Client",
                        "enum": [
                            "Contact",
                            "Organization",
                            "ClientGroup"
                        ],
                        "example": "Contact"
                    },
                    "CreatedFromWorkItemKey": {
                        "type": "string",
                        "description": "The key of the Work Item, which the Work Schedule will be assigned to. This value will be <code>null</code>.",
                        "example": null
                    },
                    "RecurrenceFrequency": {
                        "type": "string",
                        "description": "The denominator of time period at which this Work Schedule should repeat. Once set, the value of this property can not be changed.",
                        "enum": [
                            "Day",
                            "Week",
                            "SemiMonth",
                            "Fortnight",
                            "Month",
                            "Quarter",
                            "Year",
                            "Custom"
                        ],
                        "example": "Custom"
                    },
                    "CustomFrequencyUnits": {
                        "type": "string",
                        "nullable": true,
                        "description": "The unit of time at which this Work Schedule should repeat. Once set, the value of this property can not be changed.<br> This property is only applicable if <code>RecurrenceFrequency</code> is set to <code>Custom</code>.\n",
                        "enum": [
                            "Days",
                            "Weeks",
                            "Months",
                            "Years"
                        ],
                        "example": "Days"
                    },
                    "CustomFrequencyMultiple": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "description": "The multiple of time unit at which this Work Schedule should repeat.  This property is not applicable if <code>RecurrenceFrequency</code> is set to <code>SemiMonth</code>, <code>Fortnight</code>, or <code>Quarter</code>.\n",
                        "example": 3
                    },
                    "FrequencyDescription": {
                        "type": "string",
                        "description": "A description of the Frequency",
                        "example": "Every 3 Days"
                    },
                    "ScheduleStartDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date at which this Work Schedule should start running",
                        "example": "2021-07-01"
                    },
                    "ScheduleEndDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date at which this Work Schedule should stop running<br>To set the Work Schedule to run forever, set the value of this property to <code>0001-01-01</code>.",
                        "example": "2021-09-01"
                    },
                    "ScheduleDueDateMethod": {
                        "type": "string",
                        "description": "The method that should be used to count the Due Date for the Work Item",
                        "enum": [
                            "DaysFromStartDate",
                            "DayOfMonth",
                            "LastDayOfMonth",
                            "DayOfNextMonth",
                            "DayOfSubsequentMonth",
                            "NoDueDate"
                        ],
                        "example": "DaysFromStartDate"
                    },
                    "ScheduleDueDateDays": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The value of the count for the Due Date<br>This property is not applicable if <code>ScheduleDueDateMethod</code> is set to <code>LastDayOfMonth</code> or <code>NoDueDate</code>.<br><br>Example of usage:  <table>\n        <th>ScheduleDueDateMethod</th>\n        <th>ScheduleDueDateDays</th>\n        <th>Read Due Date as</th>\n        <tr>\n            <td>DaysFromStartDate</td>\n            <td>7</td>\n            <td>7 days after start date</td>\n        </tr>\n        <tr>\n            <td>DayOfMonth</td>\n            <td>7</td>\n            <td>7th day of the current month</td>\n        </tr>\n        <tr>\n            <td>LastDayOfMonth</td>\n            <td>N/A</td>\n            <td>Last day of the current month</td>\n        </tr>\n        <tr>\n            <td>DayOfNextMonth</td>\n            <td>7</td>\n            <td>7th day of the next month</td>\n        </tr>\n        <tr>\n            <td>NoDueDate</td>\n            <td>N/A</td>\n            <td>Work has no due date</td>\n        </tr> \n</table>\n",
                        "example": 7
                    },
                    "ScheduleDueDateMonthMultiple": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The value to denote the number of the months, if the due date is after 2 months.<br>This property is only applicable if <code>ScheduleDueDateMethod</code> is set to <code>DayOfSubsequentMonth</code>.<br><br>Example of usage: <table> <thead>\n    <th>ScheduleDueDateMethod</th>\n    <th>ScheduleDueDateDays</th>\n    <th>ScheduleDueDateMonthMultiple</th>\n    <th>Read Due Date as</th>\n</thead> <tbody>\n    <tr>\n        <td>DaysFromStartDate</td>\n        <td>7</td>\n        <td>3</td>\n        <td>7th day of the 3rd month after start\ndate</td>\n    </tr>\n</tbody> </table>\n",
                        "example": 3
                    },
                    "AssigneeUserKey": {
                        "type": "string",
                        "description": "A Karbon-generated unique identifier to indicate the user, whom the Work Item has been assigned to",
                        "example": "3VQ8Qrq944NW"
                    },
                    "WorkItemDescription": {
                        "type": "string",
                        "description": "A free form text field for more information about the Work Item",
                        "example": "Send to Jo for review"
                    },
                    "PreventStartEndOnWeekend": {
                        "type": "boolean",
                        "description": "If the value of this property is set to <code>true</code>, the Work Item will not start on Weekends.",
                        "example": true
                    },
                    "InitializeBeforeStartDateUnits": {
                        "type": "string",
                        "description": "You can automatically create a Work Item before its Start date. Use this property to set the unit of delay between Start date and Work Item creation date. \n",
                        "enum": [
                            "Days",
                            "Weeks",
                            "Months",
                            "Years"
                        ],
                        "example": "Days"
                    },
                    "InitializeBeforeStartDateMultiple": {
                        "type": "integer",
                        "format": "int32",
                        "description": "You can automatically create a Work Item before its Start date. Use this property to set the multiple of delay unit between Start date and Work Item creation date.",
                        "example": 3
                    },
                    "WorkItemTitleDefinition": {
                        "type": "string",
                        "description": "Use this property to define the format of the Work Item title. Karbon offers a series of object that you can use to construct Work Item Title. For more information, see Technical Guide to Work Item Title Definition.\n",
                        "example": "[{\"Text\":\"Payroll \",\"Variable\":null,\"Format\":null,\"Offset\":0},{\"Text\":null,\"Variable\":\"RepeatPeriod\",\"Format\":\"DD MMM, YYYY - DD MMM, YYYY\",\"Offset\":0}]"
                    },
                    "WorkItemTitleDisplayText": {
                        "type": "string",
                        "description": "The title of the related Work Item",
                        "example": "Payroll 31 Aug - 15 Sep"
                    },
                    "InitializeTasksBeforeStartDateUnits": {
                        "type": "string",
                        "description": "You can automatically create budget and tasks for a Work Item before its Start date. Use this property to set the unit of delay between Start date and task creation date.",
                        "enum": [
                            "Days",
                            "Weeks",
                            "Months",
                            "Years"
                        ],
                        "example": "Days"
                    },
                    "InitializeTasksBeforeStartDateMultiple": {
                        "type": "integer",
                        "format": "int32",
                        "description": "You can automatically create budget and tasks for a Work Item before its Start date. Use this property to set the multiple of delay unit between Start date and task creation date.",
                        "example": 3
                    }
                }
            },
            "GetSingleWorkTemplate": {
                "required": [
                    "WorkTemplateKey",
                    "WorkTypeKey",
                    "HasScheduledClientTaskGroups",
                    "DraftHasChanges",
                    "PublishedDate",
                    "NumberOfWorkItemsCreated",
                    "DateLastWorkItemCreated",
                    "DateModified"
                ],
                "type": "object",
                "properties": {
                    "WorkTemplateKey": {
                        "type": "string",
                        "description": "A Karbon-generated unique identifier for the Work Template",
                        "example": "2689zyQfqDzw"
                    },
                    "Title": {
                        "type": "string",
                        "description": "The title of the Work Template",
                        "example": "Business tax return (Forms 1120/1120S/1065/990)"
                    },
                    "Description": {
                        "type": "string",
                        "description": "A free text field to add more information about the Work Template",
                        "example": "Set the start date as the date to begin work (e.g. January 1) and the due date is the filing date (e.g. March 15 for partnerships/S Corps; or April 15 for C corps; or typically May 15 for Exempt orgs). Assign the work to the Admin initially. The work is expected to take 28 days."
                    },
                    "WorkTypeKey": {
                        "type": "string",
                        "description": "A Karbon-generated unique identifier to denote the Work Type",
                        "example": "3GnmdG1vNVzm"
                    },
                    "HasScheduledClientTaskGroups": {
                        "type": "boolean",
                        "description": "This property is set to true, if the Work Template has scheduled Client Tasks",
                        "example": false
                    },
                    "EstimatedBudget": {
                        "type": "string",
                        "description": "The estimated budget for the Work Items generated using this Work Template. This property value will be <code>null</code>.",
                        "example": null
                    },
                    "EstimatedTime": {
                        "type": "string",
                        "description": "The estimated time required to complete the Work Items generated using this Work Template. This property value will be <code>null</code>.",
                        "example": null
                    },
                    "DraftHasChanges": {
                        "type": "boolean",
                        "description": "This property is set to true, if the Work Template has unpublished changes",
                        "example": false
                    },
                    "PublishedDate": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The date at which this Work Template was published",
                        "example": "2022-07-21T07:14:08Z"
                    },
                    "NumberOfWorkItemsCreated": {
                        "type": "string",
                        "description": "The number of Work Items created using this Work Template",
                        "example": 2
                    },
                    "DateLastWorkItemCreated": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The most recent date at which a Work Item was created using this Work Template",
                        "example": "2022-07-21T07:14:08Z"
                    },
                    "DateModified": {
                        "type": "string",
                        "format": "UTC",
                        "description": "The most recent date at which this Work Template was modified",
                        "example": "2022-07-23T03:20:54Z"
                    },
                    "ActorRoles": {
                        "type": "array",
                        "description": "The user roles who are required to action the Work Items created using this Work Template",
                        "items": {
                            "type": "object",
                            "properties": {
                                "ActorKey": {
                                    "type": "string",
                                    "description": "A Karbon-generated unique identifier for the user role",
                                    "example": "249zS1J5Jdkf"
                                },
                                "ActorName": {
                                    "type": "string",
                                    "description": "The name of the user role",
                                    "example": "Accountant"
                                }
                            }
                        }
                    }
                }
            },
            "GetWorkTemplates": {
                "required": [
                    "value",
                    "@odata.context",
                    "@odata.count"
                ],
                "type": "object",
                "properties": {
                    "@odata.context": {
                        "type": "string",
                        "description": "The information about Karbon controllers generating this response.",
                        "example": "https://api.karbonhq.com/v3/$metadata#WorkTemplates"
                    },
                    "@odata.count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 3,
                        "description": "The total number of Work Templates that satisfy the query criteria."
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#components/schemas/GetSingleWorkTemplate"
                        }
                    },
                    "@odata.nextLink": {
                        "type": "string",
                        "example": "https://api.karbonhq.com/v3/WorkTemplates?$skip=10",
                        "description": "The link to next set of Work Templates. @odata.nextLink field will only appear if you have more than 10 Work Templates."
                    }
                }
            },
            "ErrorMessages": {
                "required": [
                    "error"
                ],
                "type": "object",
                "properties": {
                    "error": {
                        "required": [
                            "code",
                            "message"
                        ],
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "A Karbon-generated code to identify the error"
                            },
                            "message": {
                                "type": "string",
                                "description": "The error message"
                            }
                        }
                    }
                }
            },
            "EnhancedErrorMessages": {
                "required": [
                    "error"
                ],
                "type": "object",
                "properties": {
                    "error": {
                        "required": [
                            "code",
                            "message"
                        ],
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "A Karbon-generated code to identify the error"
                            },
                            "message": {
                                "type": "string",
                                "description": "The error message"
                            },
                            "details": {
                                "type": "array",
                                "description": "The details of error message",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "code": {
                                            "type": "string",
                                            "description": "Error Summary"
                                        },
                                        "target": {
                                            "type": "string",
                                            "description": "Property that has encountered issue"
                                        },
                                        "message": {
                                            "type": "string",
                                            "description": "The detailed error message"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ResourceNotFound": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "string",
                        "description": "The generic HTTP Error code"
                    },
                    "message": {
                        "type": "string",
                        "description": "The error message"
                    }
                }
            }
        },
        "examples": {
            "ResourceNotFound": {
                "value": {
                    "statusCode": 404,
                    "message": "Resource not found"
                }
            },
            "UnauthorizedAccess": {
                "value": {
                    "statusCode": 401,
                    "message": "JWT not present."
                }
            },
            "NotFound": {
                "value": {
                    "code": 4004,
                    "message": "Not Found"
                }
            },
            "elongated_5001": {
                "value": {
                    "error": {
                        "code": 5001,
                        "message": "Unexpected Internal Error. Please contact Karbon HQ Technical support with API Request Id of 63792674374107265425."
                    }
                }
            },
            "Shortened_5001": {
                "value": {
                    "error": {
                        "code": 5001,
                        "message": "Internal Error."
                    }
                }
            },
            "Bad_Model": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "WebhookSubscription model cannot be null."
                    }
                }
            },
            "Bad_Model_WorkItem_Incorrect_ClientType": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": {
                            "code": "InvalidProperty",
                            "target": "workItem.ClientType",
                            "message": "ClientType must be Contact, Organization, or ClientGroup"
                        }
                    }
                }
            },
            "Bad_Model_WorkItem_Empty_Property": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": {
                            "code": "InvalidProperty",
                            "target": "workItem.<property_name>",
                            "message": "The <property_name> field is required."
                        }
                    }
                }
            },
            "Bad_Model_WorkItem_Incorrect_EmailAddress": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": {
                            "code": "InvalidProperty",
                            "target": "workItem.AssigneeEmailAddress",
                            "message": "Assignee Email Address is not a valid Email Address"
                        }
                    }
                }
            },
            "Bad_Model_WorkItem_Incorrect_ClientKey": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": {
                            "code": "InvalidProperty",
                            "target": "workItem.ClientKey",
                            "message": "ClientKey is not a valid Contact Key"
                        }
                    }
                }
            },
            "Bad_Model_WorkItem_Incorrect_WorkType": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": {
                            "code": "InvalidProperty",
                            "target": "workItem.WorkType",
                            "message": "Work Type is not valid"
                        }
                    }
                }
            },
            "Bad_Model_WorkItem_Incorrect_WorkTemplate_Key": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": {
                            "code": "InvalidProperty",
                            "target": "workItem.WorkTemplateKey",
                            "message": "WorkTemplateKey is not a valid Work Template"
                        }
                    }
                }
            },
            "Bad_Model_WorkItem_Client_Not_a_member_of_ClientGroup": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": {
                            "code": "InvalidProperty",
                            "target": "workItem.<key>",
                            "message": "Cannot assign Related Client Group as Client is not a member of this Group"
                        }
                    }
                }
            },
            "File_key_not_present": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": [
                            {
                                "code": "InvalidObject",
                                "target": "fileKey",
                                "message": null
                            },
                            {
                                "code": "InvalidProperty",
                                "target": "fileKey.String",
                                "message": "A value is required but was not present in the request."
                            },
                            {
                                "code": "InvalidProperty",
                                "target": "InvalidObject",
                                "message": "No File Context for the provided key"
                            }
                        ]
                    }
                }
            },
            "No_File_context": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": [
                            {
                                "code": "InvalidObject",
                                "target": "fileKey",
                                "message": null
                            },
                            {
                                "code": "InvalidProperty",
                                "target": "InvalidObject",
                                "message": "No File Context for the provided key"
                            }
                        ]
                    }
                }
            },
            "Client_task_key_is_empty": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": [
                            {
                                "code": "InvalidObject",
                                "target": "Key",
                                "message": null
                            },
                            {
                                "code": "InvalidProperty",
                                "target": "InvalidObject",
                                "message": "Client Task Key not provided"
                            }
                        ]
                    }
                }
            },
            "Invalid_ClientTaskKey": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": [
                            {
                                "code": "InvalidProperty",
                                "target": "clientTaskComment.ClientTaskKey",
                                "message": "Client Task not found for the provided ClientTaskKey."
                            }
                        ]
                    }
                }
            },
            "Invalid_AuthorKey": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": [
                            {
                                "code": "InvalidProperty",
                                "target": "clientTaskComment.AuthorKey",
                                "message": "The provided author of the comment is not a recipient of the ClientTaskKey provided."
                            }
                        ]
                    }
                }
            },
            "Missing_AuthorKey": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": [
                            {
                                "code": "InvalidProperty",
                                "target": "clientTaskComment.AuthorKey",
                                "message": "Must provide a value for AuthorKey, The provided author of the comment is not a recipient of the ClientTaskKey provided."
                            }
                        ]
                    }
                }
            },
            "Missing_AuthorType": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": [
                            {
                                "code": "InvalidProperty",
                                "target": "clientTaskComment.AuthorType",
                                "message": "Must provide a value for AuthorType, The provided author of the comment is not a recipient of the ClientTaskKey provided."
                            }
                        ]
                    }
                }
            },
            "Missing_ClientTaskKey": {
                "value": {
                    "error": {
                        "code": 4003,
                        "message": "Invalid Model.",
                        "details": [
                            {
                                "code": "InvalidObject",
                                "target": null,
                                "message": "Client Task Key not provided"
                            }
                        ]
                    }
                }
            },
            "Key_Not_Found": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No Client Group found for provided key"
                    }
                }
            },
            "ClientRequestRecipient_Not_Found": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No entities found for the provided email address"
                    }
                }
            },
            "ClientRequestRecipient_Invalid_Email": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "Invalid Email Address."
                    }
                }
            },
            "CommentKey_Not_Found": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "Unable to find commentkey: <CommentKey>"
                    }
                }
            },
            "ClientRequestKey_Not_Found": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No client request found for the provided key"
                    }
                }
            },
            "Organization_Key_Not_Found_404": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No organization exists with a key of 3g44LgvYQFTk."
                    }
                }
            },
            "WorkItem_Key_Not_Found_404": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No Work Item found for provided key"
                    }
                }
            },
            "WorkSchedule_Key_Not_Found_404": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No Work Schedule found for provided key"
                    }
                }
            },
            "WorkTemplate_Key_Not_Found_404": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No Work Template found for provided key"
                    }
                }
            },
            "ContactKey_Not_Found": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No Contact found for provided key"
                    }
                }
            },
            "Organization_Key_Not_Found_400": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "No Organization found for provided key"
                    }
                }
            },
            "Timesheet_Key_Not_Found_404": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No timesheet found for provided key"
                    }
                }
            },
            "Webhook_Subscription_Key_Not_Found_404": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No timesheet found for provided key"
                    }
                }
            },
            "Webhook_Subscription_Type_Not_Found_404": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No Webhook Type found for the provided WebhookType input value : <Input type>. Valid WebhookTypes are Contact, Work, Note"
                    }
                }
            },
            "BusinessCard_Not_Found": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "Invalid businessCardPermaKey 2tBHyXtJBxBy"
                    }
                }
            },
            "UDI_Not_Found": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No Client Group found for provided UserDefinedIdentifer"
                    }
                }
            },
            "UDI_Not_Found_Contact": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No Contact found for provided UserDefinedIdentifer"
                    }
                }
            },
            "UDI_Not_Found_Organization": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No Organization found for provided UserDefinedIdentifer"
                    }
                }
            },
            "UDI_Is_Empty": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "UserDefinedIdentifier is missing or empty"
                    }
                }
            },
            "Missing_Update_Data": {
                "value": {
                    "error": {
                        "code": 4005,
                        "message": "Required payload data is missing: update"
                    }
                }
            },
            "Duplicate_UDI": {
                "value": {
                    "error": {
                        "code": 5001,
                        "message": "User defined identifier already in use"
                    }
                }
            },
            "Missing_Create_Data": {
                "value": {
                    "error": {
                        "code": 4005,
                        "message": "Required payload data is missing: <Entity>"
                    }
                }
            },
            "Update_Unsupported_Property": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "Invalid property to update. Only FullName can be patched"
                    }
                }
            },
            "$Orderby_Unsupported_Property": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "The property '<Property Name>' cannot be used in the $orderby query option."
                    }
                }
            },
            "Unsupported_Property_Filter": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "Could not find a property named '<Property Name>' on type 'KarbonService.<KarbonEntity>SummaryDTO'."
                    }
                }
            },
            "Unsupported_Logical_Operator": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "Logical operator '<Operator Name>' is not allowed. To allow it, set the 'AllowedLogicalOperators' property on EnableQueryAttribute or QueryValidationSettings."
                    }
                }
            },
            "Limit_Exceeded_Top": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "The limit of '100' for Top query has been exceeded. The value from the incoming request is '130'."
                    }
                }
            },
            "WorkTemplates_Limit_Exceeded_Top": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "The limit of '10' for Top query has been exceeded. The value from the incoming request is '130'."
                    }
                }
            },
            "Unsupported_option": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "Query option '<Option Name>' is not allowed. To allow it, set the 'AllowedQueryOptions' property on EnableQueryAttribute or QueryValidationSettings."
                    }
                }
            },
            "Invalid_Property": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "Invalid property to update. Only <Property name> can be patched."
                    }
                }
            },
            "HTTP_Resource_Not_Found": {
                "value": {
                    "error": {
                        "code": null,
                        "message": "No HTTP resource was found that matches the request URI 'http://api.karbonhq.com/v3/<endpoint>"
                    }
                }
            },
            "Generic_Key_Not_Found": {
                "value": {
                    "error": {
                        "code": 4004,
                        "message": "No Contact found for provided key"
                    }
                }
            },
            "Unsupported_File_Type": {
                "value": {
                    "error": {
                        "code": 5001,
                        "message": "Unsupported file type"
                    }
                }
            },
            "Note_Payload_Mising": {
                "value": {
                    "error": {
                        "code": 4005,
                        "message": "Required payload data is missing: note"
                    }
                }
            },
            "Missing_Assignee_Email_Address": {
                "value": {
                    "error": {
                        "code": 5001,
                        "message": "Assignee email address is not an active Karbon user"
                    }
                }
            },
            "Invalid_Author_Email_Address": {
                "value": {
                    "error": {
                        "code": 5001,
                        "message": "Author email address is not an active Karbon user"
                    }
                }
            },
            "Missing_Author_Email_Address": {
                "value": {
                    "error": {
                        "code": 5001,
                        "message": "Author email address must be provided"
                    }
                }
            },
            "Missing_CreatedFromWorkItemKey": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "CreatedFromWorkItemKey not provided."
                    }
                }
            },
            "Incorrect_CustomFrequencyMultiple": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "CustomFrequencyMultiple should be greater than 0"
                    }
                }
            },
            "Missing_Filter_Property": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "$expand was specified on ClientTaskSummaries but none of the required $filter properties were specified."
                    }
                }
            },
            "Missing_Token": {
                "value": {
                    "error": {
                        "code": 4001,
                        "message": "Attachment token not provided"
                    }
                }
            },
            "Invalid_Token": {
                "value": {
                    "error": {
                        "code": 4001,
                        "message": "Attachment token could not be validated."
                    }
                }
            },
            "Could_not_upload_attachment": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "Could not upload any attachments"
                    }
                }
            },
            "Invalid_Patch_Property": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "Invalid PATCH property. Only <FieldNames> can be patched."
                    }
                }
            },
            "Comment_Not_Found": {
                "value": {
                    "error": {
                        "code": 4002,
                        "message": "No comment found for provided key"
                    }
                }
            },
            "Name_or_Email_Is_Empty": {
                "value": {
                    "error": {
                        "code": 5001,
                        "message": "Name and Email Address can not be null or empty"
                    }
                }
            }
        },
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            },
            "ApiKeyAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "AccessKey"
            }
        }
    }
}